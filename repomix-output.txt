This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-22T18:50:15.816Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
actions/analysis/get-analytics.ts
actions/auth/get-user.ts
actions/auth/index.ts
actions/auth/signin-with-github.ts
actions/auth/signin-with-google.ts
actions/auth/signin-with-password.ts
actions/auth/signout.ts
actions/auth/signup.ts
actions/shopify/getBlogPosts.ts
actions/shopify/getProducts.ts
app/(dashboard)/admin/page.tsx
app/(dashboard)/user/page.tsx
app/about-me/page.tsx
app/analysis/[...slug]/page.tsx
app/analysis/page.tsx
app/api/auth/callback/route.ts
app/api/auth/confirm/route.ts
app/api/seo/functions/analyzeSocialSignals.ts
app/api/seo/functions/checkAccessibility.ts
app/api/seo/functions/checkBrokenLinks.ts
app/api/seo/functions/checkBrowserCompatability.ts
app/api/seo/functions/checkConsoleOutput.js
app/api/seo/functions/checkCookiePolicy.ts
app/api/seo/functions/checkCustom404.ts
app/api/seo/functions/checkDeprecatedHtmlTags.ts
app/api/seo/functions/checkDNS.ts
app/api/seo/functions/checkforXMLSitemap.ts
app/api/seo/functions/checkImageOptimization.ts
app/api/seo/functions/checkLighthouse.ts
app/api/seo/functions/checkLinks.ts
app/api/seo/functions/checkMetadata.ts
app/api/seo/functions/checkRedirects.ts
app/api/seo/functions/checkRobotsTxt.ts
app/api/seo/functions/checkSSLCertificate.ts
app/api/seo/functions/extractHeadingsWithText.ts
app/api/seo/functions/keywordAnalysis.ts
app/api/seo/functions/seoScore.ts
app/api/seo/functions/softwareDetection.ts
app/api/seo/route.ts
app/api/seo/utils/utils.js
app/blog/components/FeaturedPost.tsx
app/blog/error.tsx
app/blog/page.tsx
app/blog/types.ts
app/design/page.tsx
app/development/page.tsx
app/globals.css
app/layout.tsx
app/local/website-design/page.tsx
app/marketing/page.tsx
app/middleware.ts
app/page.tsx
app/providers.tsx
app/shop/[handle]/page.tsx
app/shop/components/AddToCartButton.tsx
app/shop/components/index.ts
app/shop/components/ProductGrid.tsx
app/shop/page.tsx
app/tools/page.tsx
app/work-with-me/page.tsx
components.json
components/analysis/client.tsx
components/analysis/conclusion.tsx
components/analysis/design.tsx
components/analysis/impact.tsx
components/analysis/index.ts
components/analysis/investment.tsx
components/analysis/market.tsx
components/analysis/overview.tsx
components/analysis/performance.tsx
components/analysis/seo.tsx
components/analysis/technical.tsx
components/charts/index.tsx
components/footer.tsx
components/header.tsx
components/page-header.tsx
components/sections/background.tsx
components/sections/cta.tsx
components/sections/features.tsx
components/sections/hero-pages.tsx
components/sections/hero.tsx
components/ui/accordion.tsx
components/ui/alert-dialog.tsx
components/ui/alert.tsx
components/ui/aspect-ratio.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/bento-grid.tsx
components/ui/breadcrumb.tsx
components/ui/button.tsx
components/ui/calendar.tsx
components/ui/card.tsx
components/ui/carousel.tsx
components/ui/chart.tsx
components/ui/checkbox.tsx
components/ui/coded-text.tsx
components/ui/collapsible.tsx
components/ui/command.tsx
components/ui/context-menu.tsx
components/ui/dialog.tsx
components/ui/drawer.tsx
components/ui/dropdown-menu.tsx
components/ui/form.tsx
components/ui/hover-card.tsx
components/ui/index.ts
components/ui/input-otp.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/marquee.tsx
components/ui/menubar.tsx
components/ui/navigation-menu.tsx
components/ui/orbiting-circles.tsx
components/ui/pagination.tsx
components/ui/popover.tsx
components/ui/progress.tsx
components/ui/radio-group.tsx
components/ui/resizable.tsx
components/ui/scroll-area.tsx
components/ui/scroll-based-velocity.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sheet.tsx
components/ui/sidebar.tsx
components/ui/skeleton.tsx
components/ui/slider.tsx
components/ui/sonner.tsx
components/ui/switch.tsx
components/ui/table.tsx
components/ui/tabs.tsx
components/ui/text-stroke.tsx
components/ui/textarea.tsx
components/ui/toast.tsx
components/ui/toaster.tsx
components/ui/toggle-group.tsx
components/ui/toggle.tsx
components/ui/tooltip.tsx
components/ui/use-toast.ts
components/ui/vortex.tsx
hooks/use-mobile.tsx
hooks/use-toast.ts
lib/fonts.ts
lib/queries/blog.ts
lib/queries/cart.ts
lib/queries/customer.ts
lib/queries/index.ts
lib/queries/products.ts
lib/shopify.ts
lib/unstable-cache.ts
lib/utils.ts
next.config.ts
package.json
playwright.config.ts
postcss.config.mjs
public/astronaut.svg
public/next.svg
public/vercel.svg
README.md
tailwind.config.ts
tsconfig.json
types/analysis.ts
types/auth/index.ts
types/index.ts
types/shopify.ts

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz
.cursorignore

# testing
/coverage

# next.js
/.next/
/out/   

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel


# typescript
*.tsbuildinfo
next-env.d.ts

================
File: actions/analysis/get-analytics.ts
================
import { Clock, Zap, Search, LayoutGrid, Smartphone } from "lucide-react";
import { Benchmarks, Stat } from "@/types/analysis";

export const benchmarks: Benchmarks = {
	loadTime: { industry: 8.2, optimized: 2.1 },
	performanceScore: { industry: 50, optimized: 90 },
	seoScore: { industry: 60, optimized: 95 },
	bestPractices: { industry: 70, optimized: 95 },
	mobileScore: { industry: 65, optimized: 95 },
	bounceRate: { industry: 55, optimized: 35 },
	averageTimeOnPage: { industry: 120, optimized: 180 },
	organicTrafficIncrease: 250,
	conversionRate: { industry: 2.5, optimized: 4.5 },
};

export const calculateImprovement = (oldValue: number, newValue: number) => {
	const improvement = ((newValue - oldValue) / oldValue) * 100;
	return improvement.toFixed(1) + "%";
};

export const stats: Stat[] = [
	{
		icon: Clock,
		industryValue: benchmarks.loadTime.industry,
		optimizedValue: benchmarks.loadTime.optimized,
		label: "Load Time",
		improvement: calculateImprovement(benchmarks.loadTime.industry, benchmarks.loadTime.optimized),
	},
	{
		icon: Zap,
		industryValue: benchmarks.performanceScore.industry,
		optimizedValue: benchmarks.performanceScore.optimized,
		label: "Performance Score",
		improvement: calculateImprovement(benchmarks.performanceScore.industry, benchmarks.performanceScore.optimized),
	},
	{
		icon: Search,
		industryValue: benchmarks.seoScore.industry,
		optimizedValue: benchmarks.seoScore.optimized,
		label: "SEO Score",
		improvement: calculateImprovement(benchmarks.seoScore.industry, benchmarks.seoScore.optimized),
	},
	{
		icon: LayoutGrid,
		industryValue: benchmarks.bestPractices.industry,
		optimizedValue: benchmarks.bestPractices.optimized,
		label: "Best Practices",
		improvement: calculateImprovement(benchmarks.bestPractices.industry, benchmarks.bestPractices.optimized),
	},
	{
		icon: Smartphone,
		industryValue: benchmarks.mobileScore.industry,
		optimizedValue: benchmarks.mobileScore.optimized,
		label: "Mobile Score",
		improvement: calculateImprovement(benchmarks.mobileScore.industry, benchmarks.mobileScore.optimized),
	},
];

export const sections = [
	{ id: "overview", title: "Overview" },
	{ id: "client", title: "Client Overview" },
	{ id: "performance", title: "Performance" },
	{ id: "seo", title: "SEO" },
	{ id: "design", title: "Design" },
	{ id: "market-research", title: "Market Research" },
	{ id: "impact", title: "Business Impact" },
	{ id: "technical", title: "Technical Details" },
	{ id: "conclusion", title: "Conclusion" },
	{ id: "investment", title: "Investment" },
];

export const performanceData = [
	{ month: "Jan", industry: 50, optimized: 90 },
	{ month: "Feb", industry: 52, optimized: 91 },
	{ month: "Mar", industry: 51, optimized: 92 },
	{ month: "Apr", industry: 53, optimized: 93 },
	{ month: "May", industry: 52, optimized: 94 },
	{ month: "Jun", industry: 54, optimized: 95 },
];

export const conversionData = [
	{ category: "E-commerce", industry: 2.3, optimized: 3.9 },
	{ category: "Marine", industry: 2.5, optimized: 4.5 },
	{ category: "B2B", industry: 2.7, optimized: 4.8 },
];

================
File: actions/auth/get-user.ts
================
"use server";
import { createClient } from "../../supabase/server";
import { AuthResponse } from "../../types/auth";

export async function getUser(): Promise<AuthResponse> {
	const supabase = createClient();

	// Check if there is an active session
	const {
		data: { session },
		error: sessionError,
	} = await supabase.auth.getSession();

	if (sessionError || !session) {
		console.log(sessionError || "No active session found.");
		return { user: undefined, error: sessionError ? sessionError.message : "No active session found." };
	}

	// Fetch the user information
	const {
		data: { user },
		error: userError,
	} = await supabase.auth.getUser();

	if (userError) {
		console.log(userError);
		return { user: undefined, error: userError.message };
	}

	return { user: user || undefined, error: undefined };
}

================
File: actions/auth/index.ts
================
export { signup } from "./signup";
export { signinWithPassword } from "./signin-with-password";
export { signinWithGithub } from "./signin-with-github";
export { signinWithGoogle } from "./signin-with-google";
export { signout } from "./signout";
export { getUser } from "./get-user";

================
File: actions/auth/signin-with-github.ts
================
"use server";
import { createClient } from "../../supabase/server";
import { redirect } from "next/navigation";
import { AuthResponse } from "../../types/auth";

export async function signinWithGithub(): Promise<AuthResponse> {
	const supabase = createClient();

	const { data, error } = await supabase.auth.signInWithOAuth({
		provider: "github",
		options: {
			redirectTo: "http://localhost:3000/api/auth/callback",
		},
	});

	if (error) {
		console.log(error);
		return { error: error.message };
	}

	if (data && data.url) {
		redirect(data.url);
	}

	return { url: data?.url };
}

================
File: actions/auth/signin-with-google.ts
================
"use server";
import { createClient } from "../../supabase/server";
import { redirect } from "next/navigation";
import { AuthResponse } from "../../types/auth";

export async function signinWithGoogle(): Promise<AuthResponse> {
	const supabase = createClient();

	const { data, error } = await supabase.auth.signInWithOAuth({
		provider: "google",
		options: {
			redirectTo: "http://localhost:3000/api/auth/callback",
		},
	});

	if (error) {
		console.log(error);
		return { error: error.message };
	}

	if (data && data.url) {
		redirect(data.url);
	}

	return { url: data?.url };
}

================
File: actions/auth/signin-with-password.ts
================
"use server";

import { createClient } from "../../supabase/server";
import { AuthResponse } from "../../types/auth";

export async function signinWithPassword(formData: FormData): Promise<AuthResponse> {
	const supabase = createClient();

	const data = {
		email: formData.get("email") as string,
		password: formData.get("password") as string,
	};

	const { data: authData, error } = await supabase.auth.signInWithPassword(data);

	if (error) {
		console.log(error);
		return { error: error.message };
	}

	return { user: authData.user };
}

================
File: actions/auth/signout.ts
================
"use server";

import { createClient } from "../../supabase/server";
import { SignoutResponse } from "../../types/auth";

export async function signout(): Promise<SignoutResponse> {
	const supabase = createClient();

	const { error } = await supabase.auth.signOut();

	if (error) {
		console.log(error);
		return { error: error.message };
	}

	console.log("User signed out");
	return { error: undefined };
}

================
File: actions/auth/signup.ts
================
"use server";

import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { createClient } from "../../supabase/server";
import { AuthResponse } from "../../types/auth";

export async function signup(formData: FormData): Promise<AuthResponse> {
	const supabase = createClient();

	const data = {
		email: formData.get("email") as string,
		password: formData.get("password") as string,
	};

	const { error } = await supabase.auth.signUp(data);

	if (error) {
		console.log(error);
		return { error: error.message };
	}

	revalidatePath("/", "layout");
	redirect("/");
	return {};
}

================
File: actions/shopify/getBlogPosts.ts
================
import { shopifyClient, type ShopifyResponse } from "@/lib/shopify";
import { getBlogPostsQuery } from "@/lib/queries/blog";
import type { Post } from "@/app/blog/types";

interface ArticleNode {
	id: string;
	title: string;
	handle: string;
	excerpt: string;
	publishedAt: string;
	image: {
		url: string;
		altText: string | null;
		width: number;
		height: number;
	} | null;
	content: string;
	author: {
		name: string;
	};
}

interface ArticlesResponse {
	articles: {
		pageInfo: {
			hasNextPage: boolean;
			endCursor: string | null;
		};
		edges: Array<{
			cursor: string;
			node: ArticleNode;
		}>;
	};
}

interface ShopifyArticlesResponse {
	data: {
		articles: {
			pageInfo: {
				hasNextPage: boolean;
				endCursor: string | null;
			};
			edges: Array<{
				cursor: string;
				node: ArticleNode;
			}>;
		};
	};
}

const DEFAULT_BLOG_IMAGE = "https://cdn.shopify.com/s/files/1/0402/7626/3079/files/default-blog-image.jpg";

export async function getBlogPosts(first: number = 10) {
	try {
		const allPosts: Post[] = [];
		let hasNextPage = true;
		let afterCursor: string | null = null;
		let retryCount = 0;
		const maxRetries = 3;

		while (hasNextPage && retryCount < maxRetries) {
			try {
				const response: ShopifyResponse<ShopifyArticlesResponse> = await shopifyClient.request(getBlogPostsQuery, {
					variables: {
						first: Math.min(first, 50),
						after: afterCursor,
					},
				});

				const articles = response?.data?.data?.articles;
				if (!articles?.edges?.length) {
					console.log("No articles found");
					return [];
				}

				const posts = articles.edges.map(({ node }: { node: ArticleNode }) => ({
					id: node.id,
					title: node.title,
					image: node.image?.url || DEFAULT_BLOG_IMAGE,
					excerpt: node.excerpt || node.content.substring(0, 150) + "...",
					date: node.publishedAt,
				}));

				allPosts.push(...posts);
				hasNextPage = articles.pageInfo.hasNextPage && allPosts.length < first;
				afterCursor = articles.pageInfo.endCursor;

				if (allPosts.length >= first) {
					break;
				}
			} catch (error) {
				retryCount++;
				console.error(`Attempt ${retryCount} failed:`, error);

				if (retryCount === maxRetries) {
					console.log("Max retries reached");
					return [];
				}

				const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);
				await new Promise((resolve) => setTimeout(resolve, delay));
			}
		}

		return allPosts;
	} catch (error) {
		console.error("Error fetching blog posts:", error);
		return [];
	}
}

================
File: actions/shopify/getProducts.ts
================
import { unstable_cache } from "next/cache";
import { shopifyClient } from "@/lib/shopify";
import { getAllProductsQuery, getProductByHandleQuery } from "@/lib/queries/products";
import type { Product } from "@/types/shopify";

export const getProducts = unstable_cache(
	async () => {
		const { data } = await shopifyClient.request(getAllProductsQuery);

		return data.products.edges.map(({ node }: any) => ({
			id: node.id,
			title: node.title,
			handle: node.handle,
			description: node.description,
			price: node.priceRange.minVariantPrice,
			image: node.images.edges[0]?.node || null,
		}));
	},
	["all-products"],
	{
		revalidate: 60, // Cache for 1 minute
		tags: ["products"],
	}
);

export const getProduct = unstable_cache(
	async (handle: string) => {
		const { data } = await shopifyClient.request(getProductByHandleQuery, {
			variables: { handle },
		});

		if (!data.product) return null;

		return {
			id: data.product.id,
			title: data.product.title,
			description: data.product.description,
			handle: data.product.handle,
			price: data.product.priceRange.minVariantPrice,
			images: data.product.images.edges.map((edge: any) => edge.node),
			variantId: data.product.variants.edges[0]?.node.id,
			availableForSale: data.product.availableForSale,
		};
	},
	["product"],
	{
		revalidate: 60,
		tags: ["products"],
	}
);

================
File: app/(dashboard)/admin/page.tsx
================
import { redirect } from "next/navigation";
import { getUser } from "../../../actions/auth";

export default async function PrivatePage() {
	const { user, error } = await getUser();
	if (error || !user) {
		redirect("/login");
	}

	return <p>Hello {user?.email}</p>;
}

================
File: app/(dashboard)/user/page.tsx
================
import { redirect } from "next/navigation";
import { getUser } from "../../../actions/auth";

export default async function PrivatePage() {
	const { user, error } = await getUser();
	if (error || !user) {
		redirect("/login");
	}

	return <p>Hello {user?.email}</p>;
}

================
File: app/about-me/page.tsx
================
"use client";

import { useEffect, useRef } from "react";
import Image from "next/image";
import { Button } from "../../components/ui/button";
import { Card, CardContent } from "../../components/ui/card";
import { Badge } from "../../components/ui/badge";
import { Twitter, Github, Youtube, ExternalLink, TrendingUp, Book, Briefcase, ArrowRight } from "lucide-react";

export default function AccessibleVIPAboutMePage() {
	const sectionRefs = useRef<(HTMLDivElement | null)[]>([]);

	useEffect(() => {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						entry.target.classList.add("animate-fade-in-up");
					}
				});
			},
			{ threshold: 0.1 }
		);

		sectionRefs.current.forEach((ref) => {
			if (ref) observer.observe(ref);
		});

		return () => observer.disconnect();
	}, []);

	return (
		<div className="min-h-screen bg-stone-50 text-stone-800 font-sans">
			{/* Hero Section */}
			<section className="pt-20 pb-32 bg-gradient-to-br from-stone-100 to-stone-200 relative overflow-hidden">
				<div className="container mx-auto px-4 relative z-10">
					<div className="flex flex-col md:flex-row items-center">
						<div className="md:w-1/2 mb-12 md:mb-0 pr-0 md:pr-8">
							<h1 className="text-5xl md:text-6xl font-serif font-bold mb-6 leading-tight bg-clip-text text-transparent bg-gradient-to-r from-stone-700 to-stone-900">Byron Wade</h1>
							<p className="text-2xl mb-8 text-stone-600">CEO and Co-Owner of Wade&apos;s Inc | Entrepreneur | Innovator</p>
							<div className="flex flex-wrap gap-3 mb-8">
								<Badge variant="secondary" className="text-lg py-2 px-4 bg-white/50 backdrop-blur-sm">
									<Briefcase className="w-5 h-5 mr-2 inline" /> Entrepreneur
								</Badge>
								<Badge variant="secondary" className="text-lg py-2 px-4 bg-white/50 backdrop-blur-sm">
									<Book className="w-5 h-5 mr-2 inline" /> CS Student
								</Badge>
								<Badge variant="secondary" className="text-lg py-2 px-4 bg-white/50 backdrop-blur-sm">
									<TrendingUp className="w-5 h-5 mr-2 inline" /> Innovator
								</Badge>
							</div>
						</div>
						<div className="md:w-1/2 flex justify-center">
							<div className="relative">
								<div className="absolute inset-0 bg-gradient-to-br from-stone-400 to-stone-600 rounded-full blur-3xl opacity-20 animate-pulse"></div>
								<Image src="https://placehold.co/600x400" width={400} height={400} alt="Byron Wade" className="rounded-full shadow-2xl border-4 border-white relative z-10" />
							</div>
						</div>
					</div>
				</div>
				<div className="absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-stone-50 to-transparent"></div>
			</section>

			{/* Main Content */}
			<section className="py-20 -mt-20">
				<div className="container mx-auto px-4 space-y-20">
					{/* About Me Section */}
					<Card
						className="bg-white shadow-xl rounded-3xl overflow-hidden"
						ref={(el) => {
							if (el) sectionRefs.current[0] = el;
						}}
					>
						<CardContent className="p-8">
							<h2 className="text-3xl font-serif font-bold mb-6">About Me</h2>
							<div className="space-y-4 text-xl text-stone-600">
								<p>Hello, I&apos;m Byron, an entrepreneur always seeking new opportunities to expand my company and create innovative solutions. I&apos;m excited to share my story and vision with you.</p>
								<p>I&apos;m studying Computer Science at Cabrillo College and plan to transfer to San Jose State. I&apos;m also considering degrees in Civil Engineering, Aerospace Engineering, and Criminal Justice to broaden my knowledge and expertise further.</p>
							</div>
						</CardContent>
					</Card>

					{/* Wade&apos;s Inc Section */}
					<Card
						className="bg-white shadow-xl rounded-3xl overflow-hidden"
						ref={(el) => {
							if (el) sectionRefs.current[0] = el;
						}}
					>
						<CardContent className="p-8">
							<h2 className="text-3xl font-serif font-bold mb-6">Wade&apos;s Inc.</h2>
							<div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
								<Card className="bg-gradient-to-br from-green-50 to-green-100">
									<CardContent className="p-6">
										<h3 className="text-2xl font-bold mb-4 text-green-800">First Year Revenue</h3>
										<p className="text-4xl font-bold text-green-600">$1.2 million</p>
									</CardContent>
								</Card>
								<Card className="bg-gradient-to-br from-blue-50 to-blue-100">
									<CardContent className="p-6">
										<h3 className="text-2xl font-bold mb-4 text-blue-800">Projected Next Year</h3>
										<p className="text-4xl font-bold text-blue-600">$2.3 million</p>
									</CardContent>
								</Card>
							</div>
							<h3 className="text-2xl font-bold mb-4">Our Companies</h3>
							<ul className="space-y-4">
								<li>
									<a href="https://wadesplumbingandseptic.com/" className="text-blue-600 hover:underline text-lg flex items-center">
										Wade&apos;s Plumbing and Septic <ArrowRight className="ml-2 w-4 h-4" />
									</a>
								</li>
								<li>
									<a href="https://clogmonsterssepticpumping.com/" className="text-blue-600 hover:underline text-lg flex items-center">
										Clog Monsters Septic Pumping <ArrowRight className="ml-2 w-4 h-4" />
									</a>
								</li>
							</ul>
						</CardContent>
					</Card>

					{/* Projects Section */}
					<Card
						className="bg-white shadow-xl rounded-3xl overflow-hidden"
						ref={(el) => {
							if (el) sectionRefs.current[0] = el;
						}}
					>
						<CardContent className="p-8">
							<h2 className="text-3xl font-serif font-bold mb-6">Current Projects</h2>
							<Card className="bg-gradient-to-br from-stone-50 to-stone-100 mb-6">
								<CardContent className="p-6">
									<h3 className="text-2xl font-bold mb-4">Wade&apos;s Academy</h3>
									<p className="text-xl text-stone-600 mb-4">An innovative online learning platform for the construction industry.</p>
									<a href="https://github.com/byronwade/wadesacademy.com" className="text-blue-600 hover:underline text-lg flex items-center">
										View Project <ArrowRight className="ml-2 w-4 h-4" />
									</a>
								</CardContent>
							</Card>
							<p className="text-xl text-stone-600">I&apos;m currently working on three innovative technology websites, with Wade&apos;s Academy being the flagship project that has the potential to revolutionize online learning in the construction industry.</p>
						</CardContent>
					</Card>

					{/* Connect Section */}
					<Card
						className="bg-white shadow-xl rounded-3xl overflow-hidden"
						ref={(el) => {
							if (el) sectionRefs.current[0] = el;
						}}
					>
						<CardContent className="p-8">
							<h2 className="text-3xl font-serif font-bold mb-6">Connect with Me</h2>
							<p className="text-xl text-stone-600 mb-8">I&apos;m open to exploring collaboration and investment opportunities. Feel free to reach out!</p>
							<div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
								<Button asChild variant="outline" className="w-full">
									<a href="https://twitter.com/leeerob" target="_blank" rel="noopener noreferrer" className="flex items-center justify-center">
										<Twitter className="w-5 h-5 mr-2" /> Twitter
									</a>
								</Button>
								<Button asChild variant="outline" className="w-full">
									<a href="https://github.com/leerob" target="_blank" rel="noopener noreferrer" className="flex items-center justify-center">
										<Github className="w-5 h-5 mr-2" /> GitHub
									</a>
								</Button>
								<Button asChild variant="outline" className="w-full">
									<a href="https://www.youtube.com/@leerob" target="_blank" rel="noopener noreferrer" className="flex items-center justify-center">
										<Youtube className="w-5 h-5 mr-2" /> YouTube
									</a>
								</Button>
							</div>
							<div className="text-center">
								<Button asChild className="bg-stone-800 hover:bg-stone-700 text-white text-lg px-8 py-3 rounded-full transition-all duration-300 transform hover:scale-105">
									<a href="/contact">Contact Me</a>
								</Button>
							</div>
						</CardContent>
					</Card>
				</div>
			</section>

			{/* Footer */}
			<footer className="bg-stone-100 py-8 mt-20">
				<div className="container mx-auto px-4 text-center text-stone-600">
					<p>&copy; {new Date().getFullYear()} Byron Wade. All rights reserved.</p>
				</div>
			</footer>
		</div>
	);
}

================
File: app/analysis/[...slug]/page.tsx
================
"use client";

import { motion, useScroll, useTransform } from "framer-motion";
import { Code, Database, Globe, Palette, Server, Zap, Cloud, Lock, Smartphone, Cpu, ExternalLink, Check } from "lucide-react";
import { useRef, useState, useEffect, JSXElementConstructor, Key, ReactElement, ReactNode, ReactPortal, RefObject } from "react";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
// Define the case study data type
type CaseStudyItem = {
	name: string;
	icon: any;
	description: string;
	tags: string[];
	keyFeatures: string[];
	url: string;
	businessMetrics?: string[];
	businessImpact?: string[];
	improvements?: string[];
	infrastructure?: string[];
	businessResults?: string[];
	marketingResults?: string[];
	satisfactionMetrics?: string[];
	financialMetrics?: string[];
	image?: string;
};

const caseStudyData: CaseStudyItem[] = [
	{
		name: "Company Overview",
		icon: Globe,
		description: "Impact Marine Group is a leading marine services provider specializing in boat sales, repairs, and marina operations.",
		tags: ["Marine Industry", "B2C", "Service-Based", "Local Business", "Established 1985"],
		keyFeatures: ["Multiple Locations", "Full-Service Marina", "Sales & Service", "Expert Staff", "Premium Brands"],
		businessMetrics: ["$12M Annual Revenue", "4 Locations", "45+ Employees", "2000+ Customers", "85% Customer Retention"],
		url: "https://impactmarinegroup.com",
		image: "/images/impact-marine.jpg",
	},
	{
		name: "Website Challenges",
		icon: Code,
		description: "The original website faced several critical issues affecting business performance and customer experience.",
		tags: ["Outdated Design", "Poor Mobile Experience", "Slow Loading", "Low Conversion", "Limited Functionality"],
		keyFeatures: ["5+ Second Load Time", "15% Bounce Rate", "2% Conversion Rate", "No Online Booking", "Limited Inventory Search"],
		businessImpact: ["Lost Sales Opportunities", "Poor Customer Experience", "Reduced Market Reach", "Inefficient Operations"],
		url: "/original-site-metrics",
	},
	{
		name: "Solution Implementation",
		icon: Palette,
		description: "Complete digital transformation with modern technology stack and user-centered design approach.",
		tags: ["Modern Design", "Mobile-First", "Performance Optimized", "SEO Enhanced", "Custom Features"],
		keyFeatures: ["Responsive Design", "Inventory Management", "Online Booking System", "Customer Portal", "Real-time Updates"],
		improvements: ["Fast page loads", "Intuitive navigation", "Streamlined booking", "Enhanced inventory display", "Integrated CRM"],
		url: "/implementation-details",
	},
	{
		name: "Technical Architecture",
		icon: Server,
		description: "Enterprise-grade infrastructure ensuring reliability, security, and scalability.",
		tags: ["Cloud Hosting", "API Integration", "Database Design", "Security", "Performance"],
		keyFeatures: ["99.9% Uptime", "SSL Security", "Data Encryption", "API-First Design", "Automated Backups"],
		infrastructure: ["AWS Cloud", "CDN Integration", "Load Balancing", "Database Clustering", "Monitoring Tools"],
		url: "/technical-specs",
	},
	{
		name: "Performance Metrics",
		icon: Database,
		description: "Quantifiable improvements in key performance indicators after website redesign.",
		tags: ["Analytics", "Conversion Rate", "Page Speed", "User Engagement", "SEO Rankings"],
		keyFeatures: ["Sub-2s Load Time", "45% Bounce Rate Reduction", "3x Conversion Rate", "Mobile Traffic +85%", "Search Rankings +40%"],
		businessResults: ["Online Bookings +150%", "Lead Generation +200%", "Customer Satisfaction +60%", "Operational Efficiency +40%"],
		url: "/performance-data",
	},
	{
		name: "Marketing Integration",
		icon: Zap,
		description: "Comprehensive digital marketing strategy leveraging the new website capabilities.",
		tags: ["SEO", "Content Marketing", "Social Media", "Email Campaigns", "PPC"],
		keyFeatures: ["Local SEO Optimization", "Content Strategy", "Social Integration", "Email Automation", "Analytics Dashboard"],
		marketingResults: ["Organic Traffic +120%", "Social Engagement +85%", "Email Subscribers +200%", "PPC Conversion +65%"],
		url: "/marketing-metrics",
	},
	{
		name: "Customer Experience",
		icon: Cloud,
		description: "Enhanced user journey and customer satisfaction through digital touchpoints.",
		tags: ["UX Design", "Customer Service", "Feedback System", "Support Portal", "Personalization"],
		keyFeatures: ["Intuitive Navigation", "24/7 Support Access", "Customer Dashboard", "Feedback Integration", "Personalized Content"],
		satisfactionMetrics: ["Customer Satisfaction +45%", "Support Tickets -30%", "Self-Service Usage +80%", "Repeat Visits +60%"],
		url: "/customer-experience",
	},
	{
		name: "Business Impact",
		icon: Lock,
		description: "Overall business improvements and ROI from the digital transformation project.",
		tags: ["Revenue Growth", "Cost Reduction", "Market Share", "Operational Efficiency", "Customer Retention"],
		keyFeatures: ["Revenue Increase +35%", "Operating Costs -25%", "Market Share +15%", "Customer Base +40%", "Staff Productivity +30%"],
		financialMetrics: ["ROI 285%", "Revenue Growth $4.2M", "Cost Savings $850K", "Marketing Efficiency +65%"],
		url: "/business-impact",
	},
];

interface ToolProps {
	tool: CaseStudyItem;
	index: number;
	setActiveToolIndex: (index: number) => void;
}

function Tool({ tool, index, setActiveToolIndex }: ToolProps) {
	const ref = useRef<HTMLDivElement>(null);
	const { scrollYProgress } = useScroll({
		target: ref as RefObject<HTMLElement>,
		offset: ["start end", "end start"],
	});
	const opacity = useTransform(scrollYProgress, [0, 0.3, 0.7, 1], [0, 1, 1, 0]);
	const scale = useTransform(scrollYProgress, [0, 0.3, 0.7, 1], [0.8, 1, 1, 0.8]);

	useEffect(() => {
		const unsubscribe = scrollYProgress.onChange((v) => {
			if (v > 0.3 && v < 0.7) {
				setActiveToolIndex(index);
			}
		});
		return () => unsubscribe();
	}, [scrollYProgress, index, setActiveToolIndex]);

	return (
		// @ts-ignore
		<motion.div ref={ref} style={{ opacity, scale }} className="min-h-[calc(100vh-64px)] md:-ml-32 flex items-center justify-center px-4">
			<Card className="w-full mx-auto max-w-5xl bg-black border border-zinc-800 rounded-xl overflow-hidden z-10">
				<CardHeader className="flex justify-between items-center py-10 border-b border-zinc-800">
					<div className="h-8 w-8 flex items-center justify-center">
						<svg viewBox="0 0 24 24" fill="none" className="h-6 w-6 text-zinc-500">
							<path d="M12 2L2 19.7778H22L12 2Z" fill="currentColor" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
						</svg>
					</div>
				</CardHeader>
				<CardContent className="space-y-4 p-6">
					<h2 className="text-2xl font-semibold tracking-tight text-white">{tool.name}</h2>
					<p className="text-zinc-400 text-sm">{tool.description}</p>
					<div className="flex flex-wrap gap-2">
						{tool.tags.map((tag, tagIndex) => (
							<Badge key={tagIndex} variant="secondary" className="bg-zinc-800 text-zinc-400">
								{tag}
							</Badge>
						))}
					</div>
					<Separator className="bg-zinc-800" />
					<div className="space-y-2">
						<h3 className="text-sm font-medium text-white">Key Features:</h3>
						<ul className="space-y-1">
							{tool.keyFeatures.map((feature, featureIndex) => (
								<li key={featureIndex} className="flex items-center text-zinc-400 text-sm">
									<Check className="h-4 w-4 mr-2 text-green-500" />
									{feature}
								</li>
							))}
						</ul>
					</div>
				</CardContent>
				<CardFooter className="border-t border-zinc-800 p-6">
					<a href="#" className="inline-flex items-center gap-2 text-sm text-zinc-400 hover:text-white transition-colors">
						View Template
						<ExternalLink className="h-4 w-4" />
					</a>
				</CardFooter>
			</Card>
		</motion.div>
	);
}

export default function ToolsShowcase() {
	const [activeToolIndex, setActiveToolIndex] = useState(0);

	return (
		<>
			<div className="flex flex-col lg:flex-row min-h-[calc(100vh-64px)] z-10">
				{/* Left side - Title, Description, and Overview */}
				<div className="w-full lg:w-1/4 flex flex-col justify-between p-6 lg:sticky lg:top-16 lg:h-[calc(100vh-64px)]">
					<div className="max-w-xs mx-auto lg:mx-0">
						<motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
							<Image src="/Impact-Logo.webp" alt="Impact Marine Group" width={1000} height={1000} className="w-full bg-white p-4 rounded-md mb-4" />
						</motion.div>
						{/* @ts-ignore */}
						<motion.h1 className="text-3xl font-bold mb-4 " initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
							Impact Marine Group
						</motion.h1>
						{/* @ts-ignore */}
						<motion.p className="text-base text-neutral-400 mb-6" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.2 }}>
							Impact Marine Group is a leading provider of marine services in Georgia, California. Case Study on website redesign and SEO optimization.
						</motion.p>
					</div>
					<div className="mt-6 lg:mt-0">
						<h3 className="text-xs font-semibold text-white uppercase tracking-wider mb-2">Overview</h3>
						<ul className="space-y-2">
							{caseStudyData.map((tool, index) => (
								<li key={tool.name} className={`transition-all duration-300 text-sm ${index === activeToolIndex ? "text-yellow-400 translate-x-1" : "text-neutral-500 hover:text-yellow-400"}`}>
									<tool.icon className="w-3 h-3 inline-block mr-1" />
									{tool.name}
								</li>
							))}
						</ul>
					</div>
				</div>

				{/* Right side - Scrolling Tools */}
				<div className="w-full lg:w-3/4">
					{caseStudyData.map((tool, index) => (
						<Tool key={tool.name} tool={tool} index={index} setActiveToolIndex={setActiveToolIndex} />
					))}
				</div>
			</div>
		</>
	);
}

================
File: app/analysis/page.tsx
================
"use client";

import { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import { TooltipProvider } from "@/components/ui/tooltip";
import Link from "next/link";
import PageHeader from "@/components/page-header";
import CodedText from "@/components/ui/coded-text";
import { benchmarks, calculateImprovement, stats, performanceData, conversionData } from "@/actions/analysis/get-analytics";

import dynamic from "next/dynamic";

const Overview = dynamic(() => import("@/components/analysis/overview"));
const Client = dynamic(() => import("@/components/analysis/client"));
const Performance = dynamic(() => import("@/components/analysis/performance"));
const SEO = dynamic(() => import("@/components/analysis/seo"));
const Market = dynamic(() => import("@/components/analysis/market"));
const Design = dynamic(() => import("@/components/analysis/design"));
const Impact = dynamic(() => import("@/components/analysis/impact"));
const Technical = dynamic(() => import("@/components/analysis/technical"));
const Conclusion = dynamic(() => import("@/components/analysis/conclusion"));
const Investment = dynamic(() => import("@/components/analysis/investment"));

export default function PerformanceCaseStudy() {
	const [isVisible, setIsVisible] = useState(false);
	const [activeSection, setActiveSection] = useState("overview");
	const [isSidebarOpen, setIsSidebarOpen] = useState(false);

	useEffect(() => {
		setIsVisible(true);
		const handleScroll = () => {
			const sections = document.querySelectorAll("section");
			const scrollPosition = window.scrollY;

			sections.forEach((section) => {
				if (section instanceof HTMLElement && section.offsetTop <= scrollPosition + 150) {
					setActiveSection(section.id);
				}
			});
		};

		window.addEventListener("scroll", handleScroll);
		return () => window.removeEventListener("scroll", handleScroll);
	}, []);

	const mainFeatures = ["Fully responsive design", "SEO optimization", "Performance optimization", "Security implementation", "Analytics integration", "Content management system", "Contact forms", "Social media integration", "Basic email setup", "30-day support"];

	const monthlyServices = [
		{
			feature: "24/7 monitoring",
			included: true,
		},
		{
			feature: "Security updates",
			included: true,
		},
		{
			feature: "Daily backups",
			included: true,
		},
		{
			feature: "CDN service",
			included: true,
		},
		{
			feature: "SSL certificate",
			included: true,
		},
		{
			feature: "Database management",
			included: true,
		},
		{
			feature: "Performance optimization",
			included: true,
		},
		{
			feature: "Content updates (2/month)",
			included: true,
		},
	];

	const addOns = [
		{
			title: "Landing Pages",
			description: "Custom designed, high-converting landing pages",
			price: "$799",
			features: ["Conversion-optimized design", "A/B testing setup", "Analytics integration", "Lead capture forms", "Mobile optimization"],
		},
		{
			title: "E-commerce Integration",
			description: "Full e-commerce functionality",
			price: "$2,499",
			features: ["Product catalog", "Shopping cart", "Payment gateway", "Inventory management", "Order processing"],
		},
		{
			title: "Custom Features",
			description: "Tailored functionality for your business",
			price: "From $999",
			features: ["Custom database design", "API integration", "Advanced search", "User authentication", "Custom reporting"],
		},
	];

	const performanceMetrics = useMemo(() => {
		return stats.map((stat) => ({
			...stat,
			improvement: calculateImprovement(typeof stat.industryValue === "string" ? parseFloat(stat.industryValue) : stat.industryValue, typeof stat.optimizedValue === "string" ? parseFloat(stat.optimizedValue) : stat.optimizedValue),
		}));
	}, [stats]);

	const fadeIn = {
		hidden: { opacity: 0, y: 20 },
		visible: { opacity: 1, y: 0 },
	};

	const seo = `${calculateImprovement(benchmarks.seoScore.industry, benchmarks.seoScore.optimized)} increase in SEO score, from ${benchmarks.seoScore.industry} to ${benchmarks.seoScore.optimized}`;

	const seoMetrics = {
		ctrImprovement: 25,
		clarityImprovement: 40,
		keyOptimizations: [{ title: "Strategic optimization of meta titles and descriptions", improvement: "25% CTR" }, { title: "Implementation of semantic HTML structure", improvement: "40% clarity" }, { title: "Enhancement of internal linking architecture" }, { title: "Mobile responsiveness optimization" }, { title: "Implementation of schema markup for rich snippets" }, { title: "URL structure refinement for maximum SEO impact" }],
	};

	const memoizedData = useMemo(
		() => ({
			performanceData,
			conversionData,
		}),
		[]
	);

	const memoizedStats = useMemo(() => {
		return {
			// ... stats calculation
		};
	}, []);

	return (
		<>
			<PageHeader title="Impact Marine Group">
				<Link href="https://www.figma.com" className="text-[#f24e1e] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Figma</CodedText>
				</Link>
				<Link href="https://www.sketch.com" className="text-[#fdad00] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Sketch</CodedText>
				</Link>
				<Link href="https://www.adobe.com/products/xd.html" className="text-[#ff61f6] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Adobe XD</CodedText>
				</Link>
				<Link href="https://www.invisionapp.com" className="text-[#ff3366] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">InVision</CodedText>
				</Link>
				<Link href="https://www.framer.com" className="text-[#05f] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Framer</CodedText>
				</Link>
				<Link href="https://www.axure.com" className="text-[#008d7d] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Axure</CodedText>
				</Link>
				<Link href="https://www.flinto.com" className="text-[#00d6bf] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Flinto</CodedText>
				</Link>
				<Link href="https://www.protopie.io" className="text-[#6200ee] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">ProtoPie</CodedText>
				</Link>
			</PageHeader>
			<TooltipProvider>
				<div className="min-h-screen bg-gradient-to-b bg-white dark:bg-black">
					<div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-y">
						<div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
							<header className="py-4">
								<div className="flex items-center justify-between">
									<div className="flex flex-col">
										<h3 className="text-sm text-muted-foreground">Analysis #346</h3>
										<h1 className="text-2xl font-bold">Impact Marine Group</h1>
									</div>
									<Button variant="outline" size="icon" className="lg:hidden" onClick={() => setIsSidebarOpen(!isSidebarOpen)}>
										<Menu className="h-4 w-4" />
										<span className="sr-only">Toggle navigation menu</span>
									</Button>
									<Button size="lg" className="hidden sm:flex">
										<CodedText>Get Your Analysis</CodedText>
									</Button>
								</div>
							</header>
						</div>
					</div>

					<div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
						<div className="lg:grid lg:gap-8">
							<main className="space-y-12 lg:space-y-16">
								<motion.div initial="hidden" animate={isVisible ? "visible" : "hidden"} variants={fadeIn} transition={{ duration: 0.5 }} style={{ display: "grid", gap: "3rem" }}>
									{/* @ts-ignore */}
									<Overview stats={stats} />
									<Client />
									<Performance />
									<SEO seo={seo} benchmarks={benchmarks} seoMetrics={seoMetrics} />
									<Design />
									<Market performanceData={memoizedData.performanceData} conversionData={memoizedData.conversionData} />
									<Impact />
									<Technical />
									<Conclusion />
									<Investment mainFeatures={mainFeatures} monthlyServices={monthlyServices} addOns={addOns} />

									<section className="text-center space-y-6">
										<h2 className="text-3xl font-bold">Ready to Get Started?</h2>
										<p className="text-xl text-muted-foreground">Let&apos;s discuss how we can help transform your online presence</p>
										<Button size="lg" className="bg-primary hover:bg-primary/90">
											Schedule a Consultation
										</Button>
									</section>
								</motion.div>
							</main>
						</div>
					</div>
				</div>
			</TooltipProvider>
		</>
	);
}

================
File: app/api/auth/callback/route.ts
================
// src/app/auth/callback/route.ts
import { NextResponse } from "next/server";
import { createClient } from "../../../../supabase/server";

export async function GET(request: Request) {
	const { searchParams, origin } = new URL(request.url);
	const code = searchParams.get("code");
	const next = searchParams.get("next") ?? "/";

	if (code) {
		const supabase = createClient();
		const { error } = await supabase.auth.exchangeCodeForSession(code);
		if (!error) {
			const forwardedHost = request.headers.get("x-forwarded-host");
			const isLocalEnv = process.env.NODE_ENV === "development";
			if (isLocalEnv) {
				return NextResponse.redirect(`${origin}${next}`);
			} else if (forwardedHost) {
				return NextResponse.redirect(`https://${forwardedHost}${next}`);
			} else {
				return NextResponse.redirect(`${origin}${next}`);
			}
		}
	}

	return NextResponse.redirect(`${origin}/auth/auth-code-error`);
}

================
File: app/api/auth/confirm/route.ts
================
import { type EmailOtpType } from "@supabase/supabase-js";
import { type NextRequest } from "next/server";

import { createClient } from "../../../../supabase/server";
import { redirect } from "next/navigation";

export async function GET(request: NextRequest) {
	const { searchParams } = new URL(request.url);
	const token_hash = searchParams.get("token_hash");
	const type = searchParams.get("type") as EmailOtpType | null;
	const next = searchParams.get("next") ?? "/";

	if (token_hash && type) {
		const supabase = createClient();

		const { error } = await supabase.auth.verifyOtp({
			type,
			token_hash,
		});
		if (!error) {
			// redirect user to specified redirect URL or root of app
			redirect(next);
		}
	}

	// redirect the user to an error page with some instructions
	redirect("/error");
}

================
File: app/api/seo/functions/analyzeSocialSignals.ts
================
import { type Page } from '@playwright/test';



// Function to fetch social media links from the page
async function getSocialLinks(page: Page) {
	return page.$$eval("a", (links) => {
		return links.map((link) => link.href).filter((href) => href.includes("facebook.com") || href.includes("twitter.com") || href.includes("linkedin.com"));
	});
}

// Function to fetch meta social links from the page
async function getMetaSocialLinks(page: Page) {
	return page.$$eval("meta", (tags) => {
		const metaLinks: { twitter?: string } = {};
		tags.forEach((tag) => {
			const property = tag.getAttribute("property");
			const content = tag.getAttribute("content");
			if (property && content) {
				if (property.includes("twitter:site")) {
					metaLinks.twitter = content.startsWith("@") ? `https://twitter.com/${content.substring(1)}` : content;
				}
			}
		});
		return metaLinks;
	});
}

export const analyzeSocialSignals = async (page: Page) => {
	const results = {
		facebook: { link: null, profileName: null, sharedCount: null },
		twitter: { link: null, profileName: null, sharedCount: null },
		linkedin: { link: null, profileName: null, sharedCount: null },
	};

	// Parallelizing the fetching of social links and meta social links
	const [socialLinks, metaSocialLinks] = await Promise.all([getSocialLinks(page), getMetaSocialLinks(page)]);

	const combinedLinks = { ...metaSocialLinks, ...Object.fromEntries(socialLinks.map((link) => [link.split(".com")[0].split("//").pop(), link])) };

	// Parallelizing the fetching of share counts and updating of results
	const fetchPromises = Object.entries(combinedLinks).map(async ([platform, link]) => {
		// ... rest of the code remains the same
	});

	await Promise.all(fetchPromises);

	return results;
};

================
File: app/api/seo/functions/checkAccessibility.ts
================
import AxeBuilder from '@axe-core/playwright';
import { Page } from '@playwright/test';

export async function checkAccessibility(page: Page) {
	await page.waitForSelector('body');

	const accessibilityScanResults = await new AxeBuilder({ page })
		.withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
		.analyze();

	const violationCount = accessibilityScanResults.violations.length;
	const incompleteCount = accessibilityScanResults.incomplete.length;
	const violationSummary = accessibilityScanResults.violations.reduce((summary: Record<string, number>, violation) => {
		summary[violation.id] = violation.nodes.length;
		return summary;
	}, {});

	return {
		violationCount,
		incompleteCount, 
		violationSummary
	};
}

================
File: app/api/seo/functions/checkBrokenLinks.ts
================
import { Page } from "@playwright/test";

export const checkBrokenLinks = async (page: Page): Promise<Record<string, any>> => {
	await page.waitForSelector("body");
	await page.waitForLoadState("networkidle");
	
	const urls = await page.$$eval('a', (links: any[]) => 
		links
			.map(link => {
				try {
					return new URL(link.href).toString();
				} catch {
					return null;
				}
			})
			.filter(Boolean)
	);

	const brokenLinksDetails = {
		totalLinks: urls.length,
		brokenLinks: 0,
		brokenLinksList: [] as string[],
	};

	for (const url of urls) {
		try {
			if (url) {
				const response = await page.goto(url, { waitUntil: "domcontentloaded" });
				if (!response || !response.ok()) {
					brokenLinksDetails.brokenLinks++;
					brokenLinksDetails.brokenLinksList.push(url);
				}
			}
		} catch (err) {
			if (url) {
				brokenLinksDetails.brokenLinks++;
				brokenLinksDetails.brokenLinksList.push(url);
			}
		}
	}

	return brokenLinksDetails;
};

================
File: app/api/seo/functions/checkBrowserCompatability.ts
================
import { Page } from "@playwright/test";

export const checkBrowserCompatibility = async (page: Page) => {
	try {
		await page.waitForLoadState("load");
		await page.waitForSelector("body", { state: "attached" });
		
		const userAgent = await page.evaluate(() => navigator.userAgent);
		return { browser: userAgent, compatible: true }; // Simplified compatibility check
	} catch (error: unknown) {
		return { error: error instanceof Error ? error.message : String(error) };
	}
};

================
File: app/api/seo/functions/checkConsoleOutput.js
================
export async function checkConsoleOutput(page) {
	const consoleOutput = {
		errors: [],
		warnings: [],
		info: [],
		log: [],
		other: [],
		// dir: [] // Uncomment this if you have a 'dir' array in consoleOutput
	};

	function handleConsole(msg) {
		const type = msg.type();
		const text = msg.text();
		const location = msg.location();
		const messageData = { text, location };

		// Categorize 'error' messages based on text content as well
		if (text.toLowerCase().includes("error")) {
			consoleOutput.errors.push(messageData);
		} else {
			switch (type) {
				case "error":
					consoleOutput.errors.push(messageData);
					break;
				case "warning":
					consoleOutput.warnings.push(messageData);
					break;
				case "info":
					consoleOutput.info.push(messageData);
					break;
				case "log":
					consoleOutput.log.push(messageData);
					break;
				case "debug":
					consoleOutput.log.push(messageData); // or consoleOutput.info.push(messageData);
					break;
				case "dir":
				case "dirxml":
					consoleOutput.dir.push(messageData); // Assuming you've added a 'dir' array to consoleOutput
					break;
				default:
					consoleOutput.other.push(messageData);
					break;
			}
		}
	}

	function handleRequestFailed(request) {
		const messageData = {
			text: `Request failed: ${request.url()} (${request.failure().errorText})`,
			location: { url: page.url() },
		};
		consoleOutput.errors.push(messageData);
	}

	function handleResponse(response) {
		if (!response.ok()) {
			const messageData = {
				text: `Response error: ${response.url()} (status: ${response.status()})`,
				location: { url: page.url() },
			};
			consoleOutput.errors.push(messageData);
		}
	}

	page.on("console", handleConsole);
	page.on("requestfailed", handleRequestFailed);
	page.on("response", handleResponse);

	try {
		await page.waitForTimeout(1000); // Reduced timeout to 1 second
	} catch (error) {
		console.error("Error checking console output:", error);
	} finally {
		page.off("console", handleConsole);
		page.off("requestfailed", handleRequestFailed);
		page.off("response", handleResponse);
	}

	return consoleOutput;
}

================
File: app/api/seo/functions/checkCookiePolicy.ts
================
import { Page } from "@playwright/test";

export async function checkCookiePolicy(page: Page) {
	await page.waitForTimeout(500);
	await page.waitForSelector("body");
	await page.waitForLoadState("load");

	const bodyText = await page.textContent("body");
	const links = await page.$$eval("a", (anchors: any[]) =>
		anchors.map((anchor: any) => ({
			href: anchor.href,
			text: anchor.textContent,
		}))
	);
	const hasCookiePolicyText = /cookie policy|privacy policy/i.test(bodyText || '');
	const hasCookiePolicyLink = links.some((link) => /cookie policy|privacy policy/i.test(link.text || ''));
	return {
		hasCookiePolicy: hasCookiePolicyText || hasCookiePolicyLink,
	};
}

================
File: app/api/seo/functions/checkCustom404.ts
================
export const checkCustom404 = async (domain: string): Promise<Record<string, any>> => {
	// Ensure the domain includes a protocol
	const baseDomain = domain.startsWith("http") ? domain : `https://${domain}`;

	const nonExistentPageUrl = new URL("/non-existent-page", baseDomain);
	try {
		const response = await fetch(nonExistentPageUrl.toString());
		const text = await response.text();
		if (response.status === 404) {
			const isDefault404 = text.includes("404 Not Found") && text.includes("nginx"); // Adjust this line to match the default 404 page of the server
			return {
				hasCustom404: !isDefault404,
				statusCode: response.status,
			};
		}
		return {
			hasCustom404: false,
			statusCode: response.status,
		};
	} catch (error) {
		return {
			hasCustom404: false,
			statusCode: null,
			error: (error as Error).message,
		};
	}
};

================
File: app/api/seo/functions/checkDeprecatedHtmlTags.ts
================
// functions/checkDeprecatedHtmlTags.ts
export async function checkDeprecatedHtmlTags(htmlContent: string) {
	const deprecatedTags = ["applet", "basefont", "bgsound", "big", "blink", "center", "dir", "font", "frame", "frameset", "isindex", "marquee", "menu", "nobr", "noembed", "noframes", "plaintext", "rb", "rtc", "spacer", "strike", "tt"];
	const foundTags = deprecatedTags.filter((tag) => new RegExp(`<${tag}>`, "i").test(htmlContent));
	return {
		deprecatedTags: foundTags,
	};
}

================
File: app/api/seo/functions/checkDNS.ts
================
import dns from "dns";

export const checkDNSInfo = async (domainWithProtocol: string): Promise<Record<string, any>> => {
	// Remove the protocol (e.g., "https://") if it's present
	const domain = domainWithProtocol.replace(/^(https?:\/\/)?/, "");

	const dnsInfo: Record<string, any> = {
		domain,
	};

	try {
		const resolutions = await Promise.allSettled([
			resolveAsync(dns.promises.resolve4, domain),
			resolveAsync(dns.promises.resolve6, domain),
			resolveAsync(dns.promises.resolveCname, domain),
			resolveAsync(dns.promises.resolveMx, domain),
			resolveAsync(dns.promises.resolveTxt, domain),
			resolveAsync(dns.promises.resolveNs, domain), // Nameservers (NS) record
			resolveAsync(dns.promises.resolveSoa, domain), // Start of Authority (SOA) record
			resolveAsync(dns.promises.resolveSrv, domain), // Service (SRV) record
			resolveAsync(dns.promises.resolvePtr, domain), // Pointer (PTR)
			resolveAsync(dns.promises.resolveCaa, domain), // CAA records
			resolveAsync(dns.promises.resolveNaptr, domain), // NAPTR records
		]);

		resolutions.forEach((result, index) => {
			if (result.status === "fulfilled") {
				dnsInfo[resolutionKeys[index]] = result.value;
			} else if (result.reason.code === "ENODATA") {
				// Handle "ENODATA" error by setting the result to an empty array or null
				dnsInfo[resolutionKeys[index]] = [];
			} else {
				// Handle other DNS resolution errors
				dnsInfo[resolutionKeys[index]] = null; // You can set it to null or handle it differently
			}
		});

		return dnsInfo;
	} catch (error) {
		// Handle top-level errors here
		console.error("DNS resolution error:", error);
		throw error; // You can choose to rethrow the error or handle it differently
	}
};

const resolutionKeys = [
	"aRecords",
	"aaaaRecords",
	"cnameRecords",
	"mxRecords",
	"txtRecords",
	"nsRecords", // Nameservers
	"soaRecord", // Start of Authority
	"srvRecords", // Service (SRV)
	"ptrRecords", // Pointer (PTR)
	"caaRecords", // CAA records
	"naptrRecords", // NAPTR records
];

async function resolveAsync(resolver: (domain: string) => Promise<any>, domain: string) {
	try {
		return await resolver(domain);
	} catch (error) {
		throw error; // Propagate the error for handling in the catch block
	}
}

================
File: app/api/seo/functions/checkforXMLSitemap.ts
================
export const checkForXMLSitemap = async (domain: string): Promise<Record<string, any>> => {
	const commonSitemapPaths = ["/sitemap.xml", "/sitemap_index.xml"];
	const result = {
		hasSitemap: false,
		sitemapUrl: "",
		sitemapLocationsChecked: commonSitemapPaths.slice(),
	};

	// Ensure the domain includes a protocol
	const baseDomain = domain.startsWith("http") ? domain : `https://${domain}`;

	// Fetch sitemaps in parallel
	const fetchPromises = commonSitemapPaths.map(async (path) => {
		const sitemapUrl = new URL(path, baseDomain).toString();
		try {
			const response = await fetch(sitemapUrl);

			if (response.ok) {
				const sitemapText = await response.text();
				const urls = parseSitemap(sitemapText);

				return {
					sitemapUrl,
					sitemapData: {
						urls: Array.isArray(urls) ? urls : [],
						totalUrls: Array.isArray(urls) ? urls.length : 0,
					},
				};
			}
		} catch (error) {
			// Handle error (e.g., network issue)
		}

		return null;
	});

	// Await all fetch results
	const fetchResults = await Promise.all(fetchPromises);

	// Find the first valid sitemap
	const validSitemap = fetchResults.find((result) => result !== null);

	if (validSitemap) {
		result.hasSitemap = true;
		result.sitemapUrl = validSitemap.sitemapUrl;
		// Remove sitemapData since it's not defined in the result type
	}

	return result;
};
function parseSitemap(sitemapText: string) {
	throw new Error("Function not implemented.");
}

================
File: app/api/seo/functions/checkImageOptimization.ts
================
//@ts-nocheck
import { Page } from "@playwright/test";

// First, define an interface for the image data structure
interface ImageAnalysis {
	imageScore: number;
	src: string;
	size?: number;
	width?: number;
	height?: number;
	aspectRatio?: string;
	loadTime?: number;
	format?: string;
	alt?: string;
	lazyLoaded?: boolean;
	responsiveImage?: boolean;
	issues?: string[];
}

export const checkImageOptimization = async (page: Page) => {
	await page.waitForTimeout(500);
	await page.waitForSelector("body");
	await page.waitForLoadState("load");

	try {
		const runEvaluation = async () => {
			try {
				const images: ImageAnalysis[] = []; // Properly typed array
				const imageElements = document.querySelectorAll("img");

				Array.from(imageElements).forEach((img) => {
					let imageScore = 100;
					const aspectRatioDecimal = img.naturalWidth / img.naturalHeight;
					const gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));

					// Create image analysis object
					const imageAnalysis: ImageAnalysis = {
						imageScore: imageScore,
						src: img.src,
						width: img.naturalWidth,
						height: img.naturalHeight,
						aspectRatio: `${img.naturalWidth / gcd(img.naturalWidth, img.naturalHeight)}:${img.naturalHeight / gcd(img.naturalWidth, img.naturalHeight)}`,
						alt: img.alt,
						lazyLoaded: img.loading === "lazy",
						responsiveImage: img.srcset !== "",
						issues: [],
					};

					// ... rest of your image analysis logic ...

					images.push(imageAnalysis);
				});

				const totalImageScore = images.reduce((acc, img) => acc + img.imageScore, 0);
				const overallWebsiteScore = Math.round((totalImageScore / (images.length * 100)) * 100);

				return {
					images,
					totalImages: images.length,
					overallWebsiteScore,
				};
			} catch (error) {
				return {
					images: [],
					totalImages: 0,
					overallWebsiteScore: 0,
					error: error instanceof Error ? error.message : "Unknown error occurred",
				};
			}
		};

		const result = await runEvaluation();

		return result;
	} catch (error: unknown) {
		console.error("Error in checkImageOptimization:", error);
		return {
			images: [],
			totalImages: 0,
			overallWebsiteScore: 0,
			error: error instanceof Error ? error.message : "Unknown error occurred",
		};
	}
};

================
File: app/api/seo/functions/checkLighthouse.ts
================
export async function checkLighthouse(url: string) {
  console.log("Checking Lighthouse for:", url);
  const apiKey = process.env.GOOGLE_API_KEY;
  const apiUrl = 'https://www.googleapis.com/pagespeedonline/v5/runPagespeed';

  const params = {
    url: url,
    key: apiKey ?? '',
  };

  try {
    const response = await fetch(`${apiUrl}?${new URLSearchParams(params)}`, {
      next: { revalidate: 60 }, // Revalidate every 60 seconds
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('PageSpeed API Error:', errorData);
      throw new Error(`Failed to fetch Lighthouse data: ${response.statusText}`);
    }

    const data = await response.json();
    console.log("Lighthouse Data:", data);

    return data;
  } catch (error) {
    console.error('Error fetching Lighthouse data:', error);
    throw error;
  }
}

================
File: app/api/seo/functions/checkLinks.ts
================
import { Page } from "@playwright/test";

export const checkLinks = async (
	page: Page
): Promise<{
	externalLinks: {
		count: number;
		details: { href: string; text: string }[];
	};
	internalLinks: {
		count: number;
		details: { href: string; text: string }[];
	};
}> => {
	await page.waitForTimeout(500);
	await page.waitForSelector("body");
	await page.waitForLoadState("load");

	const url = page.url();
	const domain = new URL(url).hostname;

	// Run the link gathering in a single execution context
	const { externalLinks, internalLinks } = await page.evaluate((domain) => {
		const externalLinks: { href: string; text: string }[] = [];
		const internalLinks: { href: string; text: string }[] = [];
		const links = Array.from(document.querySelectorAll("a")).map((a) => ({
			href: a.getAttribute("href") || "",
			text: a.textContent || "",
		}));

		for (const link of links) {
			if (!link.href.startsWith("/") && !link.href.startsWith(domain)) {
				externalLinks.push(link);
			} else {
				internalLinks.push(link);
			}
		}

		return { externalLinks, internalLinks };
	}, domain);

	return {
		externalLinks: {
			count: externalLinks.length,
			details: externalLinks,
		},
		internalLinks: {
			count: internalLinks.length,
			details: internalLinks,
		},
	};
};

================
File: app/api/seo/functions/checkMetadata.ts
================
import { Page } from "@playwright/test";

export const checkMetadata = async (page: Page): Promise<Record<string, any>> => {
	await page.waitForTimeout(500);
	await page.waitForSelector("body");
	await page.waitForLoadState("load");

	// Initialize metadata with default values
	const metadata: Record<string, any> = {
		title: { value: null, exists: false, characterCount: 0 },
		description: { value: null, exists: false, characterCount: 0 },
		ogTitle: { value: null, exists: false, characterCount: 0 },
		ogDescription: { value: null, exists: false, characterCount: 0 },
		twitterTitle: { value: null, exists: false, characterCount: 0 },
		twitterDescription: { value: null, exists: false, characterCount: 0 },
		fbTitle: { value: null, exists: false, characterCount: 0 },
		fbDescription: { value: null, exists: false, characterCount: 0 },
		author: { value: null, exists: false, characterCount: 0 },
		keywords: { value: null, exists: false, characterCount: 0 },
		canonicalURL: { value: null, exists: false, characterCount: 0 },
		publishedDate: { value: null, exists: false, characterCount: 0 },
		language: { value: null, exists: false },
		viewport: { value: null },
		userAgent: { value: null },
		wordCount: 0,
		urlLength: 0,
		favicon: null,
		googleVerification: null,
		schemaData: {},
		ampLink: null,
	};

	try {
		// Extract metadata from the page
		const title = await page.title();
		if (title) {
			metadata.title.value = title;
			metadata.title.exists = true;
			metadata.title.characterCount = title.length;
		}

		try {
			const description = await page.$eval('meta[name="description"]', (meta) => meta?.getAttribute("content"));
			if (description) {
				metadata.description.value = description;
				metadata.description.exists = true;
				metadata.description.characterCount = description.length;
			}
		} catch (error) {
			// Handle the case where the description meta tag doesn't exist
		}

		// Continue adding checks for other metadata fields...

		// Get the page's language
		const language = await page.$eval("html", (html) => html?.getAttribute("lang"));
		if (language) {
			metadata.language.value = language;
			metadata.language.exists = true;
		}

		// Get viewport size
		metadata.viewport.value = await page.viewportSize();

		// Get user agent
		metadata.userAgent.value = await page.evaluate(() => window.navigator.userAgent);

		// Calculate word count
		const pageContent = await page.textContent("body");
		if (pageContent) {
			metadata.wordCount = pageContent.split(/\s+/).length;
		}

		// Calculate URL length
		metadata.urlLength = page.url().length;

		// Get favicon URL
		const faviconElement = await page.$('link[rel="icon"]');
		if (faviconElement) {
			metadata.favicon = await faviconElement.getAttribute("href");
		}

		// Add checks and data retrieval for "googleVerification," and "ampLink" here ...

		// Extract schema data using Playwright
		const schemaMarkup = await page.$$eval('script[type="application/ld+json"]', (scripts) => {
			return scripts
				.map((script) => {
					try {
						return JSON.parse(script.textContent || "");
					} catch (error) {
						return null;
					}
				})
				.filter((data) => data !== null);
		});

		schemaMarkup.forEach((data) => {
			if (data["@type"]) {
				const type = data["@type"];
				metadata.schemaData[type] = metadata.schemaData[type] || [];
				metadata.schemaData[type].push(data);
			}
		});

		return metadata; // Return the entire metadata object
	} catch (error) {
		throw error;
	}
};

================
File: app/api/seo/functions/checkRedirects.ts
================
export const checkRedirects = async (domain: string): Promise<any> => {
	try {
		const url = domain.startsWith("http") ? domain : `https://${domain}`;
		const parsedUrl = new URL(url); // This will throw if URL is invalid

		const response = await fetch(parsedUrl.href, { redirect: "manual" });
		const isRedirected = response.type === "opaqueredirect";

		return { isRedirected };
	} catch (error: unknown) {
		if (error instanceof Error) {
			console.error(`Error checking redirects for ${domain}:`, error);
			return { error: error.message };
		}
		console.error(`Unknown error checking redirects for ${domain}:`, error);
		return { error: 'An unknown error occurred' };
	}
};

================
File: app/api/seo/functions/checkRobotsTxt.ts
================
export const checkRobotsTxt = async (domain: string): Promise<Record<string, any>> => {
	const result = {
		hasRobotsTxt: false,
		robotsTxtUrl: "",
		directives: [] as { directive: string; value: string }[],
	};

	// Ensure the domain includes a protocol
	const baseDomain = domain.startsWith("http") ? domain : `https://${domain}`;

	const robotsTxtUrl = new URL("/robots.txt", baseDomain);
	result.robotsTxtUrl = robotsTxtUrl.toString();

	try {
		const response = await fetch(robotsTxtUrl.toString());
		if (response.ok) {
			result.hasRobotsTxt = true;
			const robotsTxt = await response.text();
			const directives = robotsTxt
				.split("\n")
				.map((line) => line.trim())
				.filter((line) => line);
			directives.forEach((directiveLine) => {
				const [directive, ...valueParts] = directiveLine.split(":");
				const value = valueParts.join(":").trim();
				result.directives.push({ directive: directive.trim(), value });
			});
		}
	} catch (error) {
		// Handle error (e.g., network issue)
	}

	return result;
};

================
File: app/api/seo/functions/checkSSLCertificate.ts
================
import { request } from "https";

export const checkSSLCertificate = async (domain: string): Promise<Record<string, any>> => {
	return new Promise(async (resolve, reject) => {
		const options = {
			host: domain,
			port: 443,
			method: "GET",
			agent: false,
			rejectUnauthorized: false, // Ignore certificate validation errors
		};

		const req = request(options, (res) => {
			res.on("data", () => {
				// Do nothing with the response body, just need to trigger the 'end' event
			});
			res.on("end", () => {
				const socket = res.socket as any; // Type assertion to handle missing getPeerCertificate
				const certificate = socket.getPeerCertificate();
				if (certificate) {
					const certificateInfo = {
						https: true, // Indicates that the website uses HTTPS
						validFrom: certificate.valid_from,
						validTo: certificate.valid_to,
						keySize: certificate.bits,
					};
					resolve(certificateInfo);
				} else {
					reject(new Error("Unable to retrieve certificate"));
				}
			});
		});

		req.on("error", (e) => {
			reject(e);
		});

		req.end();
	});
};

================
File: app/api/seo/functions/extractHeadingsWithText.ts
================
export const extractHeadingsWithText = async (content: string): Promise<Record<string, { text: string[]; count: number; charCount: number }>> => {
	return new Promise((resolve) => {
		const headingLevels = ["h1", "h2", "h3", "h4", "h5", "h6"];
		const headingsWithText: Record<string, { text: string[]; count: number; charCount: number }> = {};

		for (const level of headingLevels) {
			const regex = new RegExp(`<${level}[^>]*>(.*?)<\/${level}>`, "gis");
			const headings = [...content.matchAll(regex)].map((match) => match[1]);

			const charCount = headings.reduce((acc, heading) => acc + heading.length, 0);
			headingsWithText[level] = {
				text: headings,
				count: headings.length,
				charCount,
			};
		}

		resolve(headingsWithText);
	});
};

================
File: app/api/seo/functions/keywordAnalysis.ts
================
import { convert } from "html-to-text";

export const keywordAnalysis = async (content: string) => {
	// Remove HTML tags and undesired strings
	const cleanedContent = convert(content);

	// Tokenize the text content by splitting on whitespace and/or punctuation
	const words = cleanedContent.split(/\W+/).filter((word) => word.length > 0);

	// Create an object to hold the frequency of each word
	let frequency: Record<string, number> = {};

	// Iterate over the words, updating the frequency count
	for (let word of words) {
		word = word.toLowerCase(); // Convert word to lowercase
		if (!frequency[word]) {
			frequency[word] = 0;
		}
		frequency[word]++;
	}

	// Convert the frequency object to an array of [keyword, frequency] tuples,
	// sort them in descending order of frequency.
	const sortedKeywords = Object.entries(frequency).sort(([, a], [, b]) => b - a);

	return sortedKeywords;
};

================
File: app/api/seo/functions/seoScore.ts
================
import { checkSSLCertificate } from "./checkSSLCertificate";
import { checkCustom404 } from "./checkCustom404";
import { checkMetadata } from "./checkMetadata";
import { keywordAnalysis } from "./keywordAnalysis";
import { Page } from "@playwright/test";

export const onPageSEOScore = async (domain: string, content: string, page: Page) => {
	await page.waitForTimeout(500);
	await page.waitForSelector("body");
	await page.waitForLoadState("load");

	// Initialize score object
	const score = {
		keywordDensity: 0,
		mobileFriendly: 0,
		pageSpeed: 0,
		secureConnection: 0,
		metaTitleDescription: 0,
		custom404: 0,
		totalScore: 0,
	};

	// Get keyword analysis result
	const keywordAnalysisResult = await keywordAnalysis(content);

	// Check if result exists and is an array before proceeding
	if (Array.isArray(keywordAnalysisResult)) {
		const totalWordCount = keywordAnalysisResult.reduce((sum, item) => sum + item[1], 0);
		score.keywordDensity = (totalWordCount > 0 ? keywordAnalysisResult[0][1] / totalWordCount : 0) * 100;
	}

	// Secure Connection Score (10 if HTTPS, 0 otherwise)
	const sslCertificateResult = await checkSSLCertificate(domain);
	score.secureConnection = sslCertificateResult.https ? 10 : 0;

	// Meta Title and Description Score (5 points for title, 5 points for description, assuming they should exist)
	const metadataResult = await checkMetadata(page);
	score.metaTitleDescription = (metadataResult.title.exists ? 5 : 0) + (metadataResult.description.exists ? 5 : 0);

	// Custom 404 Score (10 if custom 404 exists, 0 otherwise)
	const custom404Result = await checkCustom404(domain);
	score.custom404 = custom404Result.hasCustom404 ? 10 : 0;

	// Calculate total score as the sum of individual scores, scaled to a 0 to 100 range
	score.totalScore = ((score.keywordDensity + score.mobileFriendly + score.pageSpeed + score.secureConnection + score.metaTitleDescription + score.custom404) / 60) * 100;

	return { score };
};

================
File: app/api/seo/functions/softwareDetection.ts
================
export const softwareDetection = async (content: string, headers: any[]) => {
	try {
		// Define checks for different frameworks
		const frameworkChecks = [
			{
				name: "React",
				checks: [
					{
						name: "React.createElement Pattern",
						pattern: /React.createElement/,
					},
					{
						name: "ReactDOM.render Pattern",
						pattern: /ReactDOM\.render/,
					},
					{
						name: "React.createClass Pattern",
						pattern: /React.createClass/,
					},
					{
						name: "React.Component Pattern",
						pattern: /React\.Component/,
					},
					{
						name: "React.useState Pattern",
						pattern: /React\.useState/,
					},
				],
			},
			{
				name: "Vue.js",
				checks: [
					// Check for specific Vue.js script tags
					{
						name: "Vue.js Script Tag 1",
						pattern: /<script[^>]*src[^>]*vue(\.min)?\.js[^>]*><\/script>/i,
					},
					{
						name: "Vue.js Script Tag 2",
						pattern: /<script[^>]*vue[^>]*><\/script>/i,
					},
					// Check for specific Vue.js attributes
					{
						name: "Vue.js Attribute 1",
						pattern: /<[^>]+\bvue-/i,
					},
					{
						name: "Vue.js Attribute 2",
						pattern: /<[^>]+\b:v-/i,
					},
					// Check for specific Vue.js custom elements
					{
						name: "Vue.js Custom Element",
						pattern: /<[^>]+\bv-(?!model|bind)[^>]*>/i,
					},
					// Check for X-Powered-By header containing "vue"
					{
						name: "X-Powered-By Header",
						pattern: /vue/i,
						header: "x-powered-by",
					},
				],
			},
			{
				name: "Angular",
				checks: [
					// Check for Angular's main module bootstrap
					{
						name: "Angular Bootstrap Module",
						pattern: /platformBrowserDynamic\(\).bootstrapModule/,
					},
					// Check for AngularJS (Angular 1.x) ng-app attribute
					{
						name: "AngularJS ng-app Attribute",
						pattern: /ng-app/,
					},
					// Check for Angular CLI configuration file
					{
						name: "Angular CLI Config",
						pattern: /angular\.json/,
					},
					// Check for Angular X-Powered-By header
					{
						name: "Angular X-Powered-By Header",
						pattern: /angular/i,
						header: "x-powered-by",
					},
				],
			},
			{
				name: "Next.js",
				checks: [
					{
						name: "X-Powered-By Header",
						pattern: /next\.js/i,
						header: "x-powered-by",
					},
					{
						name: "Script Tag Pattern",
						pattern: /<script[^>]+data-reactroot[^>]+__NEXT_DATA__/,
					},
					{
						name: "Meta Tag Pattern",
						pattern: /<meta name="next-head-count" content="(\d+)" \/>/,
					},
					{
						name: "Next.js Page CSS Pattern",
						pattern: /<link rel="stylesheet"[^>]*href="\/_next\/static\/css\//,
					},
					{
						name: "Next.js Image Component Pattern",
						pattern: /<img[^>]+srcset="[^"]+\/_next\/image\?url=/,
					},
					{
						name: "Next.js Script Loader Pattern",
						pattern: /<script[^>]+src="\/_next\/static\/chunks\//,
					},
					{
						name: "Next.js JSON Data Pattern",
						pattern: /<script[^>]+id="__NEXT_DATA__"[^>]+type="application\/json"/,
					},
				],
			},
			{
				name: "Tailwind CSS",
				checks: [
					// Check for Tailwind CSS classes
					{
						name: "Tailwind CSS Class",
						pattern: /class=["'][^"']*bg-/,
					},
					// Check for Tailwind CSS inline styles
					{
						name: "Tailwind CSS Inline Style",
						pattern: /style=["'][^"']*bg-/,
					},
					// Check for Tailwind CSS stylesheet link
					{
						name: "Tailwind CSS Stylesheet Link",
						pattern: /<link[^>]+href=["'][^"']*\/_next\/static\/[^"']*\/css\/[^"']*\.css["'][^>]*\/>/,
					},
					// Check for Tailwind CSS config file
					{
						name: "Tailwind CSS Config File",
						pattern: /tailwind\.(config|config\..+)\.js/,
					},
				],
			},
			{
				name: "Nuxt.js",
				checks: [
					// Check for Nuxt.js script tag
					{
						name: "Nuxt.js Script Tag",
						pattern: /<script[^>]+src=["'][^"']*\/_nuxt\//,
					},
					// Check for Nuxt.js meta tag
					{
						name: "Nuxt.js Meta Tag",
						pattern: /<meta[^>]+name=["']nuxt["'][^>]+content=["'][^"']*nuxt/,
					},
					// Check for Nuxt.js data-n-head attribute
					{
						name: "Nuxt.js data-n-head Attribute",
						pattern: /data-n-head="true"/,
					},
					// Check for Nuxt.js asyncData method
					{
						name: "Nuxt.js asyncData Method",
						pattern: /asyncData\s*\(/,
					},
					// Check for Nuxt.js fetch method
					{
						name: "Nuxt.js fetch Method",
						pattern: /fetch\s*\(/,
					},
				],
			},
			{
				name: "Ruby on Rails",
				checks: [
					// Check for Ruby on Rails CSRF meta tag
					{
						name: "Rails CSRF Meta Tag",
						pattern: /<meta[^>]+name=["']csrf-param["'][^>]+content=["']authenticity_token["'][^>]*>/,
					},
					// Check for Ruby on Rails CSRF token input field
					{
						name: "Rails CSRF Token Input",
						pattern: /<input[^>]+type=["']hidden["'][^>]+name=["']csrfmiddlewaretoken["'][^>]+value=["']/,
					},
					// Check for Rails JavaScript include tag
					{
						name: "Rails JavaScript Include",
						pattern: /<%= javascript_include_tag/,
					},
					// Check for Rails stylesheet include tag
					{
						name: "Rails Stylesheet Include",
						pattern: /<%= stylesheet_link_tag/,
					},
					// Check for Rails image tag
					{
						name: "Rails Image Tag",
						pattern: /<%= image_tag/,
					},
				],
			},
			{
				name: "Django",
				checks: [
					// Check for Django CSRF input field
					{
						name: "Django CSRF Input",
						pattern: /<input[^>]+type=["']hidden["'][^>]+name=["']csrfmiddlewaretoken["'][^>]+value=["']/,
					},
					// Check for Django template tag
					{
						name: "Django Template Tag",
						pattern: /{% csrf_token %}/,
					},
					// Check for Django admin login form
					{
						name: "Django Admin Login Form",
						pattern: /<form[^>]+id=["']login-form["'][^>]+action=["']\/admin\/login\/["'][^>]*>/,
					},
					// Check for Django admin CSS class
					{
						name: "Django Admin CSS Class",
						pattern: /class=["']djinn-theme["']/,
					},
					// Check for Django admin JavaScript include
					{
						name: "Django Admin JavaScript",
						pattern: /<script[^>]+src=["']\/static\/admin\/js\/vendor\/[^"']*["'][^>]*>/,
					},
				],
			},
			{
				name: "Laravel",
				checks: [
					// Check for Laravel asset versioning
					{
						name: "Laravel Asset Versioning",
						pattern: /<script[^>]+src=["']\/js\/app.js\?id=[^"']*["'][^>]*>/,
					},
					// Check for Laravel Blade directive
					{
						name: "Laravel Blade Directive",
						pattern: /@csrf/,
					},
					// Check for Laravel API token meta tag
					{
						name: "Laravel API Token Meta Tag",
						pattern: /<meta name=["']api-token["'] content=["'][^"']*["']>/,
					},
				],
			},
			{
				name: "Bootstrap",
				checks: [
					// Check for Bootstrap CSS class
					{
						name: "Bootstrap CSS Class",
						pattern: /class=["'][^"']*\.navbar/,
					},
					// Check for Bootstrap JavaScript include
					{
						name: "Bootstrap JavaScript Include",
						pattern: /<script[^>]+src=["'][^"']*bootstrap(\.min)?\.js["'][^>]*>/i,
					},
					// Add more Bootstrap checks as needed
				],
			},
			{
				name: "Flask",
				checks: [
					// Check for Flask response header
					{
						name: "Flask Response Header",
						header: "server",
						pattern: /Flask/i,
					},
					// Check for Flask template tag
					{
						name: "Flask Template Tag",
						pattern: /{% for.*in.*%}/,
					},
					// Add more Flask checks as needed
				],
			},
			// 12. Express.js
			{
				name: "Express.js",
				checks: [
					// Check for Express.js response header
					{
						name: "Express.js Response Header",
						header: "x-powered-by",
						pattern: /Express/i,
					},
					// Check for Express.js middleware usage
					{
						name: "Express.js Middleware",
						pattern: /app\.use\(/,
					},
					// Add more Express.js checks as needed
				],
			},
			// 13. Ember.js
			{
				name: "Ember.js",
				checks: [
					// Check for Ember.js script tag
					{
						name: "Ember.js Script Tag",
						pattern: /<script[^>]+src=["'][^"']*ember(\.min)?\.js["'][^>]*>/i,
					},
					// Check for Ember.js application instance
					{
						name: "Ember.js Application Instance",
						pattern: /new\s+Ember\.Application/,
					},
					// Add more Ember.js checks as needed
				],
			},
			// 14. Symfony
			{
				name: "Symfony",
				checks: [
					// Check for Symfony response header
					{
						name: "Symfony Response Header",
						header: "x-powered-by",
						pattern: /Symfony/i,
					},
					// Check for Symfony routing annotation
					{
						name: "Symfony Routing Annotation",
						pattern: /@Route/,
					},
					// Add more Symfony checks as needed
				],
			},
			// 15. Meteor
			{
				name: "Meteor",
				checks: [
					// Check for Meteor script tag
					{
						name: "Meteor Script Tag",
						pattern: /<script[^>]+src=["'][^"']*meteor(\.min)?\.js["'][^>]*>/i,
					},
					// Check for Meteor.connection object
					{
						name: "Meteor Connection Object",
						pattern: /Meteor\.connection\s*=\s*DDP\.connect/,
					},
					// Add more Meteor checks as needed
				],
			},
			// Add more checks for other frameworks as needed
		];
		const detectedSoftwareResults: Record<string, boolean | string> = {};

		if (Object.keys(detectedSoftwareResults).length === 0) {
			detectedSoftwareResults.noneDetected = "No recognizable software frameworks or libraries were detected based on the predefined checks. This may be due to a custom or less common framework, minified/obfuscated code, or the absence of certain identifiable patterns associated with the frameworks being checked.";
		}

		// Iterate through framework checks
		for (const check of frameworkChecks) {
			if (check.checks) {
				// If it's a framework with multiple checks
				for (const subCheck of check.checks) {
					if (subCheck.header) {
						if (Array.isArray(headers)) {
							const poweredByHeader = headers.find(([key]) => key.toLowerCase() === subCheck.header)?.[1];
							if (poweredByHeader && poweredByHeader.match(subCheck.pattern)) {
								detectedSoftwareResults[check.name.toLowerCase()] = true;
								break; // Exit loop once detected
							}
						}
					} else if (subCheck.pattern.test(content)) {
						detectedSoftwareResults[check.name.toLowerCase()] = true;
						break; // Exit loop once detected
					}
				}
			}
		}

		return { detectedSoftwareResults };
	} catch (error: unknown) {
		if (error instanceof Error) {
			return { error: error.message };
		}
		return { error: String(error) };
	}
};

================
File: app/api/seo/route.ts
================
// import { takeScreenshot } from "./functions/takeScreenshot";

import * as zlib from "zlib";
import { chromium, Browser, type Page, request } from '@playwright/test';
import { extractHeadingsWithText } from "./functions/extractHeadingsWithText";
import { checkLinks } from "./functions/checkLinks";
import { checkBrokenLinks } from "./functions/checkBrokenLinks";
import { checkForXMLSitemap } from "./functions/checkforXMLSitemap";
import { checkRobotsTxt } from "./functions/checkRobotsTxt";
import { checkSSLCertificate } from "./functions/checkSSLCertificate";
import { checkCustom404 } from "./functions/checkCustom404";
import { checkRedirects } from "./functions/checkRedirects";
import { checkDNSInfo } from "./functions/checkDNS";
import { checkMetadata } from "./functions/checkMetadata";
import { checkCookiePolicy } from "./functions/checkCookiePolicy";
import { checkConsoleOutput } from "./functions/checkConsoleOutput";
import { checkDeprecatedHtmlTags } from "./functions/checkDeprecatedHtmlTags";
import { keywordAnalysis } from "./functions/keywordAnalysis";
import { checkBrowserCompatibility } from "./functions/checkBrowserCompatability";
import { checkLighthouse } from "./functions/checkLighthouse";

let completedTasks = 0;
const totalTasks = 26;
let browser: Browser;
let page: Page;

export async function GET(request: Request) {
	try {
		completedTasks = 0;
		const startTime = performance.now();
		const { searchParams } = new URL(request.url ?? "");
		let targetUrl = searchParams.get("url");

		if (!targetUrl) {
			return new Response("URL parameter is required", { status: 400 });
		}

		targetUrl = targetUrl.startsWith("http") ? targetUrl : `https://${targetUrl}`;
		const dataObject = await fetchPageData(targetUrl);

		const endTime = performance.now();
		const executionTime = endTime - startTime;
		console.log(`API Execution Time: ${executionTime}ms`);

		const compressedData = await compressResponse(JSON.stringify(dataObject));

		return new Response(compressedData, {
			status: 200,
			headers: {
				"Content-Type": "application/json",
				"Content-Encoding": "gzip",
			},
		});
	} catch (error) {
		console.error(error);
		return new Response("Internal server error", { status: 500 });
	} finally {
		if (browser) {
			await browser.close();
		}
	}
}
const fetchPageData = async (link: string): Promise<Record<string, unknown>> => {
	const result: Record<string, unknown> = {};
	const unsortedResult: Record<string, unknown> = {};

	try {
		browser = await chromium.launch();
		page = await browser.newPage();
		await page.goto(link);

		const domain = new URL(link).hostname;
		const content = await page.content();

		const promises = [
			timeFunction("brokenLinks", () => checkBrokenLinks(page).catch((e) => ({ error: e.toString() }))),
			//timeFunction("checkAccessibility", () => checkAccessibility(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkBrowserCompatibility", () => checkBrowserCompatibility(page).catch((e) => ({ error: e.toString() }))),
			//timeFunction("checkCache", () => checkCache(request.headers).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkConsoleOutput", () => checkConsoleOutput(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkCookiePolicy", () => checkCookiePolicy(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkCustom404", () => checkCustom404(domain).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkDNS", () => checkDNSInfo(domain).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkDeprecatedHtmlTags", () => checkDeprecatedHtmlTags(content).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkHeadings", () => extractHeadingsWithText(content).catch((e) => ({ error: e.toString() }))),
			//timeFunction("checkImageOptimization", () => checkImageOptimization(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkMetadata", () => checkMetadata(page).catch((e) => ({ error: e.toString() }))),
			//timeFunction("checkMobileFriendly", () => checkMobileFriendly(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkRedirects", () => checkRedirects(domain).catch((e) => ({ error: e.toString() }))),
			//timeFunction("checkResponsiveness", () => checkResponsiveness(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkRobotTxt", () => checkRobotsTxt(domain).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkSSL", () => checkSSLCertificate(domain).catch((e) => ({ error: e.toString() }))),
			timeFunction("checkSitemap", () => checkForXMLSitemap(domain).catch((e) => ({ error: e.toString() }))),
			timeFunction("getAllLinks", () => checkLinks(page).catch((e) => ({ error: e.toString() }))),
			timeFunction("keywordAnalysis", () => keywordAnalysis(content).catch((e) => ({ error: e.toString() }))),
			//timeFunction("pageSpeed", () => pageSpeedScore(page).catch((e) => ({ error: e.toString() }))),
			//timeFunction("softwareDetection", () => softwareDetection(content, request.headers).catch((e) => ({ error: e.toString() }))),
			timeFunction("lighthouseCheck", () => checkLighthouse(link).catch((e) => ({ error: e.toString() }))),
			//timeFunction("takeScreenshot", () => takeScreenshot(domain, browser, chromium).catch((e) => ({ error: e.toString() }))),
			//timeFunction("analyzeSocialSignals", () => analyzeSocialSignals(domain).catch((e) => ({ error: e.toString() }))),
			//timeFunction("contentQualityAnalysis", () => contentQualityAnalysis(content, 2000).catch((e) => ({ error: e.toString() }))),
				//timeFunction("seoScore", () => onPageSEOScore(domain, content, page).catch((e) => ({ error: e.toString() }))),
		];

		const results = await Promise.all(promises);

		results.forEach(({ name, result }) => {
			unsortedResult[name] = result; // This should now work as expected.
		});

		result["websiteData"] = Object.fromEntries(Object.entries(unsortedResult).sort(([keyA], [keyB]) => keyA.localeCompare(keyB)));
	} catch (error) {
		console.error('Error:', error);
		return { error: error instanceof Error ? error.message : String(error) };
	} finally {
		if (browser) {
			await browser.close();
		}
	}

	return result;
};

async function compressResponse(data: string): Promise<Uint8Array> {
	return new Promise((resolve, reject) => {
		zlib.gzip(data, (err, result) => {
			if (err) {
				reject(err);
			} else {
				resolve(result);
			}
		});
	});
}

async function timeFunction<T>(name: string, func: () => Promise<T>): Promise<{ name: string; result: T; executionTime: number }> {
	console.log(`Function Name: ${name}`);
	try {
		const startTime = performance.now();
		const result = await func();
		completedTasks++;
		updateProgress();
		const endTime = performance.now();
		const executionTime = endTime - startTime;
		console.log(`${name} Execution Time: ${executionTime}ms`);
		return { name, result, executionTime };
	} catch (error) {
		console.error(`${name} Error: ${error}`);
		completedTasks++;
		updateProgress();
		return { 
			name, 
			result: { error: error instanceof Error ? error.message : String(error) } as T, 
			executionTime: 0 
		};
	}
}

function updateProgress() {
	if (completedTasks <= totalTasks) {
		const progress = (completedTasks / totalTasks) * 100;
		console.log(`Progress: ${progress.toFixed(2)}%`);
	}
}

================
File: app/api/seo/utils/utils.js
================
export const toAbsoluteUrl = (base, path) => {
	if (!base || !path) return null;
	try {
		const baseUrl = new URL(base);
		const url = new URL(path, baseUrl);
		return url.toString();
	} catch (e) {
		console.error(e);
		return null;
	}
};

export async function fetchWithErrorHandler(url, options, fallbackValue = null, timeout = 10000) {
	const controller = new AbortController();
	const id = setTimeout(() => controller.abort(), timeout);
	options = { ...options, signal: controller.signal };

	try {
		const response = await fetch(url, options);
		clearTimeout(id);
		if (!response.ok) {
			throw new Error(`Failed to fetch ${url}: ${response.status} ${response.statusText}`);
		}
		return await response.json();
	} catch (error) {
		clearTimeout(id);
		console.error(error);
		return fallbackValue;
	}
}

================
File: app/blog/components/FeaturedPost.tsx
================
"use client";

import { motion } from "framer-motion";
import Image from "next/image";
import { type Post } from "../types";

interface Props {
	post: Post;
}

export default function FeaturedPost({ post }: Props) {
	return (
		<div className="relative h-[70vh] mb-16 rounded-xl overflow-hidden">
			<motion.div style={{ height: "100%", width: "100%" }} initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
				<Image src={post.image} alt={post.title} fill className="object-cover" priority />
				<div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent">
					<div className="absolute bottom-0 p-8">
						<h1 className="text-4xl font-bold mb-4">{post.title}</h1>
						<p className="text-lg text-gray-200">{post.excerpt}</p>
					</div>
				</div>
			</motion.div>
		</div>
	);
}

================
File: app/blog/error.tsx
================
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";

export default function Error({ error, reset }: { error: Error & { digest?: string }; reset: () => void }) {
	useEffect(() => {
		console.error("Blog error:", error);
	}, [error]);

	return (
		<div className="min-h-[50vh] flex items-center justify-center">
			<div className="text-center space-y-4">
				<h2 className="text-2xl font-bold">Something went wrong!</h2>
				<Button onClick={reset} variant="outline">
					Try again
				</Button>
			</div>
		</div>
	);
}

================
File: app/blog/page.tsx
================
import { Suspense } from "react";
import { unstable_cache } from "@/lib/unstable-cache";
import FeaturedPost from "./components/FeaturedPost";
import { type Post } from "./types";
import { getBlogPosts } from "@/actions/shopify/getBlogPosts";

const getAllPosts = unstable_cache(
	async (): Promise<Post[]> => {
		try {
			const posts = await getBlogPosts(50);
			if (!posts.length) {
				console.log("No blog posts found");
				return [];
			}
			return posts;
		} catch (error) {
			console.error("Error fetching blog posts:", error);
			return [];
		}
	},
	["blog-posts"],
	{ revalidate: 60 }
);

export default async function BlogPage() {
	const posts = await getAllPosts();
	console.log(posts);

	if (!posts.length) {
		return (
			<div className="min-h-screen bg-black text-white">
				<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
					<h1 className="text-3xl font-bold">Blog</h1>
					<p className="mt-4">No posts available at the moment.</p>
				</div>
			</div>
		);
	}

	return (
		<div className="min-h-screen bg-black text-white">
			<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
				<Suspense fallback={<div>Loading featured post...</div>}>
					<FeaturedPost post={posts[0]} />
				</Suspense>

				<div className="mt-16 grid gap-8 md:grid-cols-2 lg:grid-cols-3">
					{posts.slice(1).map((post) => (
						<div key={post.id} className="rounded-lg overflow-hidden">
							<div className="aspect-video relative">
								<img src={post.image} alt={post.title} className="object-cover w-full h-full" />
							</div>
							<div className="p-6">
								<h2 className="text-xl font-bold mb-2">{post.title}</h2>
								<p className="text-gray-400">{post.excerpt}</p>
								<time className="text-sm text-gray-500 mt-2 block">{new Date(post.date).toLocaleDateString()}</time>
							</div>
						</div>
					))}
				</div>
			</div>
		</div>
	);
}

================
File: app/blog/types.ts
================
export interface Post {
	id: string;
	title: string;
	image: string;
	excerpt: string;
	date: string;
}

================
File: app/design/page.tsx
================
import PageHeader from "@/components/page-header";
import Link from "next/link";
import CodedText from "@/components/ui/coded-text";
import HeroPages from "@/components/sections/hero-pages";

export default function LocalWebDesign() {
	return (
		<>
			<PageHeader title="Design">
				<Link href="https://www.figma.com" className="text-[#f24e1e] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Figma</CodedText>
				</Link>
				<Link href="https://www.sketch.com" className="text-[#fdad00] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Sketch</CodedText>
				</Link>
				<Link href="https://www.adobe.com/products/xd.html" className="text-[#ff61f6] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Adobe XD</CodedText>
				</Link>
				<Link href="https://www.invisionapp.com" className="text-[#ff3366] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">InVision</CodedText>
				</Link>
				<Link href="https://www.framer.com" className="text-[#05f] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Framer</CodedText>
				</Link>
				<Link href="https://www.axure.com" className="text-[#008d7d] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Axure</CodedText>
				</Link>
				<Link href="https://www.flinto.com" className="text-[#00d6bf] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Flinto</CodedText>
				</Link>
				<Link href="https://www.protopie.io" className="text-[#6200ee] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">ProtoPie</CodedText>
				</Link>
			</PageHeader>

			<HeroPages />
		</>
	);
}

================
File: app/development/page.tsx
================
import PageHeader from "@/components/page-header";
import Link from "next/link";
import CodedText from "@/components/ui/coded-text";
import TextStroke from "@/components/ui/text-stroke";
import HeroPages from "@/components/sections/hero-pages";

export default function LocalWebDesign() {
	return (
		<>
			<PageHeader title="Development">
				<Link href="https://reactjs.org" className="text-[#61dafb] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">React</CodedText>
				</Link>
				<Link href="https://nodejs.org" className="text-[#339933] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Node.js</CodedText>
				</Link>
				<Link href="https://www.typescriptlang.org" className="text-[#007acc] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">TypeScript</CodedText>
				</Link>
				<Link href="https://wordpress.org" className="text-[#21759b] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">WordPress</CodedText>
				</Link>
				<Link href="https://ghost.org" className="text-[#15171A] text-5xl font-bold hover:text-yellow-400">
					<TextStroke strokeColor="white" textColor="black" strokeWidth={1} className="text-black text-5xl font-bold">
						<CodedText className="hover:underline">Ghost</CodedText>
					</TextStroke>
				</Link>
				<Link href="https://www.shopify.com" className="text-[#95BF47] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Shopify</CodedText>
				</Link>
				<Link href="https://webflow.com" className="text-[#4353FF] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Webflow</CodedText>
				</Link>
				<Link href="https://wix.com" className="text-white text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Wix</CodedText>
				</Link>
				<Link href="https://squarespace.com" className="text-[#000000] text-5xl font-bold hover:text-yellow-400">
					<TextStroke strokeColor="white" textColor="black" strokeWidth={1} className="text-black text-5xl font-bold">
						<CodedText className="hover:underline">Squarespace</CodedText>
					</TextStroke>
				</Link>
				<Link href="https://www.framer.com" className="text-[#0055FF] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Framer</CodedText>
				</Link>
				<Link href="https://tailwindcss.com" className="text-[#38b2ac] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Tailwind CSS</CodedText>
				</Link>
				<Link href="https://graphql.org" className="text-[#e10098] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">GraphQL</CodedText>
				</Link>
				<Link href="https://payloadcms.com" className="text-[#1A1A1A] text-5xl font-bold hover:text-yellow-400">
					<TextStroke strokeColor="white" textColor="black" strokeWidth={1} className="text-black text-5xl font-bold">
						<CodedText className="hover:underline">Payload</CodedText>
					</TextStroke>
				</Link>
				<Link href="https://www.docker.com" className="text-[#2496ed] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Docker</CodedText>
				</Link>
				<Link href="https://github.com" className="text-[#181717] text-5xl font-bold hover:text-yellow-400">
					<TextStroke strokeColor="white" textColor="black" strokeWidth={1} className="text-black text-5xl font-bold">
						<CodedText className="hover:underline">GitHub</CodedText>
					</TextStroke>
				</Link>
			</PageHeader>

			<HeroPages />
		</>
	);
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
      --card: 0 0% 100%;
      --card-foreground: 0 0% 3.9%;
      --popover: 0 0% 100%;
      --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
      --primary-foreground: 0 0% 98%;
      --secondary: 0 0% 96.1%;
      --secondary-foreground: 0 0% 9%;
      --muted: 0 0% 96.1%;
      --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
      --accent-foreground: 0 0% 9%;
      --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
      --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
      --chart-1: 12 76% 61%;
      --chart-2: 173 58% 39%;
      --chart-3: 197 37% 24%;
      --chart-4: 43 74% 66%;
      --chart-5: 27 87% 67%;
      --radius: 0.5rem
    }
    .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
      --card: 0 0% 3.9%;
      --card-foreground: 0 0% 98%;
      --popover: 0 0% 3.9%;
      --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
      --primary-foreground: 0 0% 9%;
      --secondary: 0 0% 14.9%;
      --secondary-foreground: 0 0% 98%;
      --muted: 0 0% 14.9%;
      --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
      --accent-foreground: 0 0% 98%;
      --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
      --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
      --chart-1: 220 70% 50%;
      --chart-2: 160 60% 45%;
      --chart-3: 30 80% 55%;
      --chart-4: 280 65% 60%;
      --chart-5: 340 75% 55%
    }
    }
@layer base {
  * {
    @apply border-border;
  }
                body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { GeistSans } from "geist/font/sans";
import { GoogleAnalytics } from "@next/third-parties/google";
import "./globals.css";
import { ThemeProvider } from "next-themes";
import dynamic from "next/dynamic";
import { Providers } from "./providers";

const Header = dynamic(() => import("@/components/header"));
const Background = dynamic(() => import("@/components/sections/background"));
const Footer = dynamic(() => import("@/components/footer"));

export const metadata: Metadata = {
	title: "Byron Wade",
	description: "Fast Web Apps",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en" suppressHydrationWarning>
			<head>
				{/* Preconnect to Shopify CDN */}
				<link rel="preconnect" href="https://cdn.shopify.com" crossOrigin="anonymous" />
			</head>
			<body className={`${GeistSans.className} antialiased`}>
				<ThemeProvider attribute="class" defaultTheme="dark" enableSystem={false}>
					<Providers>
						<Header />
						<main>
							{children}
							<Background />
						</main>
						<Footer />
					</Providers>
				</ThemeProvider>
				<GoogleAnalytics gaId="G-WE1RMQ935W" />
			</body>
		</html>
	);
}

================
File: app/local/website-design/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { Button } from "../../../components/ui/button";
import { Input } from "../../../components/ui/input";
import { Textarea } from "../../../components/ui/textarea";
import { Phone, Layout, Search, PenTool, BarChart } from "lucide-react";
import Image from "next/image";

export default function LandingPage() {
	const [isScrolled, setIsScrolled] = useState(false);

	useEffect(() => {
		const handleScroll = () => {
			setIsScrolled(window.scrollY > 50);
		};
		window.addEventListener("scroll", handleScroll);
		return () => window.removeEventListener("scroll", handleScroll);
	}, []);

	return (
		<div className="min-h-screen bg-stone-50 text-stone-800 font-sans">
			{/* Header */}
			<header className={`fixed w-full z-10 transition-all duration-300 ${isScrolled ? "bg-white shadow-md py-2" : "bg-transparent py-4"}`}>
				<div className="container mx-auto px-4 flex justify-between items-center">
					<div className="text-2xl font-serif font-bold">Byron Wade</div>
					<Button className="bg-stone-800 hover:bg-stone-700 text-white transition-colors duration-300">
						<Phone className="mr-2 h-4 w-4" />
						831-430-6011
					</Button>
				</div>
			</header>

			{/* Hero Section with Contact Form */}
			<section className="pt-32 pb-20 md:pt-40 md:pb-32 bg-gradient-to-br from-stone-100 to-stone-200">
				<div className="container mx-auto px-4 flex flex-col md:flex-row items-center">
					<div className="md:w-1/2 mb-12 md:mb-0 pr-0 md:pr-8">
						<h1 className="text-4xl md:text-5xl font-serif font-bold mb-6 leading-tight">Elevate Your Online Presence with Custom Web Design</h1>
						<p className="text-xl mb-8 text-stone-600">Hi, I&apos;m Byron Wade. I specialize in crafting bespoke websites that not only look stunning but also drive real results for your business.</p>
						<div className="md:hidden">
							<Image src="/placeholder.svg?height=300&width=300" width={300} height={300} alt="Byron Wade" className="rounded-full shadow-2xl border-4 border-white mx-auto mb-8" />
						</div>
					</div>
					<div className="md:w-1/2 bg-white p-8 rounded-lg shadow-xl">
						<h2 className="text-2xl font-serif font-bold mb-6 text-center">Start Your Free Web Design Consultation</h2>
						<form className="space-y-4">
							<Input placeholder="Your Name" className="bg-stone-50" />
							<Input type="email" placeholder="Your Email" className="bg-stone-50" />
							<Input placeholder="Your Current Website (if you have one)" className="bg-stone-50" />
							<Textarea placeholder="Tell me about your web design project" className="bg-stone-50" rows={4} />
							<Button className="w-full bg-stone-800 hover:bg-stone-700 text-white text-lg py-3 rounded-full transition-all duration-300 transform hover:scale-105">Request Your Free Consultation</Button>
						</form>
						<p className="mt-4 text-center text-stone-600 text-sm">I&apos;ll get back to you within 24 hours to discuss your web design needs.</p>
					</div>
				</div>
			</section>

			{/* Testimonial */}
			<section className="py-16 bg-white">
				<div className="container mx-auto px-4">
					<div className="max-w-3xl mx-auto text-center">
						<p className="text-2xl font-serif italic mb-4">&quot;Byron&apos;s web design approach is refreshing. He truly listens and delivers a website that exceeds expectations, perfectly capturing our brand essence.&quot;</p>
						<p className="font-semibold">- Sarah Johnson, E-commerce Entrepreneur</p>
					</div>
				</div>
			</section>

			{/* Services Section (Web Design Focused) */}
			<section className="py-20 bg-stone-100">
				<div className="container mx-auto px-4">
					<h2 className="text-3xl md:text-4xl font-serif font-bold mb-16 text-center">How I Can Elevate Your Web Presence</h2>
					<div className="space-y-24">
						{[
							{ title: "Responsive Web Design", description: "Creating stunning, mobile-friendly websites that adapt seamlessly to all devices, ensuring a consistent user experience for your audience.", icon: Layout, image: "/placeholder.svg?height=400&width=600", align: "left" },
							{ title: "SEO-Optimized Websites", description: "Building websites with search engine optimization in mind, improving your visibility and attracting more potential customers to your site.", icon: Search, image: "/placeholder.svg?height=400&width=600", align: "right" },
							{ title: "Custom UI/UX Design", description: "Crafting intuitive user interfaces and experiences that engage your visitors, reduce bounce rates, and increase conversions.", icon: PenTool, image: "/placeholder.svg?height=400&width=600", align: "left" },
							{ title: "Performance Optimization", description: "Enhancing your website's speed and efficiency, ensuring fast load times and smooth interactions to keep your visitors engaged.", icon: BarChart, image: "/placeholder.svg?height=400&width=600", align: "right" },
						].map((service, index) => (
							<div key={index} className={`flex flex-col ${service.align === "right" ? "md:flex-row-reverse" : "md:flex-row"} items-center`}>
								<div className="md:w-1/2 mb-8 md:mb-0">
									<Image src={service.image} width={600} height={400} alt={service.title} className="rounded-lg shadow-lg object-cover w-full h-64 md:h-auto" />
								</div>
								<div className={`md:w-1/2 ${service.align === "right" ? "md:pr-12" : "md:pl-12"}`}>
									<div className="flex items-center mb-4">
										<service.icon className="h-8 w-8 text-stone-600 mr-4" />
										<h3 className="text-2xl font-bold">{service.title}</h3>
									</div>
									<p className="text-lg text-stone-600">{service.description}</p>
								</div>
							</div>
						))}
					</div>
				</div>
			</section>

			{/* Case Study */}
			<section className="py-20 bg-white">
				<div className="container mx-auto px-4">
					<h2 className="text-3xl md:text-4xl font-serif font-bold mb-12 text-center">Web Design Success Story</h2>
					<div className="bg-stone-100 p-8 rounded-lg shadow-lg">
						<div className="flex flex-col md:flex-row items-center">
							<div className="md:w-1/2 mb-8 md:mb-0 md:pr-8">
								<h3 className="text-2xl font-semibold mb-4">E-commerce Site Boosts Sales by 200%</h3>
								<p className="mb-4">
									<strong>Challenge:</strong> An artisanal soap company struggled with an outdated website that wasn&apos;t mobile-friendly and had poor conversion rates.
								</p>
								<p className="mb-4">
									<strong>Solution:</strong> We redesigned their website with a responsive, user-friendly interface, optimized product pages, and a streamlined checkout process.
								</p>
								<p className="mb-4">
									<strong>Result:</strong> Within 3 months, mobile traffic increased by 150%, and overall sales saw a 200% boost.
								</p>
							</div>
							<div className="md:w-1/2 flex justify-center">
								<Image src="/placeholder.svg?height=300&width=500" width={500} height={300} alt="E-commerce Website Transformation" className="rounded-lg shadow-md" />
							</div>
						</div>
					</div>
				</div>
			</section>

			{/* Testimonial */}
			<section className="py-16 bg-stone-800 text-white">
				<div className="container mx-auto px-4">
					<div className="max-w-3xl mx-auto text-center">
						<p className="text-2xl font-serif italic mb-4">&quot;Byron doesn&apos;t just design websites, he creates digital experiences. His attention to detail and focus on user experience transformed our online presence.&quot;</p>
						<p className="font-semibold">- Michael Chen, Tech Startup Founder</p>
					</div>
				</div>
			</section>

			{/* About Byron */}
			<section className="py-20 bg-white">
				<div className="container mx-auto px-4">
					<div className="flex flex-col md:flex-row items-center">
						<div className="md:w-1/3 mb-8 md:mb-0">
							<Image src="/placeholder.svg?height=400&width=400" width={400} height={400} alt="Byron Wade" className="rounded-full shadow-2xl border-4 border-stone-200" />
						</div>
						<div className="md:w-2/3 md:pl-12">
							<h2 className="text-3xl md:text-4xl font-serif font-bold mb-6">Meet Byron Wade</h2>
							<p className="text-xl mb-6 text-stone-600">With over a decade of experience in web design and development, I&apos;ve helped businesses of all sizes establish a strong online presence and achieve their digital goals.</p>
							<p className="text-xl mb-6 text-stone-600">My approach is simple: I listen to your needs, understand your audience, and create a website that not only looks great but also delivers tangible results for your business.</p>
							<Button className="bg-stone-800 hover:bg-stone-700 text-white text-lg px-8 py-3 rounded-full transition-all duration-300 transform hover:scale-105">Let&apos;s Design Your Dream Website</Button>
						</div>
					</div>
				</div>
			</section>

			{/* Final CTA */}
			<section className="py-20 bg-gradient-to-br from-stone-800 to-stone-900 text-white">
				<div className="container mx-auto px-4 text-center">
					<h2 className="text-3xl md:text-4xl font-serif font-bold mb-6">Ready to Transform Your Online Presence?</h2>
					<p className="text-xl mb-8 max-w-2xl mx-auto">Whether you&apos;re starting from scratch or looking to revamp your existing website, I&apos;m here to help you create a stunning and effective web presence.</p>
					<Button className="bg-white text-stone-800 hover:bg-stone-200 text-lg px-8 py-3 rounded-full transition-all duration-300 transform hover:scale-105">Start Your Free Web Design Consultation</Button>
					<p className="mt-6 text-lg">
						Or call me directly at <strong>831-430-6011</strong>
					</p>
				</div>
			</section>

			{/* Footer */}
			<footer className="bg-stone-100 py-8">
				<div className="container mx-auto px-4 text-center text-stone-600">
					<p>&copy; {new Date().getFullYear()} Byron Wade Web Design. All rights reserved.</p>
				</div>
			</footer>
		</div>
	);
}

================
File: app/marketing/page.tsx
================
import PageHeader from "@/components/page-header";
import Link from "next/link";
import CodedText from "@/components/ui/coded-text";
import TextStroke from "@/components/ui/text-stroke";
import HeroPages from "@/components/sections/hero-pages";

export default function LocalWebDesign() {
	return (
		<>
			<PageHeader title="Marketing">
				<Link href="https://www.hubspot.com" className="text-[#ff7a59] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">HubSpot</CodedText>
				</Link>
				<Link href="https://mailchimp.com" className="text-[#ffe01b] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Mailchimp</CodedText>
				</Link>
				<Link href="https://www.salesforce.com" className="text-[#00a1e0] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Salesforce</CodedText>
				</Link>
				<Link href="https://www.marketo.com" className="text-[#5c4c9f] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Marketo</CodedText>
				</Link>
				<Link href="https://www.semrush.com" className="text-[#00bc87] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">SEMrush</CodedText>
				</Link>
				<Link href="https://moz.com" className="text-[#5b6aea] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Moz</CodedText>
				</Link>
				<Link href="https://www.hootsuite.com" className="text-[#000000] text-5xl font-bold hover:text-yellow-400">
					<TextStroke strokeColor="white" textColor="black" strokeWidth={1} className="text-black text-5xl font-bold">
						<CodedText className="hover:underline">Hootsuite</CodedText>
					</TextStroke>
				</Link>
				<Link href="https://www.canva.com" className="text-[#00c4cc] text-5xl font-bold hover:text-yellow-400">
					<CodedText className="hover:underline">Canva</CodedText>
				</Link>
			</PageHeader>

			<HeroPages />
		</>
	);
}

================
File: app/middleware.ts
================
import { type NextRequest } from "next/server";
import { updateSession } from "../supabase/middleware";

export async function middleware(request: NextRequest) {
	return await updateSession(request);
}

export const config = {
	matcher: [
		"/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
	],
};

================
File: app/page.tsx
================
import dynamic from "next/dynamic";
import { Suspense, memo } from "react";

// Dynamically import and memoize the Hero component
const Hero = memo(dynamic(() => import("@/components/sections/hero")));
const CTA = memo(dynamic(() => import("@/components/sections/cta")));
const Features = memo(dynamic(() => import("@/components/sections/features")));

const Home = () => {
	return (
		<>
			<Suspense fallback={<div>Loading...</div>}>
				<Hero />
			</Suspense>

			<Suspense fallback={<div>Loading...</div>}>
				<CTA />
			</Suspense>

			<Suspense fallback={<div>Loading...</div>}>
				<Features />
			</Suspense>
		</>
	);
};

export default memo(Home);

================
File: app/providers.tsx
================
"use client";

import { isServer, QueryClient, QueryClientProvider } from "@tanstack/react-query";
import * as React from "react";
import { ReactQueryStreamedHydration } from "@tanstack/react-query-next-experimental";

function makeQueryClient() {
	return new QueryClient({
		defaultOptions: {
			queries: {
				staleTime: 60 * 1000,
			},
		},
	});
}

let browserQueryClient: QueryClient | undefined = undefined;

function getQueryClient() {
	if (isServer) {
		return makeQueryClient();
	}
	if (!browserQueryClient) browserQueryClient = makeQueryClient();
	return browserQueryClient;
}

export function Providers({ children }: { children: React.ReactNode }) {
	const queryClient = getQueryClient();

	return (
		<QueryClientProvider client={queryClient}>
			<ReactQueryStreamedHydration>{children}</ReactQueryStreamedHydration>
		</QueryClientProvider>
	);
}

================
File: app/shop/[handle]/page.tsx
================
import { getProduct } from "@/actions/shopify/getProducts";
import AddToCartButton from "@/app/shop/components/AddToCartButton";
import { notFound } from "next/navigation";
import Image from "next/image";
import { formatPrice } from "@/lib/utils";

interface PageProps {
	params: Promise<{ handle: string }>;
}

export default async function ProductPage({ params }: PageProps) {
	const { handle } = await params;
	const product = await getProduct(handle);

	if (!product) {
		notFound();
	}

	return (
		<div className="container mx-auto px-4 py-8">
			<div className="grid md:grid-cols-2 gap-8">
				<div className="aspect-square relative">
					<Image src={product.images[0].url} alt={product.images[0].altText || product.title} fill className="object-cover rounded-lg" sizes="(max-width: 768px) 100vw, 50vw" priority />
				</div>

				<div>
					<h1 className="text-3xl font-bold mb-4">{product.title}</h1>
					<p className="text-xl mb-4">{formatPrice(product.price)}</p>
					<div className="prose mb-6" dangerouslySetInnerHTML={{ __html: product.description }} />
					<AddToCartButton variantId={product.variantId} />
				</div>
			</div>
		</div>
	);
}

================
File: app/shop/components/AddToCartButton.tsx
================
"use client";

import { useState } from "react";
import { shopifyClient } from "@/lib/shopify";
import { addToCartMutation } from "@/lib/queries/cart";
import { toast } from "@/components/ui/use-toast";

interface AddToCartButtonProps {
	variantId: string;
	disabled?: boolean;
}

export default function AddToCartButton({ variantId, disabled }: AddToCartButtonProps) {
	const [isLoading, setIsLoading] = useState(false);

	const addToCart = async () => {
		setIsLoading(true);
		try {
			const { data } = await shopifyClient.request(addToCartMutation, {
				variables: {
					lines: [
						{
							quantity: 1,
							merchandiseId: variantId,
						},
					],
				},
			});

			if (data.cartCreate.cart?.checkoutUrl) {
				window.location.href = data.cartCreate.cart.checkoutUrl;
			} else {
				throw new Error("No checkout URL returned");
			}
		} catch (error) {
			console.error("Error adding to cart:", error);
			toast({
				title: "Error",
				description: "Could not add item to cart. Please try again.",
				variant: "destructive",
			});
		} finally {
			setIsLoading(false);
		}
	};

	return (
		<button
			onClick={addToCart}
			disabled={isLoading || disabled}
			className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 
					 disabled:opacity-50 disabled:cursor-not-allowed"
		>
			{isLoading ? "Adding to Cart..." : "Add to Cart"}
		</button>
	);
}

================
File: app/shop/components/index.ts
================
export { default as ProductGrid } from "./ProductGrid";
export { default as AddToCartButton } from "./AddToCartButton";

================
File: app/shop/components/ProductGrid.tsx
================
import Link from "next/link";
import Image from "next/image";
import { type Product } from "@/types/shopify";
import { formatPrice } from "@/lib/utils";

export default function ProductGrid({ products }: { products: Product[] }) {
	return (
		<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
			{products.map((product) => (
				<Link key={product.id} href={`/shop/${product.handle}`} className="group">
					<div className="border rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
						{product.image && (
							<div className="aspect-square relative">
								<Image src={product.image.url} alt={product.image.altText || product.title} fill className="object-cover" sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" priority />
							</div>
						)}
						<div className="p-4">
							<h2 className="text-lg font-semibold">{product.title}</h2>
							<p className="text-gray-600">{formatPrice(product.price)}</p>
							{!product.availableForSale && <span className="text-red-500 text-sm">Out of stock</span>}
						</div>
					</div>
				</Link>
			))}
		</div>
	);
}

================
File: app/shop/page.tsx
================
import { Suspense } from "react";
import { unstable_cache } from "next/cache";
import { getProducts } from "@/actions/shopify/getProducts";
import ProductGrid from "@/app/shop/components/ProductGrid";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import type { Product } from "@/types/shopify";

interface ShopStats {
	totalProducts: number;
	averagePrice: number;
	inStock: number;
}

// Cache the shop stats
const getShopStats = unstable_cache(
	async (): Promise<ShopStats> => {
		const products = await getProducts();
		return {
			totalProducts: products.length,
			averagePrice: products.reduce((acc: number, p: Product) => acc + Number(p.price.amount), 0) / products.length,
			inStock: products.filter((p: Product) => p.availableForSale).length,
		};
	},
	["shop-stats"],
	{
		revalidate: 60,
		tags: ["products"],
	}
);

function ProductGridSkeleton() {
	return (
		<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
			{[...Array(6)].map((_, i) => (
				<Card key={i}>
					<CardContent className="p-0">
						<Skeleton className="h-[300px] w-full" />
						<div className="p-4">
							<Skeleton className="h-4 w-3/4 mb-2" />
							<Skeleton className="h-4 w-1/4" />
						</div>
					</CardContent>
				</Card>
			))}
		</div>
	);
}

async function ShopStats() {
	const stats = await getShopStats();

	return (
		<div className="grid sm:grid-cols-3 gap-4 mb-8">
			<Card>
				<CardHeader>
					<CardTitle className="text-sm font-medium">Total Products</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="text-2xl font-bold">{stats.totalProducts}</div>
				</CardContent>
			</Card>
			<Card>
				<CardHeader>
					<CardTitle className="text-sm font-medium">Average Price</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="text-2xl font-bold">${stats.averagePrice.toFixed(2)}</div>
				</CardContent>
			</Card>
			<Card>
				<CardHeader>
					<CardTitle className="text-sm font-medium">In Stock</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="text-2xl font-bold">{stats.inStock}</div>
				</CardContent>
			</Card>
		</div>
	);
}

async function ProductSection() {
	const products = await getProducts();

	return (
		<div className="space-y-4">
			<div className="flex justify-between items-center">
				<h2 className="text-2xl font-bold">Products</h2>
			</div>
			<ProductGrid products={products} />
		</div>
	);
}

export default async function ShopPage() {
	return (
		<div className="container mx-auto px-4 py-8">
			<div className="mb-8">
				<h1 className="text-3xl font-bold mb-4">Shop</h1>
				<p className="text-muted-foreground">Browse our collection of products</p>
			</div>

			<Suspense
				fallback={
					<div className="grid sm:grid-cols-3 gap-4 mb-8">
						{[...Array(3)].map((_, i) => (
							<Skeleton key={i} className="h-[120px]" />
						))}
					</div>
				}
			>
				<ShopStats />
			</Suspense>

			<Suspense fallback={<ProductGridSkeleton />}>
				<ProductSection />
			</Suspense>
		</div>
	);
}

// Enable revalidation every minute
export const revalidate = 60;

================
File: app/tools/page.tsx
================
"use client";

import { motion, useScroll, useTransform } from "framer-motion";
import { Code, Database, Globe, Palette, Server, Zap, Cloud, Lock, Smartphone, Cpu, ExternalLink, Check } from "lucide-react";
import { useRef, useState, useEffect, JSXElementConstructor, Key, ReactElement, ReactNode, ReactPortal, RefObject } from "react";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";

const tools = [
	{
		name: "Next.js",
		icon: Globe,
		description: "Next.js is a powerful React framework that enables functionality such as server-side rendering and generating static websites for React based web applications.",
		tags: ["React", "JavaScript", "TypeScript", "Server-Side Rendering", "Static Site Generation"],
		keyFeatures: ["Hybrid Static & Server Rendering", "TypeScript Support", "Smart Bundling", "Route Pre-fetching", "Built-in CSS Support"],
		useCases: ["E-commerce websites", "Blog platforms", "Social media applications", "Dashboard interfaces"],
		url: "https://nextjs.org/",
		image: "/images/nextjs.png",
	},
	{
		name: "React",
		icon: Code,
		description: "React is a declarative, efficient, and flexible JavaScript library for building user interfaces.",
		tags: ["React", "JavaScript", "TypeScript", "Component-Based Architecture", "Unidirectional data flow"],
		keyFeatures: ["Virtual DOM for improved performance", "JSX syntax", "Component-Based Architecture", "Unidirectional data flow", "Rich ecosystem and community"],
		useCases: ["Single Page Applications (SPAs)", "Progressive Web Apps (PWAs)", "Cross-platform mobile applications", "Interactive dashboards"],
		url: "https://reactjs.org/",
	},
	{
		name: "Tailwind CSS",
		icon: Palette,
		description: "Tailwind CSS is a utility-first CSS framework packed with classes that can be composed to build any design, directly in your markup.",
		tags: ["Tailwind CSS", "CSS", "Utility-First Approach", "Highly Customizable", "Responsive Design", "Dark Mode", "JIT (Just-In-Time) Compiler"],
		keyFeatures: ["Utility-First Approach", "Highly Customizable", "Responsive Design", "Dark Mode", "JIT (Just-In-Time) Compiler"],
		useCases: ["Rapid prototyping", "Consistent design systems", "Responsive web design", "Custom component libraries"],
		url: "https://tailwindcss.com/",
	},
	{
		name: "Node.js",
		icon: Server,
		description: "Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a web browser.",
		tags: ["Node.js", "JavaScript", "Open-Source", "Cross-Platform", "Event-Driven", "Non-Blocking I/O", "NPM (Node Package Manager)", "Large Ecosystem"],
		keyFeatures: ["Non-blocking I/O", "Event-driven architecture", "NPM (Node Package Manager)", "Cross-platform compatibility", "Large ecosystem of libraries"],
		useCases: ["Web servers", "Real-time applications", "API development", "Microservices architecture", "Command-line tools"],
		url: "https://nodejs.org/",
	},
	{
		name: "MongoDB",
		icon: Database,
		description: "MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas.",
		tags: ["MongoDB", "NoSQL", "Document-oriented storage", "Full index support", "Replication & high availability", "Auto-sharding", "Rich queries"],
		keyFeatures: ["Document-oriented storage", "Full index support", "Replication & high availability", "Auto-sharding", "Rich queries"],
		useCases: ["Content management systems", "Real-time analytics", "Caching and high performance", "Mobile and social infrastructure", "User data management"],
		url: "https://www.mongodb.com/",
	},
	{
		name: "GraphQL",
		icon: Zap,
		description: "GraphQL is a query language for APIs and a runtime for executing those queries with your existing data.",
		tags: ["GraphQL", "API", "Query Language", "Runtime", "Hierarchical data fetching", "Strong typing", "Single endpoint", "Introspection", "Real-time updates with subscriptions"],
		keyFeatures: ["Hierarchical data fetching", "Strong typing", "Single endpoint", "Introspection", "Real-time updates with subscriptions"],
		useCases: ["Mobile applications", "Complex data requirements", "Microservices aggregation", "Rapid prototyping and iteration", "Real-time data updates"],
		url: "https://graphql.org/",
	},
	{
		name: "Vercel",
		icon: Cloud,
		description: "Vercel is a cloud platform for static sites and Serverless Functions that fits perfectly with your workflow.",
		tags: ["Vercel", "Cloud Platform", "Static Sites", "Serverless Functions", "Edge Network", "HTTPS by default", "Preview deployments"],
		keyFeatures: ["Automatic deployments", "Serverless Functions", "Edge Network", "HTTPS by default", "Preview deployments"],
		useCases: ["Static website hosting", "Jamstack applications", "Serverless API endpoints", "Next.js deployments", "Continuous deployment pipelines"],
		url: "https://vercel.com/",
	},
	{
		name: "Auth0",
		icon: Lock,
		description: "Auth0 is an easy to implement, adaptable authentication and authorization platform.",
		tags: ["Auth0", "Authentication", "Authorization", "Universal authentication", "Single Sign-On (SSO)", "Multi-factor Authentication (MFA)", "Social identity providers", "Passwordless authentication"],
		keyFeatures: ["Universal authentication", "Single Sign-On (SSO)", "Multi-factor Authentication (MFA)", "Social identity providers", "Passwordless authentication"],
		useCases: ["B2C identity management", "B2B enterprise solutions", "API security", "IoT device authentication", "Customer identity and access management"],
		url: "https://auth0.com/",
	},
	{
		name: "React Native",
		icon: Smartphone,
		description: "React Native is an open-source mobile application development framework created by Facebook.",
		tags: ["React Native", "Open-Source", "Mobile Development", "Cross-platform", "Native Components", "Hot Reloading", "Large Community", "Performance Close to Native"],
		keyFeatures: ["Cross-platform development", "Native components", "Hot reloading", "Large community and ecosystem", "Performance close to native apps"],
		useCases: ["Cross-platform mobile apps", "Rapid prototyping", "Adding mobile experience to existing web apps", "Social media applications", "E-commerce mobile apps"],
		url: "https://reactnative.dev/",
	},
	{
		name: "WebAssembly",
		icon: Cpu,
		description: "WebAssembly (Wasm) is a binary instruction format for a stack-based virtual machine.",
		tags: ["WebAssembly", "Wasm", "Binary Instruction Format", "Stack-based Virtual Machine", "Near-native performance", "Language independence", "Secure execution", "Compact binary format", "Complements JavaScript"],
		keyFeatures: ["Near-native performance", "Language independence", "Secure execution", "Compact binary format", "Complements JavaScript"],
		useCases: ["High-performance web applications", "Gaming in the browser", "Audio and video processing", "Cryptography and security applications", "Porting existing C/C++ applications to the web"],
		url: "https://webassembly.org/",
	},
];

function Tool({
	tool,
	index,
	setActiveToolIndex,
}: {
	tool: {
		name: string;
		icon: any;
		description: string;
		tags: string[];
		keyFeatures: string[];
		useCases: string[];
		url: string;
	};
	index: number;
	setActiveToolIndex: (index: number) => void;
}) {
	const ref = useRef<HTMLDivElement>(null);
	const { scrollYProgress } = useScroll({
		target: ref as RefObject<HTMLElement>,
		offset: ["start end", "end start"],
	});
	const opacity = useTransform(scrollYProgress, [0, 0.3, 0.7, 1], [0, 1, 1, 0]);
	const scale = useTransform(scrollYProgress, [0, 0.3, 0.7, 1], [0.8, 1, 1, 0.8]);

	useEffect(() => {
		const unsubscribe = scrollYProgress.onChange((v) => {
			if (v > 0.3 && v < 0.7) {
				setActiveToolIndex(index);
			}
		});
		return () => unsubscribe();
	}, [scrollYProgress, index, setActiveToolIndex]);

	return (
		// @ts-ignore
		<motion.div ref={ref} style={{ opacity, scale }} className="min-h-[calc(100vh-64px)] md:-ml-32 flex items-center justify-center px-4">
			<Card className="w-full mx-auto max-w-5xl bg-white dark:bg-black border dark:border-zinc-800 border-zinc-200 rounded-xl overflow-hidden z-10">
				<CardHeader className="flex justify-between items-center py-10 border-b dark:border-zinc-800 border-zinc-200">
					<div className="h-8 w-8 flex items-center justify-center">
						<svg viewBox="0 0 24 24" fill="none" className="h-6 w-6 text-zinc-500">
							<path d="M12 2L2 19.7778H22L12 2Z" fill="currentColor" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
						</svg>
					</div>
				</CardHeader>
				<CardContent className="space-y-4 p-6">
					<h2 className="text-2xl font-semibold tracking-tight">{tool.name}</h2>
					<p className="text-neutral-700 dark:text-neutral-300 text-sm">{tool.description}</p>
					<div className="flex flex-wrap gap-2">
						{tool.tags.map((tag: string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<string | number | bigint | boolean | ReactPortal | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | null | undefined> | null | undefined, index: Key | null | undefined) => (
							<Badge key={index} variant="secondary" className="bg-zinc-800 text-zinc-400">
								{tag}
							</Badge>
						))}
					</div>
					<Separator className="dark:bg-zinc-800 bg-zinc-200" />
					<div className="space-y-2">
						<h3 className="text-sm font-medium text-white">Key Features:</h3>
						<ul className="space-y-1">
							{tool.keyFeatures.map((feature: string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<string | number | bigint | boolean | ReactPortal | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | null | undefined> | null | undefined, index: Key | null | undefined) => (
								<li key={index} className="flex items-center dark:text-zinc-400 text-neutral-700 text-sm">
									<Check className="h-4 w-4 mr-2 text-green-500" />
									{feature}
								</li>
							))}
						</ul>
					</div>
				</CardContent>
				<CardFooter className="border-t dark:border-zinc-800 border-zinc-200 p-6">
					<a href="#" className="inline-flex items-center gap-2 text-sm dark:text-zinc-400 text-neutral-700 hover:text-yellow-400 transition-colors">
						View Template
						<ExternalLink className="h-4 w-4" />
					</a>
				</CardFooter>
			</Card>
		</motion.div>
	);
}

export default function ToolsShowcase() {
	const [activeToolIndex, setActiveToolIndex] = useState(0);

	return (
		<>
			<div className="flex flex-col lg:flex-row min-h-[calc(100vh-64px)] z-10">
				{/* Left side - Title, Description, and Overview */}
				<div className="w-full lg:w-1/4 flex flex-col justify-between p-6 lg:sticky lg:top-16 lg:h-[calc(100vh-64px)]">
					<div className="max-w-xs mx-auto lg:mx-0">
						{/* @ts-ignore */}
						<motion.h1 className="text-3xl font-bold mb-4" initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
							Our Toolkit
						</motion.h1>
						{/* @ts-ignore */}
						<motion.p className="text-base dark:text-neutral-300 text-neutral-700 mb-6" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.2 }}>
							Explore the cutting-edge tools we leverage to build high-performance, SEO-optimized websites for businesses in Santa Cruz and beyond.
						</motion.p>
					</div>
					<div className="mt-6 lg:mt-0">
						<h3 className="text-xs font-semibold text-white uppercase tracking-wider mb-2">Overview</h3>
						<ul className="space-y-2">
							{tools.map((tool, index) => (
								<li key={tool.name} className={`transition-all duration-300 text-sm ${index === activeToolIndex ? "text-yellow-400 translate-x-1" : "text-neutral-500 hover:text-yellow-400"}`}>
									<tool.icon className="w-3 h-3 inline-block mr-1" />
									{tool.name}
								</li>
							))}
						</ul>
					</div>
				</div>

				{/* Right side - Scrolling Tools */}
				<div className="w-full lg:w-3/4">
					{tools.map((tool, index) => (
						<Tool key={tool.name} tool={tool} index={index} setActiveToolIndex={setActiveToolIndex} />
					))}
				</div>
			</div>
		</>
	);
}

================
File: app/work-with-me/page.tsx
================
export default function WorkWithMe() {
  return (
    <div>
      <h1>Work With Me</h1>
      {/* Add your content here */}
    </div>
  )
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
		"components": "@/components",
		"utils": "@/lib/utils",
		"ui": "@/components/ui",
		"lib": "@/lib",
		"hooks": "@/hooks",
		"fonts": "@/lib/fonts",
		"types": "@/types"
  }
}

================
File: components/analysis/client.tsx
================
"use client";

import { Card, CardContent, CardDescription, CardTitle, CardHeader } from "@/components/ui/card";

interface ClientProps {
	clientData?: {
		name: string;
		industry: string;
		duration: string;
		completionDate: string;
		goals: string[];
	};
}

export default function Client({ clientData }: ClientProps) {
	return (
		<section id="client" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Client Overview</CardTitle>
					<CardDescription>Impact Marine Group&apos;s digital transformation journey</CardDescription>
				</CardHeader>
				<CardContent>
					<div className="grid sm:grid-cols-3 gap-6">
						<div className="space-y-2">
							<h3 className="font-semibold">Client</h3>
							<p className="text-sm text-muted-foreground">{clientData?.name}</p>
							<p className="text-sm text-muted-foreground">{clientData?.industry}</p>
						</div>
						<div className="space-y-2">
							<h3 className="font-semibold">Timeline</h3>
							<p className="text-sm text-muted-foreground">Project Duration: {clientData?.duration}</p>
							<p className="text-sm text-muted-foreground">Completed: {clientData?.completionDate}</p>
						</div>
						<div className="space-y-2">
							<h3 className="font-semibold">Goals</h3>
							<ul className="text-sm text-muted-foreground space-y-1">
								{clientData?.goals.map((goal, index) => (
									<li key={index}>{goal}</li>
								))}
							</ul>
						</div>
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

================
File: components/analysis/conclusion.tsx
================
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle } from "lucide-react";

interface ConclusionProps {
	benchmarks: {
		loadTime: { industry: number; optimized: number };
		performanceScore: { industry: number; optimized: number };
		seoScore: { industry: number; optimized: number };
		mobileScore: { industry: number; optimized: number };
		organicTrafficIncrease: number;
	};
}

export default function Conclusion({ benchmarks }: ConclusionProps) {
	return (
		<section id="conclusion" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Conclusion</CardTitle>
					<CardDescription>Summary of improvements and future potential</CardDescription>
				</CardHeader>
				<CardContent className="space-y-6">
					<div className="space-y-4">
						<p className="text-muted-foreground">Our premium redesign offers exceptional improvements across all key performance indicators:</p>
						<ul className="grid gap-2">
							<TechItem text={`${benchmarks.loadTime.industry} reduction in load time`} />
							<TechItem text={`${benchmarks.performanceScore.industry} increase in performance score`} />
							<TechItem text={`${benchmarks.seoScore.industry} improvement in SEO score`} />
							<TechItem text={`${benchmarks.mobileScore.industry} boost in mobile responsiveness`} />
						</ul>
					</div>
					<div className="bg-muted rounded-lg p-4">
						<p className="font-semibold mb-2">Potential ROI:</p>
						<ul className="space-y-2 text-sm text-muted-foreground">
							<li>• {benchmarks.organicTrafficIncrease}% potential growth in organic traffic</li>
							<li>• Estimated 20-30% increase in customer satisfaction</li>
							<li>• Significant revenue increase potential from higher conversion rates</li>
						</ul>
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

function TechItem({ text }: { text: string }) {
	return (
		<li className="flex items-center gap-2">
			<CheckCircle className="h-4 w-4 text-primary flex-shrink-0" />
			<span className="text-sm text-muted-foreground">{text}</span>
		</li>
	);
}

================
File: components/analysis/design.tsx
================
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle } from "lucide-react";

interface DesignProps {
	benchmarks: {
		bounceRate: { optimized: number };
		averageTimeOnPage: { industry: number; optimized: number };
	};
}

const calculateImprovement = (industry: number, optimized: number): string => {
	const improvement = ((optimized - industry) / industry) * 100;
	return `${improvement.toFixed(1)}%`;
};

export default function Design({ benchmarks }: DesignProps) {
	return (
		<section id="design" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Design Excellence</CardTitle>
					<CardDescription>User interface and experience improvements</CardDescription>
				</CardHeader>
				<CardContent className="space-y-6">
					<div className="grid gap-6">
						<div className="space-y-2">
							<h3 className="font-semibold">User Interface Refinements</h3>
							<ul className="grid gap-2">
								<TechItem text="Implementation of intuitive navigation structure" />
								<TechItem text="Responsive grid layout for optimal content presentation" />
								<TechItem text="Enhanced typography for superior readability" />
								<TechItem text="Refined color contrast for accessibility excellence" />
								<TechItem text="Integration of subtle, elegant animations" />
							</ul>
						</div>
						<div className="grid sm:grid-cols-2 gap-4">
							<MetricCard title="Bounce Rate Reduction" value={`${100 - benchmarks.bounceRate.optimized}%`} trend="decrease" />
							<MetricCard title="Session Duration Increase" value={calculateImprovement(benchmarks.averageTimeOnPage.industry, benchmarks.averageTimeOnPage.optimized)} trend="increase" />
						</div>
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

function TechItem({ text }: { text: string }) {
	return (
		<li className="flex items-center gap-2">
			<CheckCircle className="h-4 w-4 text-primary flex-shrink-0" />
			<span className="text-sm text-muted-foreground">{text}</span>
		</li>
	);
}

function MetricCard({ title, value, trend }: { title: string; value: string; trend: "increase" | "decrease" }) {
	return (
		<div className="p-4 border rounded-lg">
			<div className="text-sm text-muted-foreground mb-1">{title}</div>
			<div className="text-2xl font-bold">{value}</div>
			<div className={trend === "increase" ? "text-green-600" : "text-red-600"}>{trend === "increase" ? "Increase" : "Decrease"}</div>
		</div>
	);
}

================
File: components/analysis/impact.tsx
================
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { benchmarks, calculateImprovement } from "@/actions/analysis/get-analytics";
import { useMemo } from "react";

interface ImpactProps {
	benchmarks: {
		bounceRate: { industry: number; optimized: number };
		conversionRate: { industry: number; optimized: number };
		organicTrafficIncrease: number;
		mobileScore: { industry: number; optimized: number };
	};
}

export default function Impact({ benchmarks }: ImpactProps) {
	const metrics = useMemo(
		() => [
			{
				title: "Bounce Rate",
				value: `-${benchmarks.bounceRate.industry - benchmarks.bounceRate.optimized}%`,
				trend: "decrease" as const,
			},
			{
				title: "Conversion Rate",
				value: `+${calculateImprovement(benchmarks.conversionRate.industry, benchmarks.conversionRate.optimized)}`,
				trend: "increase" as const,
			},
			{
				title: "Organic Traffic",
				value: `+${benchmarks.organicTrafficIncrease}%`,
				trend: "increase" as const,
			},
			{
				title: "Mobile Score",
				value: `+${calculateImprovement(benchmarks.mobileScore.industry, benchmarks.mobileScore.optimized)}`,
				trend: "increase" as const,
			},
		],
		[]
	);

	return (
		<section id="impact" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Business Impact</CardTitle>
					<CardDescription>Measurable improvements in key business metrics</CardDescription>
				</CardHeader>
				<CardContent>
					<div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
						{metrics.map((metric) => (
							<MetricCard key={metric.title} title={metric.title} value={metric.value} trend={metric.trend} />
						))}
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

function MetricCard({ title, value, trend }: { title: string; value: string; trend: "increase" | "decrease" }) {
	return (
		<div className="p-4 border rounded-lg">
			<div className="text-sm text-muted-foreground mb-1">{title}</div>
			<div className="text-2xl font-bold">{value}</div>
			<div className={trend === "increase" ? "text-green-600" : "text-red-600"}>{trend === "increase" ? "Increase" : "Decrease"}</div>
		</div>
	);
}

================
File: components/analysis/index.ts
================
export { default as Market } from "./market";
export { default as Technical } from "./technical";
export { default as Overview } from "./overview";
export { default as Performance } from "./performance";
export { default as SEO } from "./seo";
export { default as Design } from "./design";
export { default as Impact } from "./impact";
export { default as Investment } from "./investment";
export { default as Client } from "./client";
export { default as Conclusion } from "./conclusion";

================
File: components/analysis/investment.tsx
================
"use client";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Check, Info } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

interface InvestmentProps {
	mainFeatures: string[];
	monthlyServices: { feature: string }[];
	addOns: {
		title: string;
		price: string;
		features: string[];
		description: string;
	}[];
}

export default function Investment({ mainFeatures, monthlyServices, addOns }: InvestmentProps) {
	return (
		<section id="investment" className="max-w-6xl mx-auto px-4 py-12 space-y-16">
			<div className="text-center space-y-4">
				<h1 className="text-4xl font-bold">Investment Options</h1>
				<p className="text-xl text-muted-foreground">Choose the perfect plan for your business</p>
			</div>

			<section className="space-y-8">
				<h2 className="text-3xl font-bold">Complete Website Package</h2>
				<Card className="border-2 border-primary">
					<CardHeader>
						<div className="flex items-baseline justify-between">
							<div>
								<CardTitle className="text-2xl">Premium Website Solution</CardTitle>
								<CardDescription>Everything you need to get started</CardDescription>
							</div>
							<div className="text-right">
								<div className="text-4xl font-bold">$4,999</div>
								<div className="text-sm text-muted-foreground">one-time payment</div>
							</div>
						</div>
					</CardHeader>
					<CardContent className="space-y-6">
						<div className="space-y-4">
							<h3 className="font-semibold">Included Features:</h3>
							<ul className="grid gap-3 sm:grid-cols-2">
								{mainFeatures.map((feature) => (
									<li key={feature} className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">{feature}</span>
									</li>
								))}
							</ul>
						</div>
						<Button className="w-full" size="lg">
							Get Started
						</Button>
					</CardContent>
				</Card>
			</section>

			<section className="space-y-8">
				<h2 className="text-3xl font-bold">Monthly Maintenance & Hosting</h2>
				<Card>
					<CardHeader>
						<div className="flex items-baseline justify-between">
							<div>
								<CardTitle className="text-2xl">Essential Care Package</CardTitle>
								<CardDescription>Keep your website running smoothly</CardDescription>
							</div>
							<div className="text-right">
								<div className="text-4xl font-bold">$199</div>
								<div className="text-sm text-muted-foreground">per month</div>
							</div>
						</div>
					</CardHeader>
					<CardContent className="space-y-6">
						<div className="space-y-4">
							<h3 className="font-semibold">Services Included:</h3>
							<ul className="grid gap-3 sm:grid-cols-2">
								{monthlyServices.map((service) => (
									<li key={service.feature} className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">{service.feature}</span>
									</li>
								))}
							</ul>
						</div>
						<Button className="w-full" size="lg">
							Subscribe Now
						</Button>
					</CardContent>
				</Card>
			</section>

			<section className="space-y-8">
				<h2 className="text-3xl font-bold">Additional Features & Services</h2>
				<div className="grid gap-8 md:grid-cols-3">
					{addOns.map((addon) => (
						<Card key={addon.title}>
							<CardHeader>
								<div className="flex items-center justify-between">
									<CardTitle className="flex items-center gap-2">
										{addon.title}
										<TooltipProvider>
											<Tooltip>
												<TooltipTrigger>
													<Info className="h-4 w-4 text-muted-foreground" />
												</TooltipTrigger>
												<TooltipContent>
													<p className="max-w-xs">{addon.description}</p>
												</TooltipContent>
											</Tooltip>
										</TooltipProvider>
									</CardTitle>
								</div>
								<CardDescription>
									<span className="text-2xl font-bold">{addon.price}</span>
								</CardDescription>
							</CardHeader>
							<CardContent>
								<ul className="space-y-2">
									{addon.features.map((feature) => (
										<li key={feature} className="flex items-center gap-2">
											<Check className="h-4 w-4 text-primary" />
											<span className="text-sm">{feature}</span>
										</li>
									))}
								</ul>
							</CardContent>
						</Card>
					))}
				</div>
			</section>

			<section className="space-y-8">
				<h2 className="text-3xl font-bold">Custom Development</h2>
				<Card>
					<CardHeader>
						<CardTitle>Need Something Specific?</CardTitle>
						<CardDescription>Let&apos;s build the perfect solution for your business</CardDescription>
					</CardHeader>
					<CardContent className="space-y-8">
						<div className="grid gap-8 md:grid-cols-2">
							<div className="space-y-4">
								<h3 className="font-semibold">Custom Feature Development</h3>
								<ul className="space-y-2">
									<li className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">Custom API integrations from $1,499</span>
									</li>
									<li className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">Advanced search functionality from $999</span>
									</li>
									<li className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">Custom database solutions from $2,499</span>
									</li>
								</ul>
							</div>
							<div className="space-y-4">
								<h3 className="font-semibold">Additional Support Options</h3>
								<ul className="space-y-2">
									<li className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">Priority support: +$99/month</span>
									</li>
									<li className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">24/7 emergency support: +$199/month</span>
									</li>
									<li className="flex items-center gap-2">
										<Check className="h-4 w-4 text-primary" />
										<span className="text-sm">Additional content updates: +$149/month</span>
									</li>
								</ul>
							</div>
						</div>
						<div className="bg-muted rounded-lg p-4">
							<p className="text-sm text-muted-foreground">All prices are in USD. Custom development projects are quoted based on specific requirements and complexity. Contact us for a detailed quote tailored to your needs.</p>
						</div>
					</CardContent>
				</Card>
			</section>
		</section>
	);
}

================
File: components/analysis/market.tsx
================
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, BarChart, Bar, ResponsiveContainer } from "@/components/charts";

interface MarketProps {
	performanceData: any[];
	conversionData: any[];
}

export default function Market({ performanceData, conversionData }: MarketProps) {
	return (
		<section id="market-research" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Market Research Insights</CardTitle>
					<CardDescription>Industry performance analysis and benchmarks</CardDescription>
				</CardHeader>
				<CardContent className="space-y-8">
					<div>
						<h3 className="font-semibold mb-4">Performance Trends</h3>
						<div className="h-[300px]">
							<ResponsiveContainer width="100%" height="100%">
								<LineChart data={performanceData}>
									<CartesianGrid strokeDasharray="3 3" />
									<XAxis dataKey="month" />
									<YAxis />
									<Tooltip />
									<Legend />
									<Line type="monotone" dataKey="industry" name="Industry Average" stroke="hsl(var(--muted-foreground))" />
									<Line type="monotone" dataKey="optimized" name="Optimized Website" stroke="hsl(var(--primary))" />
								</LineChart>
							</ResponsiveContainer>
						</div>
					</div>
					<div>
						<h3 className="font-semibold mb-4">Conversion Rate Comparison</h3>
						<div className="h-[300px]">
							<ResponsiveContainer width="100%" height="100%">
								<BarChart data={conversionData}>
									<CartesianGrid strokeDasharray="3 3" />
									<XAxis dataKey="category" />
									<YAxis />
									<Tooltip />
									<Legend />
									<Bar dataKey="industry" name="Industry Average" fill="hsl(var(--muted-foreground))" />
									<Bar dataKey="optimized" name="Optimized Website" fill="hsl(var(--primary))" />
								</BarChart>
							</ResponsiveContainer>
						</div>
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

================
File: components/analysis/overview.tsx
================
"use client";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { motion } from "framer-motion";
import { ArrowRight } from "lucide-react";

const fadeIn = {
	hidden: { opacity: 0, y: 20 },
	visible: { opacity: 1, y: 0 },
};

interface OverviewProps {
	stats: {
		label: string;
		industryValue: number;
		optimizedValue: number;
		improvement: number;
		icon?: React.ElementType;
	}[];
}

export default function Overview({ stats }: OverviewProps) {
	return (
		<section id="overview" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Project Overview</CardTitle>
					<CardDescription>A comprehensive analysis of website transformation</CardDescription>
				</CardHeader>
				<CardContent>
					<div className="grid gap-6">
						{stats.map((stat, index) => (
							<motion.div
								key={stat.label}
								initial="hidden"
								animate="visible"
								variants={fadeIn}
								transition={{ duration: 0.5, delay: index * 0.1 }}
								style={{
									display: "grid",
									gridTemplateColumns: "1fr auto 1fr",
									gap: "1rem",
									alignItems: "center",
								}}
							>
								<div className="flex items-center gap-2">
									{/* @ts-ignore */}
									<stat.icon className="h-5 w-5 text-muted-foreground" />
									<div>
										<p className="font-medium">{stat.label}</p>
										<p className="text-2xl font-bold">{stat.industryValue}</p>
										<p className="text-sm text-muted-foreground">Industry Average</p>
									</div>
								</div>
								<div className="hidden sm:block">
									<ArrowRight className="h-5 w-5 text-muted-foreground" />
								</div>
								<div className="text-right">
									<p className="font-medium">Optimized</p>
									<p className="text-2xl font-bold text-primary">{stat.optimizedValue}</p>
									<p className="text-sm text-green-600">+{stat.improvement} improvement</p>
								</div>
							</motion.div>
						))}
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

================
File: components/analysis/performance.tsx
================
"use client";

import { motion } from "framer-motion";
import { Activity, BarChart, Clock, Globe, LayoutGrid, LineChart, MousePointer, PieChart, Search, Share2, Shield, Smartphone, Zap } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Metrics } from "@/types/analysis";

export default function PerformanceAnalysis() {
	const currentMetrics: Metrics = {
		loadTime: {
			value: 8.3,
			unit: "s",
			improvement: 85.5,
			icon: Clock,
			description: "Time until page becomes fully interactive",
			impact: "A 1-second delay in load time can result in a 7% reduction in conversions",
			fact: "Google research shows 53% of mobile users abandon sites that take longer than 3 seconds to load",
		},
		firstContentfulPaint: {
			value: 3.8,
			unit: "s",
			improvement: 78.9,
			icon: Activity,
			description: "Time until first meaningful content appears",
			impact: "FCP strongly correlates with user perception of site speed",
			fact: "Sites with FCP under 1.8s rank in the top 75th percentile for user experience",
		},
		performanceScore: {
			value: 45,
			unit: "",
			improvement: 111.1,
			icon: Zap,
			description: "Overall performance assessment",
			impact: "Higher performance scores directly impact search rankings",
			fact: "Websites with performance scores over 90 see 23% higher conversion rates on average",
		},
		bounceRate: {
			value: 65,
			unit: "%",
			improvement: 46.2,
			icon: MousePointer,
			description: "Percentage of single-page sessions",
			impact: "Lower bounce rates indicate better user engagement",
			fact: "The average bounce rate for manufacturing websites is 55%. Every 1% reduction can increase conversions by 2%",
		},
		conversionRate: {
			value: 2.1,
			unit: "%",
			improvement: 114.3,
			icon: LineChart,
			description: "Percentage of converting visitors",
			impact: "Direct correlation with business revenue",
			fact: "Top-performing manufacturing websites achieve conversion rates of 4.5% or higher",
		},
		sessionDuration: {
			value: 120,
			unit: "s",
			improvement: 133.3,
			icon: Clock,
			description: "Average time spent on site",
			impact: "Longer sessions indicate higher user engagement",
			fact: "Users who spend more than 3 minutes on site are 4x more likely to convert",
		},
		securityScore: {
			value: 60,
			unit: "",
			improvement: 58.3,
			icon: Shield,
			description: "Overall security assessment",
			impact: "Critical for user trust and data protection",
			fact: "88% of users are less likely to return after a negative security experience",
		},
		bestPractices: {
			value: 60,
			unit: "",
			improvement: 58.3,
			icon: LayoutGrid,
			description: "Adherence to web standards",
			impact: "Ensures maintainability and future compatibility",
			fact: "Sites following best practices see 32% lower maintenance costs on average",
		},
		mobileScore: {
			value: 58,
			unit: "",
			improvement: 63.8,
			icon: Smartphone,
			description: "Mobile optimization level",
			impact: "Critical for mobile user experience",
			fact: "Mobile devices account for over 60% of web traffic in the manufacturing sector",
		},
		seoScore: {
			value: 55,
			unit: "",
			improvement: 72.7,
			icon: Search,
			description: "Search engine optimization level",
			impact: "Determines organic search visibility",
			fact: "Websites ranking on the first page of Google have an average SEO score of 85+",
		},
		crawlability: {
			value: 70,
			unit: "%",
			improvement: 40.0,
			icon: Globe,
			description: "Search engine accessibility",
			impact: "Affects content indexing efficiency",
			fact: "Improved crawlability can increase organic traffic by up to 50%",
		},
		socialEngagement: {
			value: 45,
			unit: "",
			improvement: 88.9,
			icon: Share2,
			description: "Social media interaction score",
			impact: "Influences brand visibility and reach",
			fact: "B2B companies with high social engagement see 45% more web traffic",
		},
	};

	const fadeIn = {
		hidden: { opacity: 0, y: 20 },
		visible: { opacity: 1, y: 0 },
	};

	return (
		<div className="space-y-16 py-12">
			<div className="space-y-4">
				<h2 className="text-3xl font-semibold tracking-tight">Technical Implementation Analysis</h2>
				<p className="text-muted-foreground max-w-3xl">Comprehensive breakdown of implemented improvements and their measurable impact on website performance, infrastructure, and search visibility.</p>
			</div>

			<section className="space-y-8">
				<div className="border-b pb-4">
					<h3 className="text-2xl font-semibold">Performance Metrics</h3>
					<p className="text-muted-foreground mt-2">Current performance compared to industry standards and targets</p>
				</div>

				<div className="grid md:grid-cols-2 2xl:grid-cols-3 gap-6">
					{Object.entries(currentMetrics).map(([key, data], index) => (
						<motion.div key={key} initial="hidden" animate="visible" variants={fadeIn} transition={{ duration: 0.5, delay: index * 0.1 }}>
							<Card className="h-full">
								<CardHeader className="pb-2">
									<div className="flex items-center justify-between">
										<div className="flex items-center gap-3">
											<div className="p-2 rounded-md bg-muted">
												<data.icon className="h-5 w-5 text-muted-foreground" />
											</div>
											<div>
												<div className="flex items-center gap-2">
													<CardTitle className="text-lg font-semibold capitalize">{key.replace(/([A-Z])/g, " $1").trim()}</CardTitle>
													<span className="text-sm font-medium text-green-600">+{data.improvement}% improved</span>
												</div>
												<CardDescription className="text-sm">{data.description}</CardDescription>
											</div>
										</div>
									</div>
								</CardHeader>
								<CardContent>
									<div className="space-y-4">
										<div className="grid grid-cols-3 gap-2 pt-2">
											<div className="space-y-1">
												<p className="text-xs text-muted-foreground font-medium">Current</p>
												<p className="text-2xl font-semibold tabular-nums">
													{data.value}
													{data.unit}
												</p>
											</div>
											<div className="space-y-1">
												<p className="text-xs text-muted-foreground font-medium">Industry</p>
												<p className="text-2xl font-semibold text-muted-foreground tabular-nums">
													{Math.round(data.value * 1.2)}
													{data.unit}
												</p>
											</div>
											<div className="space-y-1">
												<p className="text-xs text-muted-foreground font-medium">Target</p>
												<div className="flex items-baseline gap-1.5">
													<p className="text-2xl font-semibold text-primary tabular-nums">
														{Math.round(data.value * 0.4)}
														{data.unit}
													</p>
												</div>
											</div>
										</div>
										<div className="pt-4 border-t space-y-3">
											<p className="text-sm text-muted-foreground">
												<span className="font-medium text-foreground">Impact: </span>
												{data.impact}
											</p>
											<div className="bg-muted/50 rounded-lg p-3">
												<p className="text-sm text-muted-foreground">
													<span className="font-medium text-foreground">Did you know? </span>
													{data.fact}
												</p>
											</div>
										</div>
									</div>
								</CardContent>
							</Card>
						</motion.div>
					))}
				</div>
			</section>

			<section className="space-y-8">
				<div className="border-b pb-4">
					<h3 className="text-2xl font-semibold">Overall Performance Impact</h3>
					<p className="text-muted-foreground mt-2">Cumulative improvements across all metrics</p>
				</div>

				<Card className="bg-muted/50">
					<CardContent className="py-6">
						<div className="grid md:grid-cols-2 gap-8">
							<div className="space-y-4">
								<h4 className="font-medium text-lg">Key Performance Gains</h4>
								<div className="grid gap-4">
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">Average Load Time Reduction</span>
										<span className="text-green-600 font-bold">85.5%</span>
									</div>
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">Overall Performance Score Increase</span>
										<span className="text-green-600 font-bold">111.1%</span>
									</div>
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">Mobile Experience Enhancement</span>
										<span className="text-green-600 font-bold">63.8%</span>
									</div>
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">SEO Improvement</span>
										<span className="text-green-600 font-bold">72.7%</span>
									</div>
								</div>
							</div>
							<div className="space-y-4">
								<h4 className="font-medium text-lg">Business Impact</h4>
								<div className="grid gap-4">
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">Conversion Rate Increase</span>
										<span className="text-green-600 font-bold">114.3%</span>
									</div>
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">Bounce Rate Reduction</span>
										<span className="text-green-600 font-bold">46.2%</span>
									</div>
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">User Engagement Improvement</span>
										<span className="text-green-600 font-bold">133.3%</span>
									</div>
									<div className="flex items-center justify-between p-3 bg-background rounded-lg">
										<span className="text-sm font-medium">Overall ROI</span>
										<span className="text-green-600 font-bold">89.4%</span>
									</div>
								</div>
							</div>
						</div>
					</CardContent>
				</Card>
			</section>

			<section className="space-y-8">
				<div className="border-b pb-4">
					<h3 className="text-2xl font-semibold">Why This Matters</h3>
					<p className="text-muted-foreground mt-2">Research-backed impact of website performance on business success</p>
				</div>

				<Card className="bg-neutral-50 dark:bg-neutral-800/50">
					<CardHeader>
						<CardTitle className="text-xl">Performance and Business Impact</CardTitle>
						<CardDescription>How website performance affects user behavior and business metrics</CardDescription>
					</CardHeader>
					<CardContent className="space-y-6">
						<div className="grid gap-4 sm:grid-cols-2">
							<StatisticCard title="Bounce Rate Impact" description="As page load time increases from 1s to 5s, the probability of bounce increases by 90%" source="Google Research (2023)" icon={BarChart} />
							<StatisticCard title="Conversion Rate Boost" description="Every 0.1s improvement in site speed can increase conversion rates by 8%" source="Deloitte Digital (2023)" icon={LineChart} />
							<StatisticCard title="User Retention" description="85% of users won't return to a site after a poor performance experience" source="Forrester Research" icon={PieChart} />
							<StatisticCard title="Revenue Growth" description="B2B companies with superior digital experiences generate 5x more revenue" source="McKinsey & Company" icon={LineChart} />
							<StatisticCard title="Conversion Sensitivity" description="A 100ms delay in website load time can hurt conversion rates by 7%" source="Akamai Technologies" icon={BarChart} />
							<StatisticCard title="Customer Loyalty" description="88% of users are less likely to return after a poor website experience" source="Forbes Insights" icon={PieChart} />
						</div>
						<div className="pt-4 border-t">
							<h4 className="text-sm font-semibold mb-2">Sources</h4>
							<p className="text-sm text-muted-foreground">Google Web Performance Studies, Deloitte Digital Performance Research, Forrester Customer Experience Index, McKinsey B2B Digital Experience Report, Akamai Performance Studies, Forbes Digital Transformation Insights</p>
						</div>
					</CardContent>
				</Card>
			</section>
		</div>
	);
}

function StatisticCard({ title, description, source, icon: Icon }: { title: string; description: string; source: string; icon: React.ElementType }) {
	return (
		<div className="bg-white dark:bg-neutral-700 p-4 rounded-lg shadow-sm">
			<div className="flex items-start gap-4">
				<div className="p-2 bg-primary/10 rounded-full">
					<Icon className="h-5 w-5 text-primary" />
				</div>
				<div className="space-y-1">
					<h5 className="font-medium">{title}</h5>
					<p className="text-sm text-muted-foreground">{description}</p>
					<p className="text-xs text-primary">{source}</p>
				</div>
			</div>
		</div>
	);
}

================
File: components/analysis/seo.tsx
================
"use client";

import { CheckCircle } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

interface SEOProps {
	seo: string;
	benchmarks: {
		seoScore: {
			optimized: number;
		};
	};
	seoMetrics: {
		keyOptimizations: {
			title: string;
			improvement?: string;
		}[];
	};
}

export default function SEO({ seo, benchmarks, seoMetrics }: SEOProps) {
	const { keyOptimizations } = seoMetrics;

	return (
		<section id="seo" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">SEO Improvements</CardTitle>
					<CardDescription>Comprehensive search engine optimization analysis</CardDescription>
				</CardHeader>
				<CardContent className="space-y-6">
					<div className="grid gap-6">
						<div className="space-y-2">
							<h3 className="font-semibold">SEO Score Improvement</h3>
							<p className="text-sm text-muted-foreground">{seo}</p>
						</div>
						<div className="grid gap-4">
							<div className="grid gap-2">
								<div className="font-semibold">Key Optimizations</div>
								<ul className="grid gap-2">
									{keyOptimizations.map((opt, index) => (
										<TechItem key={index} text={`${opt.title}${opt.improvement ? ` (${opt.improvement} improvement)` : ""}`} />
									))}
								</ul>
							</div>
						</div>
					</div>
					<div className="bg-muted rounded-lg p-4">
						<p className="font-semibold mb-2">Industry Insight:</p>
						<p className="text-sm text-muted-foreground">
							Websites on the first page of Google search results have an average SEO score of 80-100. Our optimized score of {benchmarks.seoScore.optimized}
							puts Impact Marine Group at the top of this range.
						</p>
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

function TechItem({ text }: { text: string }) {
	return (
		<li className="flex items-center gap-2">
			<CheckCircle className="h-4 w-4 text-primary flex-shrink-0" />
			<span className="text-sm text-muted-foreground">{text}</span>
		</li>
	);
}

================
File: components/analysis/technical.tsx
================
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle } from "lucide-react";

interface TechnicalMetrics {
	performanceOptimizations: string[];
	securityEnhancements: string[];
}

interface TechnicalProps {
	data: TechnicalMetrics;
}

export default function Technical({ data }: TechnicalProps) {
	return (
		<section id="technical" className="scroll-mt-28">
			<Card>
				<CardHeader>
					<CardTitle className="text-2xl">Technical Details</CardTitle>
					<CardDescription>Implementation specifics and optimizations</CardDescription>
				</CardHeader>
				<CardContent className="space-y-6">
					<div>
						<h3 className="font-semibold mb-2">Performance Optimizations</h3>
						<ul className="grid gap-2">
							{data.performanceOptimizations.map((text, i) => (
								<TechItem key={i} text={text} />
							))}
						</ul>
					</div>
					<div>
						<h3 className="font-semibold mb-2">Security Enhancements</h3>
						<ul className="grid gap-2">
							{data.securityEnhancements.map((text, i) => (
								<TechItem key={i} text={text} />
							))}
						</ul>
					</div>
				</CardContent>
			</Card>
		</section>
	);
}

function TechItem({ text }: { text: string }) {
	return (
		<li className="flex items-center gap-2">
			<CheckCircle className="h-4 w-4 text-primary flex-shrink-0" />
			<span className="text-sm text-muted-foreground">{text}</span>
		</li>
	);
}

================
File: components/charts/index.tsx
================
"use client";

import { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, BarChart, Bar, ResponsiveContainer } from "recharts";

export { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, BarChart, Bar, ResponsiveContainer };

================
File: components/footer.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import { Twitter, Youtube, Linkedin, Instagram } from "lucide-react";

export default function Footer() {
	return (
		<>
			<section className="relative bg-black overflow-hidden">
				{/* Main content */}
				<div className="relative z-10 max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
					<div className="grid lg:grid-cols-2 gap-12 items-center">
						<div className="space-y-8">
							<h2 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-white tracking-tight">Design and publish a site today.</h2>
							<p className="text-lg text-neutral-300 max-w-2xl">Get started with our website builder today. For seamless site migration and tailored support, explore enterprise.</p>
							<div className="flex flex-wrap gap-4">
								<Button asChild size="lg" className="bg-white text-black hover:bg-yellow-400 transition-colors duration-300">
									<Link href="/launch">Launch Your Site</Link>
								</Button>
								<Button asChild size="lg" variant="outline" className="border-white text-white hover:bg-yellow-400 hover:text-black hover:border-yellow-400 transition-colors duration-300">
									<Link href="/enterprise">Explore Enterprise</Link>
								</Button>
							</div>
						</div>

						<div className="relative lg:block">
							<Image src="https://placehold.co/600x800" width={800} height={600} alt="Interface preview" className="w-full h-auto rounded-lg shadow-2xl" priority />
						</div>
					</div>
				</div>

				{/* Bottom gradient */}
				<div
					className="absolute inset-x-0 bottom-0 z-0"
					style={{
						height: "50%",
						background: "linear-gradient(to top, #FFB800 10%, rgba(255, 184, 0, 0) 100%)",
						opacity: "0.15",
					}}
					aria-hidden="true"
				/>

				{/* Foreground glow effect */}
				<div
					className="absolute inset-x-0 bottom-0 z-20 pointer-events-none"
					style={{
						height: "50%",
						background: "linear-gradient(to top, rgba(255, 184, 0, 0.3) 10%, rgba(255, 184, 0, 0) 100%)",
						mixBlendMode: "screen",
					}}
					aria-hidden="true"
				/>
			</section>
			<footer className="bg-black text-white py-16">
				<div className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8">
					{/* Logo and Tagline */}
					<div className="mb-16">
						<Link href="/" className="inline-block">
							<h2 className="text-xl font-semibold">Byron Wade</h2>
						</Link>
						<p className="mt-2 text-sm text-neutral-400">Building the fastest websites on the internet</p>
					</div>

					{/* Navigation Grid */}
					<div className="grid grid-cols-2 md:grid-cols-5 gap-8 text-sm">
						<div className="space-y-4">
							<h3 className="text-neutral-400 uppercase text-xs font-medium tracking-wider">Resources</h3>
							<ul className="space-y-3">
								<li>
									<Link href="/academy" className="text-neutral-300 hover:text-white transition-colors">
										Academy
									</Link>
								</li>
								<li>
									<Link href="/marketplace" className="text-neutral-300 hover:text-white transition-colors">
										Marketplace
									</Link>
								</li>
								<li>
									<Link href="/app" className="text-neutral-300 hover:text-white transition-colors">
										Desktop App
									</Link>
								</li>
								<li>
									<Link href="/brand" className="text-neutral-300 hover:text-white transition-colors">
										Brand
									</Link>
								</li>
								<li>
									<Link href="/resources" className="text-neutral-300 hover:text-white transition-colors">
										Resources
									</Link>
								</li>
							</ul>
						</div>

						<div className="space-y-4">
							<h3 className="text-neutral-400 uppercase text-xs font-medium tracking-wider">Tools</h3>
							<ul className="space-y-3">
								<li>
									<Link href="/next" className="text-neutral-300 hover:text-white transition-colors">
										Next.js Tools
									</Link>
								</li>
								<li>
									<Link href="/sveltekit" className="text-neutral-300 hover:text-white transition-colors">
										SvelteKit Tools
									</Link>
								</li>
								<li>
									<Link href="/developers" className="text-neutral-300 hover:text-white transition-colors">
										Developers
									</Link>
								</li>
								<li>
									<Link href="/starter" className="text-neutral-300 hover:text-white transition-colors">
										Starter Kit
									</Link>
								</li>
							</ul>
						</div>

						<div className="space-y-4">
							<h3 className="text-neutral-400 uppercase text-xs font-medium tracking-wider">Company</h3>
							<ul className="space-y-3">
								<li>
									<Link href="/careers" className="text-neutral-300 hover:text-white transition-colors">
										Careers
									</Link>
								</li>
								<li>
									<Link href="/events" className="text-neutral-300 hover:text-white transition-colors">
										Events
									</Link>
								</li>
								<li>
									<Link href="/status" className="text-neutral-300 hover:text-white transition-colors">
										Status
									</Link>
								</li>
								<li>
									<Link href="/security" className="text-neutral-300 hover:text-white transition-colors">
										Security
									</Link>
								</li>
								<li>
									<Link href="/privacy" className="text-neutral-300 hover:text-white transition-colors">
										Privacy
									</Link>
								</li>
							</ul>
						</div>

						<div className="space-y-4">
							<h3 className="text-neutral-400 uppercase text-xs font-medium tracking-wider">Compare</h3>
							<ul className="space-y-3">
								<li>
									<Link href="/webflow" className="text-neutral-300 hover:text-white transition-colors">
										Webflow
									</Link>
								</li>
								<li>
									<Link href="/wordpress" className="text-neutral-300 hover:text-white transition-colors">
										WordPress
									</Link>
								</li>
								<li>
									<Link href="/contentful" className="text-neutral-300 hover:text-white transition-colors">
										Contentful
									</Link>
								</li>
								<li>
									<Link href="/shopify" className="text-neutral-300 hover:text-white transition-colors">
										Shopify
									</Link>
								</li>
							</ul>
						</div>

						<div className="space-y-4">
							<h3 className="text-neutral-400 uppercase text-xs font-medium tracking-wider">Legal</h3>
							<ul className="space-y-3">
								<li>
									<Link href="/abuse" className="text-neutral-300 hover:text-white transition-colors">
										Abuse
									</Link>
								</li>
								<li>
									<Link href="/charges" className="text-neutral-300 hover:text-white transition-colors">
										Charges
									</Link>
								</li>
								<li>
									<Link href="/cookies" className="text-neutral-300 hover:text-white transition-colors">
										Cookies
									</Link>
								</li>
								<li>
									<Link href="/terms" className="text-neutral-300 hover:text-white transition-colors">
										Terms
									</Link>
								</li>
							</ul>
						</div>
					</div>

					{/* Social Links */}
					<div className="mt-16 flex justify-end space-x-6">
						<a href="https://twitter.com" target="_blank" rel="noopener noreferrer" className="text-neutral-400 hover:text-white transition-colors">
							<span className="sr-only">Twitter</span>
							<Twitter className="h-6 w-6" />
						</a>
						<a href="https://youtube.com" target="_blank" rel="noopener noreferrer" className="text-neutral-400 hover:text-white transition-colors">
							<span className="sr-only">YouTube</span>
							<Youtube className="h-6 w-6" />
						</a>
						<a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" className="text-neutral-400 hover:text-white transition-colors">
							<span className="sr-only">LinkedIn</span>
							<Linkedin className="h-6 w-6" />
						</a>
						<a href="https://instagram.com" target="_blank" rel="noopener noreferrer" className="text-neutral-400 hover:text-white transition-colors">
							<span className="sr-only">Instagram</span>
							<Instagram className="h-6 w-6" />
						</a>
					</div>
				</div>
			</footer>
		</>
	);
}

================
File: components/header.tsx
================
"use client";

import * as React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Moon, Sun, Menu, X, SunMoon, Contrast } from "lucide-react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import dynamic from "next/dynamic";
import { customFont } from "@/lib/fonts";
import { useTheme } from "next-themes";

// Dynamically import and memoize the CodedText component
const CodedText = dynamic(() => import("@/components/ui/coded-text"));

const navItems = [
	{ name: "Design", href: "/design" },
	{ name: "Development", href: "/development" },
	{ name: "Marketing", href: "/marketing" },
	{ name: "Analysis", href: "/analysis" },
	{ name: "Blog", href: "/blog" },
	{ name: "Shop", href: "/shop" },
];

export default function Navbar({ className }: { className?: string }) {
	const [isScrolled, setIsScrolled] = React.useState(false);
	const [isMobileMenuOpen, setIsMobileMenuOpen] = React.useState(false);
	const pathname = usePathname();
	const { theme, setTheme } = useTheme();

	React.useEffect(() => {
		const handleScroll = () => {
			setIsScrolled(window.scrollY > 10);
		};
		window.addEventListener("scroll", handleScroll);
		return () => window.removeEventListener("scroll", handleScroll);
	}, []);

	const toggleTheme = () => {
		setTheme(theme === "dark" ? "light" : "dark");
	};

	const toggleMobileMenu = () => {
		setIsMobileMenuOpen(!isMobileMenuOpen);
	};

	return (
		<header className={cn("sticky top-0 left-0 right-0 z-50 transition-all duration-300 bg-white dark:bg-black", className)}>
			<div className="px-4">
				<div className="flex items-center justify-between h-16">
					<Link href="/" className="flex items-center space-x-3">
						<span className={`text-3xl font-bold ${customFont.className} hover:text-yellow-400 hover:underline`}>Byron Wade</span>
					</Link>

					<nav className="hidden lg:flex items-center absolute left-1/2 transform -translate-x-1/2 space-x-4">
						{navItems.map((item) => (
							<Link key={item.name} href={item.href} className={cn("text-sm font-medium transition-colors px-3 py-2", pathname.startsWith(item.href) ? "text-yellow-400 underline" : "hover:text-yellow-400")}>
								<CodedText>{item.name}</CodedText>
							</Link>
						))}
					</nav>

					<div className="flex items-center space-x-2">
						<Button variant="ghost" size="icon" onClick={toggleTheme} className="hover:bg-neutral-200 dark:hover:bg-neutral-900">
							{theme === "light" ? <Contrast className="h-4 w-4" /> : <SunMoon className="h-4 w-4" />}
							<span className="sr-only">Toggle theme</span>
						</Button>

						<Button variant="ghost" size="icon" className="lg:hidden hover:bg-neutral-200 dark:hover:bg-neutral-800" onClick={toggleMobileMenu}>
							{isMobileMenuOpen ? <X className="h-4 w-4" /> : <Menu className="h-4 w-4" />}
							<span className="sr-only">{isMobileMenuOpen ? "Close menu" : "Open menu"}</span>
						</Button>

						<Button asChild variant="default" className="bg-black text-white dark:bg-white dark:text-black hover:bg-yellow-400 hover:text-black dark:hover:bg-yellow-400 dark:hover:text-black">
							<Link href="/contact">
								<CodedText>Work with me</CodedText>
							</Link>
						</Button>
					</div>
				</div>
			</div>
			{isMobileMenuOpen && (
				<div className="lg:hidden bg-white dark:bg-black">
					<nav className="px-4 pt-2 pb-4 space-y-2">
						{navItems.map((item) => (
							<Link key={item.name} href={item.href} className={cn("block py-2 text-sm font-medium transition-colors", pathname.startsWith(item.href) ? "text-yellow-400" : "hover:text-yellow-400")} onClick={() => setIsMobileMenuOpen(false)}>
								{item.name}
							</Link>
						))}
						<Link href="/contact" className="block py-2 text-sm font-medium hover:text-yellow-400" onClick={() => setIsMobileMenuOpen(false)}>
							Work with me
						</Link>
					</nav>
				</div>
			)}
		</header>
	);
}

================
File: components/page-header.tsx
================
import CodedText from "@/components/ui/coded-text";
import Marquee from "@/components/ui/marquee";

interface PageHeaderProps {
	title: string;
	children: React.ReactNode;
}

const PageHeader: React.FC<PageHeaderProps> = ({ title, children }) => {
	return (
		<div className="relative">
			<div className="relative pb-10 sm:pb-16">
				<Marquee pauseOnHover repeat={30} className="[--duration:30s]">
					<h1 className="text-4xl sm:text-6xl md:text-7xl lg:text-8xl xl:text-9xl font-bold mr-4 sm:mr-8 md:mr-12 lg:mr-16 xl:mr-20 hover:text-yellow-400 hover:underline transition-colors duration-300">
						<CodedText>{title}</CodedText>
					</h1>
				</Marquee>
				<Marquee pauseOnHover className="[--duration:30s] -mt-1 sm:-mt-2 md:-mt-3 lg:-mt-4" reverse>
					{children}
				</Marquee>
			</div>
		</div>
	);
};

export default PageHeader;

================
File: components/sections/background.tsx
================
"use client";

import { useEffect, useRef, memo, useCallback, useMemo } from "react";
import { useTheme } from "next-themes";

interface Star {
	x: number;
	y: number;
	radius: number;
	color: string;
	magnitude: number;
	twinkleSpeed: number;
	twinklePhase: number;
}

interface MovingStar {
	x: number;
	y: number;
	radius: number;
	color: string;
	speed: number;
}

interface Meteor {
	x: number;
	y: number;
	length: number;
	angle: number;
	speed: number;
	opacity: number;
}

const Background = memo(() => {
	const canvasRef = useRef<HTMLCanvasElement | null>(null);
	const animationFrameIdRef = useRef<number | undefined>(undefined);
	const starsRef = useRef<Star[]>([]);
	const movingStarsRef = useRef<MovingStar[]>([]);
	const meteorsRef = useRef<Meteor[]>([]);
	const offscreenCanvasRef = useRef<HTMLCanvasElement | null>(null);
	const offscreenCtxRef = useRef<CanvasRenderingContext2D | null>(null);
	const { theme } = useTheme();

	const isDarkMode = theme === "dark";

	const starColors = useMemo(() => {
		return isDarkMode ? ["#FFFFFF", "#FFFFD4", "#FFE9B8", "#FFCAB0", "#FFB7B3"] : ["#000000", "#1A1A1A", "#333333", "#4D4D4D", "#666666"];
	}, [isDarkMode]);

	const drawStar = (ctx: CanvasRenderingContext2D, star: Star, time: number) => {
		const twinkle = Math.sin(time * star.twinkleSpeed + star.twinklePhase) * 0.2 + 0.8;
		const brightness = Math.max(0, Math.min(1, 1 / (star.magnitude * twinkle)));

		ctx.beginPath();
		ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
		ctx.fillStyle = star.color;
		ctx.globalAlpha = brightness;
		ctx.fill();
		ctx.globalAlpha = 1;
	};

	const drawMovingStar = (ctx: CanvasRenderingContext2D, star: MovingStar) => {
		ctx.beginPath();
		ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
		ctx.fillStyle = star.color;
		ctx.fill();
	};

	const initStars = useCallback(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		const starCount = Math.floor((canvas.width * canvas.height) / 1000);
		starsRef.current = Array.from({ length: starCount }, () => ({
			x: Math.random() * canvas.width,
			y: Math.random() * canvas.height,
			radius: Math.random() * 1.2 + 0.1,
			color: starColors[Math.floor(Math.random() * starColors.length)],
			magnitude: Math.random() * 2 + 3,
			twinkleSpeed: Math.random() * 0.03 + 0.01,
			twinklePhase: Math.random() * Math.PI * 2,
		}));
	}, [starColors]);

	const updateMovingStars = useCallback(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		movingStarsRef.current.forEach((star) => {
			star.y -= star.speed;
			if (star.y + star.radius < 0) {
				star.y = canvas.height + star.radius;
				star.x = Math.random() * canvas.width;
			}
		});
	}, []);

	const initMovingStars = useCallback(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		const movingStarCount = Math.floor(canvas.width / 15);
		const movingStarColors = isDarkMode ? ["#FFFFFF", "#FFFFD4", "#FFE9B8"] : ["#000000", "#1A1A1A", "#333333"];
		movingStarsRef.current = Array.from({ length: movingStarCount }, () => ({
			x: Math.random() * canvas.width,
			y: Math.random() * canvas.height,
			radius: Math.random() * 0.8 + 0.3,
			color: movingStarColors[Math.floor(Math.random() * movingStarColors.length)],
			speed: Math.random() * 0.3 + 0.4,
		}));
	}, [isDarkMode]);

	const createMeteor = useCallback(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		if (Math.random() > 0.99) {
			meteorsRef.current.push({
				x: Math.random() * canvas.width,
				y: 0,
				length: Math.random() * 100 + 50,
				angle: Math.PI / 4 + (Math.random() - 0.5) * 0.4,
				speed: Math.random() * 5 + 3,
				opacity: 1,
			});
		}
	}, []);

	const updateAndDrawMeteors = useCallback(
		(ctx: CanvasRenderingContext2D) => {
			const canvas = canvasRef.current;
			if (!canvas) return;

			meteorsRef.current = meteorsRef.current.filter((meteor) => meteor.opacity > 0 && meteor.y < canvas.height);

			meteorsRef.current.forEach((meteor) => {
				meteor.x += Math.cos(meteor.angle) * meteor.speed;
				meteor.y += Math.sin(meteor.angle) * meteor.speed;
				meteor.opacity -= 0.01;

				ctx.beginPath();
				ctx.moveTo(meteor.x, meteor.y);
				ctx.lineTo(meteor.x - Math.cos(meteor.angle) * meteor.length, meteor.y - Math.sin(meteor.angle) * meteor.length);
				const gradient = ctx.createLinearGradient(meteor.x, meteor.y, meteor.x - Math.cos(meteor.angle) * meteor.length, meteor.y - Math.sin(meteor.angle) * meteor.length);
				const color = isDarkMode ? "255, 255, 255" : "0, 0, 0";
				gradient.addColorStop(0, `rgba(${color}, ${meteor.opacity})`);
				gradient.addColorStop(1, `rgba(${color}, 0)`);
				ctx.strokeStyle = gradient;
				ctx.lineWidth = 2;
				ctx.stroke();
			});
		},
		[isDarkMode]
	);

	const resizeCanvas = useCallback(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
		offscreenCanvasRef.current!.width = canvas.width;
		offscreenCanvasRef.current!.height = canvas.height;
		initStars();
		initMovingStars();
	}, [initStars, initMovingStars]);

	const animate = useCallback(
		(time: number) => {
			const canvas = canvasRef.current;
			const offscreenCtx = offscreenCtxRef.current;
			if (!canvas || !offscreenCtx) return;

			offscreenCtx.clearRect(0, 0, canvas.width, canvas.height);
			starsRef.current.forEach((star) => drawStar(offscreenCtx, star, time));
			updateMovingStars();
			movingStarsRef.current.forEach((star) => drawMovingStar(offscreenCtx, star));
			createMeteor();
			updateAndDrawMeteors(offscreenCtx);

			const ctx = canvas.getContext("2d");
			if (ctx) {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				ctx.drawImage(offscreenCanvasRef.current!, 0, 0);
			}

			animationFrameIdRef.current = requestAnimationFrame(animate);
		},
		[createMeteor, updateAndDrawMeteors, updateMovingStars]
	);

	useEffect(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		offscreenCanvasRef.current = document.createElement("canvas");
		offscreenCtxRef.current = offscreenCanvasRef.current.getContext("2d");

		resizeCanvas();
		animationFrameIdRef.current = requestAnimationFrame(animate);

		window.addEventListener("resize", resizeCanvas);

		return () => {
			window.removeEventListener("resize", resizeCanvas);
			if (animationFrameIdRef.current) {
				cancelAnimationFrame(animationFrameIdRef.current);
			}
		};
	}, [resizeCanvas, animate]);

	useEffect(() => {
		initStars();
		initMovingStars();
	}, [theme, initStars, initMovingStars]);

	return <canvas ref={canvasRef} className="fixed inset-0 h-full w-full bg-white dark:bg-black transition-colors duration-300 -z-10" aria-hidden="true" />;
});

Background.displayName = "Background";

export default Background;

================
File: components/sections/cta.tsx
================
import { Vortex } from "@/components/ui/vortex";
import { Button } from "@/components/ui/button";

export default function CTA() {
	return (
		<section className="min-h-[100dvh] w-full flex items-center justify-center py-8 md:py-16 overflow-hidden">
			<div className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 w-full my-auto">
				<Vortex className="flex items-center flex-col justify-center px-4 sm:px-6 lg:px-10 py-12 sm:py-16 lg:py-20 w-full">
					<h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-center mb-6 sm:mb-8">The hell is this?</h2>
					<p className="text-base sm:text-lg md:text-xl lg:text-2xl max-w-2xl text-center mb-8 sm:mb-10">This is chemical burn. It&apos;ll hurt more than you&apos;ve ever been burned and you&apos;ll have a scar.</p>
					<div className="flex flex-col sm:flex-row items-center gap-4">
						<Button size="lg" variant="default" className="w-full sm:w-auto text-base sm:text-lg">
							Order now
						</Button>
						<Button size="lg" variant="secondary" className="w-full sm:w-auto text-base sm:text-lg">
							Watch trailer
						</Button>
					</div>
				</Vortex>
			</div>
		</section>
	);
}

================
File: components/sections/features.tsx
================
"use client";

import { Code2Icon, SearchIcon, RocketIcon, BarChartIcon, PenToolIcon, GlobeIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { BentoCard, BentoGrid } from "@/components/ui/bento-grid";
import Marquee from "@/components/ui/marquee";

const services = [
	{
		name: "Web Design",
		description: "Crafting visually stunning and user-friendly websites.",
	},
	{
		name: "Web Development",
		description: "Building high-performance websites with cutting-edge technologies.",
	},
	{
		name: "SEO Optimization",
		description: "Boosting your online visibility and search engine rankings.",
	},
	{
		name: "E-commerce Solutions",
		description: "Creating seamless online shopping experiences.",
	},
	{
		name: "Performance Optimization",
		description: "Enhancing website speed and user experience.",
	},
];

const features = [
	{
		Icon: PenToolIcon,
		name: "Web Design",
		description: "Create stunning, responsive websites that captivate your audience.",
		href: "#",
		cta: "Learn more",
		className: "col-span-3 lg:col-span-2",
		background: (
			<Marquee pauseOnHover className="absolute top-10 [--duration:20s] [mask-image:linear-gradient(to_top,transparent_40%,#000_100%)]">
				{services.map((service, idx) => (
					<figure key={idx} className={cn("relative w-48 cursor-pointer overflow-hidden rounded-xl border p-4 mr-4", "border-neutral-950/[.1] bg-neutral-950/[.01] hover:bg-neutral-950/[.05]", "dark:border-neutral-50/[.1] dark:bg-neutral-50/[.10] dark:hover:bg-neutral-50/[.15]", "transform-gpu blur-[1px] transition-all duration-300 ease-out hover:blur-none")}>
						<div className="flex flex-col">
							<figcaption className="text-sm font-medium dark:text-white">{service.name}</figcaption>
							<blockquote className="mt-2 text-xs">{service.description}</blockquote>
						</div>
					</figure>
				))}
			</Marquee>
		),
	},
	{
		Icon: Code2Icon,
		name: "Web Development",
		description: "Build lightning-fast websites with Next.js and SvelteKit.",
		href: "#",
		cta: "Explore our stack",
		className: "col-span-3 lg:col-span-1",
		background: (
			<div className="absolute inset-0 flex items-center justify-center">
				<div className="text-4xl font-bold text-primary/20">{"</>"}</div>
			</div>
		),
	},
	{
		Icon: SearchIcon,
		name: "SEO Optimization",
		description: "Boost your online presence with our expert SEO services.",
		href: "#",
		cta: "Improve your rankings",
		className: "col-span-3 lg:col-span-2",
		background: (
			<div className="absolute inset-0 flex items-center justify-center">
				<div className="w-24 h-24 border-4 border-primary/20 rounded-full flex items-center justify-center">
					<SearchIcon className="w-12 h-12 text-primary/40" />
				</div>
			</div>
		),
	},
	{
		Icon: RocketIcon,
		name: "Performance",
		description: "Optimize your website for lightning-fast load times.",
		className: "col-span-3 lg:col-span-1",
		href: "#",
		cta: "Speed up your site",
		background: (
			<div className="absolute inset-0 flex items-center justify-center">
				<RocketIcon className="w-16 h-16 text-primary/20 animate-pulse" />
			</div>
		),
	},
	{
		Icon: BarChartIcon,
		name: "Analytics",
		description: "Gain insights with our advanced analytics solutions.",
		href: "#",
		cta: "View demo",
		className: "col-span-3 lg:col-span-1",
		background: (
			<div className="absolute inset-0 flex items-center justify-center">
				<BarChartIcon className="w-16 h-16 text-primary/20" />
			</div>
		),
	},
	{
		Icon: GlobeIcon,
		name: "Local SEO",
		description: "Dominate local search results in Santa Cruz.",
		href: "#",
		cta: "Target local customers",
		className: "col-span-3 lg:col-span-2",
		background: (
			<div className="absolute inset-0 flex items-center justify-center">
				<div className="text-2xl font-bold text-primary/20">Santa Cruz</div>
			</div>
		),
	},
];

export default function Features() {
	return (
		<div className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 py-24 md:py-32 relative z-10">
			<BentoGrid>
				{features.map((feature, idx) => (
					<BentoCard key={idx} {...feature} className="bg-[#090909] border border-[#111111]" />
				))}
			</BentoGrid>
		</div>
	);
}

================
File: components/sections/hero-pages.tsx
================
import { ArrowRight, Zap, Paintbrush, Layers } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function HeroPages() {
	return (
		<section className="flex flex-col items-center justify-center py-12 text-center">
			<div className="container px-4">
				<div className="mb-8 flex justify-center">
					<div className="h-12 w-12">
						<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="h-full w-full">
							<rect x="3" y="3" width="18" height="18" rx="2" />
							<path d="M3 12h18M12 3v18" />
						</svg>
					</div>
				</div>

				<div className="mb-6 text-sm font-medium uppercase tracking-wider">Systems</div>

				<h1 className="mb-8 text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl lg:text-7xl">
					A system crafted for
					<br />
					team success and growth
				</h1>

				<div className="mb-12 flex flex-wrap justify-center gap-4">
					<Button asChild size="lg" className="h-12 px-6">
						<Link href="/">
							Get started <ArrowRight className="ml-2 h-5 w-5" />
						</Link>
					</Button>
					<Button asChild variant="outline" size="lg" className="h-12 px-6">
						<Link href="/docs">
							Read the docs <ArrowRight className="ml-2 h-5 w-5" />
						</Link>
					</Button>
				</div>

				<div className="flex flex-wrap justify-center gap-x-12 gap-y-4 text-muted-foreground">
					<div className="flex items-center gap-2">
						<Zap className="h-5 w-5" />
						<span>Quick setup guide</span>
					</div>
					<div className="flex items-center gap-2">
						<Paintbrush className="h-5 w-5" />
						<span>Fully customizable</span>
					</div>
					<div className="flex items-center gap-2">
						<Layers className="h-5 w-5" />
						<span>Easy to use components</span>
					</div>
				</div>
			</div>
		</section>
	);
}

================
File: components/sections/hero.tsx
================
// @ts-nocheck
"use client";

import Image from "next/image";
import Link from "next/link";
import { Zap } from "lucide-react";
import { useEffect, useRef } from "react";
import dynamic from "next/dynamic";
import { motion, useMotionValue, useSpring } from "framer-motion";

const CodedText = dynamic(() => import("@/components/ui/coded-text"), { ssr: false });

const Hero = () => {
	const mouseX = useMotionValue(0);
	const mouseY = useMotionValue(0);

	// Create smooth spring animations for x and y movement
	const springConfig = { damping: 50, stiffness: 400, mass: 0.5 };
	const x = useSpring(mouseX, springConfig);
	const y = useSpring(mouseY, springConfig);

	useEffect(() => {
		const handleMouseMove = (e: MouseEvent) => {
			// Calculate movement based on cursor position
			// Divide by larger numbers to make the movement more subtle
			mouseX.set(e.clientX / 20);
			mouseY.set(e.clientY / 20);
		};

		window.addEventListener("mousemove", handleMouseMove);
		return () => window.removeEventListener("mousemove", handleMouseMove);
	}, [mouseX, mouseY]);

	const containerVariants = {
		hidden: { opacity: 0 },
		visible: {
			opacity: 1,
			transition: {
				staggerChildren: 0.2,
			},
		},
	};

	const itemVariants = {
		hidden: { opacity: 0, y: 20 },
		visible: {
			opacity: 1,
			y: 0,
			transition: {
				duration: 0.6,
				ease: "easeOut",
			},
		},
	};

	const textVariants = {
		hidden: { opacity: 0, x: -50 },
		visible: {
			opacity: 1,
			x: 0,
			transition: {
				duration: 0.6,
				ease: "easeOut",
			},
		},
	};

	const highlightVariants = {
		hidden: { opacity: 0, x: 50 },
		visible: {
			opacity: 1,
			x: 0,
			transition: {
				duration: 0.6,
				ease: "easeOut",
			},
		},
	};

	return (
		<section className="min-h-[calc(100dvh-100px)] flex items-center justify-center py-8 md:py-16 lg:py-0">
			<div className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 w-full my-auto">
				<div className="grid md:grid-cols-2 gap-8 md:gap-12 items-center">
					<motion.div variants={containerVariants} initial="hidden" animate="visible" className="space-y-4 md:space-y-6 lg:space-y-8">
						<motion.h1 className="text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold leading-tight">
							<motion.span variants={textVariants} className="inline-block">
								Launch Your Business with
							</motion.span>{" "}
							<motion.span variants={highlightVariants} className="inline-block bg-clip-text text-transparent bg-gradient-to-r from-yellow-400 to-yellow-600">
								Warp-Speed
							</motion.span>{" "}
							<motion.span variants={textVariants} className="inline-block">
								Websites
							</motion.span>
						</motion.h1>

						<motion.p variants={itemVariants} className="text-base sm:text-lg lg:text-xl xl:text-2xl text-neutral-700 dark:text-neutral-300">
							Propelling Jasper, Georgia businesses into the digital stratosphere with websites that load at light speed, outrank the competition, and convert visitors into loyal customers.
						</motion.p>

						<motion.div variants={itemVariants} className="flex flex-col sm:flex-row gap-4 items-start sm:items-center">
							<Link href="/contact" className="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-black bg-yellow-400 hover:bg-yellow-500 transition duration-150 ease-in-out">
								<CodedText>Launch Your Mission</CodedText>
								<Zap className="ml-2 -mr-1 h-5 w-5" />
							</Link>
							<Link href="/projects" className="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 border border-yellow-400 text-base font-medium rounded-md text-yellow-400 hover:bg-yellow-400 hover:text-black transition duration-150 ease-in-out">
								<CodedText>Explore Our Galaxy of Work</CodedText>
							</Link>
						</motion.div>

						<motion.div variants={itemVariants} className="flex flex-col sm:flex-row items-start sm:items-center gap-4 text-xs sm:text-sm">
							<motion.div variants={textVariants} className="flex items-center">
								<Zap className="h-5 w-5 text-yellow-400 mr-2 flex-shrink-0" />
								<span>50% Faster Than Light-Speed Loading</span>
							</motion.div>
							<motion.div variants={highlightVariants} className="flex items-center">
								<Zap className="h-5 w-5 text-yellow-400 mr-2 flex-shrink-0" />
								<span>200% Boost in Orbital Rankings</span>
							</motion.div>
						</motion.div>
					</motion.div>

					<motion.div
						style={{
							x,
							y,
						}}
						initial={{ opacity: 0, scale: 0.8 }}
						animate={{ opacity: 1, scale: 1 }}
						className="relative md:sticky md:top-24 mt-4 md:mt-0"
					>
						<Image src="/astronaut.svg" alt="Astronaut piloting blazing fast websites for Jasper, Georgia businesses" width={600} height={600} className="dark:invert max-w-full h-auto" priority />
					</motion.div>
				</div>
			</div>
		</section>
	);
};

export default Hero;

================
File: components/ui/accordion.tsx
================
"use client";

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<React.ElementRef<typeof AccordionPrimitive.Item>, React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>>(({ className, ...props }, ref) => <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />);
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<React.ElementRef<typeof AccordionPrimitive.Trigger>, React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>>(({ className, children, ...props }, ref) => (
	<AccordionPrimitive.Header className="flex">
		<AccordionPrimitive.Trigger ref={ref} className={cn("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180", className)} {...props}>
			{children}
			<ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
		</AccordionPrimitive.Trigger>
	</AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<React.ElementRef<typeof AccordionPrimitive.Content>, React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>>(({ className, children, ...props }, ref) => (
	<AccordionPrimitive.Content ref={ref} className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down" {...props}>
		<div className={cn("pb-4 pt-0", className)}>{children}</div>
	</AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.tsx
================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "../../lib/utils";

const Avatar = React.forwardRef<React.ElementRef<typeof AvatarPrimitive.Root>, React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>>(({ className, ...props }, ref) => <AvatarPrimitive.Root ref={ref} className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)} {...props} />);
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<React.ElementRef<typeof AvatarPrimitive.Image>, React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>>(({ className, ...props }, ref) => <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />);
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<React.ElementRef<typeof AvatarPrimitive.Fallback>, React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>>(({ className, ...props }, ref) => <AvatarPrimitive.Fallback ref={ref} className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)} {...props} />);
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };

================
File: components/ui/badge.tsx
================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const badgeVariants = cva("inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2", {
	variants: {
		variant: {
			default: "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
			secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
			destructive: "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
			outline: "text-foreground",
		},
	},
	defaultVariants: {
		variant: "default",
	},
});

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
	return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
}

export { Badge, badgeVariants };

================
File: components/ui/bento-grid.tsx
================
import { ReactNode } from "react";
import { ArrowRightIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

const BentoGrid = ({ children, className }: { children: ReactNode; className?: string }) => {
	return <div className={cn("grid w-full auto-rows-[22rem] grid-cols-3 gap-4", className)}>{children}</div>;
};

const BentoCard = ({ name, className, background, Icon, description, href, cta }: { name: string; className: string; background: ReactNode; Icon: any; description: string; href: string; cta: string }) => (
	<div
		key={name}
		className={cn(
			"group relative col-span-3 flex flex-col justify-between overflow-hidden rounded-xl",
			// light styles
			"bg-white [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)]",
			// dark styles
			"transform-gpu dark:bg-black dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset]",
			className
		)}
	>
		<div>{background}</div>
		<div className="pointer-events-none z-10 flex transform-gpu flex-col gap-1 p-6 transition-all duration-300 group-hover:-translate-y-10">
			<Icon className="h-12 w-12 origin-left transform-gpu text-neutral-700 transition-all duration-300 ease-in-out group-hover:scale-75" />
			<h3 className="text-xl font-semibold text-neutral-700 dark:text-neutral-300">{name}</h3>
			<p className="max-w-lg text-neutral-400">{description}</p>
		</div>

		<div className={cn("pointer-events-none absolute bottom-0 flex w-full translate-y-10 transform-gpu flex-row items-center p-4 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100")}>
			<Button variant="ghost" asChild size="sm" className="pointer-events-auto">
				<a href={href}>
					{cta}
					<ArrowRightIcon className="ml-2 h-4 w-4" />
				</a>
			</Button>
		</div>
		<div className="pointer-events-none absolute inset-0 transform-gpu transition-all duration-300 group-hover:bg-black/[.03] group-hover:dark:bg-neutral-800/10" />
	</div>
);

export { BentoCard, BentoGrid };

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons"
import { Slot } from "@radix-ui/react-slot"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRightIcon />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50", {
	variants: {
		variant: {
			default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
			destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
			outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
			secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
			ghost: "hover:bg-accent hover:text-accent-foreground",
			link: "text-primary underline-offset-4 hover:underline",
		},
		size: {
			default: "h-9 px-4 py-2",
			sm: "h-8 rounded-md px-3 text-xs",
			lg: "h-10 rounded-md px-8",
			icon: "h-9 w-9",
		},
	},
	defaultVariants: {
		variant: "default",
		size: "default",
	},
});

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
	asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) => {
	const Comp = asChild ? Slot : "button";
	return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
});
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeftIcon className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRightIcon className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => <div ref={ref} className={cn("rounded-xl border bg-card text-card-foreground shadow", className)} {...props} />);
Card.displayName = "Card";

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />);
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(({ className, ...props }, ref) => <h3 ref={ref} className={cn("font-semibold leading-none tracking-tight", className)} {...props} />);
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />);
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />);
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />);
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import { ArrowLeftIcon, ArrowRightIcon } from "@radix-ui/react-icons"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeftIcon className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRightIcon className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client";

import * as React from "react";
import * as RechartsPrimitive from "recharts";
import { NameType, Payload, ValueType } from "recharts/types/component/DefaultTooltipContent";

import { cn } from "../../lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
	[k in string]: {
		label?: React.ReactNode;
		icon?: React.ComponentType;
	} & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });
};

type ChartContextProps = {
	config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
	const context = React.useContext(ChartContext);

	if (!context) {
		throw new Error("useChart must be used within a <ChartContainer />");
	}

	return context;
}

const ChartContainer = React.forwardRef<
	HTMLDivElement,
	React.ComponentProps<"div"> & {
		config: ChartConfig;
		children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>["children"];
	}
>(({ id, className, children, config, ...props }, ref) => {
	const uniqueId = React.useId();
	const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

	return (
		<ChartContext.Provider value={{ config }}>
			<div
				data-chart={chartId}
				ref={ref}
				className={cn(
					"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
					className
				)}
				{...props}
			>
				<ChartStyle id={chartId} config={config} />
				<RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
			</div>
		</ChartContext.Provider>
	);
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
	const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);

	if (!colorConfig.length) {
		return null;
	}

	return (
		<style
			dangerouslySetInnerHTML={{
				__html: Object.entries(THEMES)
					.map(
						([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
	.map(([key, itemConfig]) => {
		const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;
		return color ? `  --color-${key}: ${color};` : null;
	})
	.join("\n")}
}
`
					)
					.join("\n"),
			}}
		/>
	);
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
	HTMLDivElement,
	React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
		React.ComponentProps<"div"> & {
			hideLabel?: boolean;
			hideIndicator?: boolean;
			indicator?: "line" | "dot" | "dashed";
			nameKey?: string;
			labelKey?: string;
		}
>(({ active, payload, className, indicator = "dot", hideLabel = false, hideIndicator = false, label, labelFormatter, labelClassName, formatter, color, nameKey, labelKey }, ref) => {
	const { config } = useChart();

	const tooltipLabel = React.useMemo(() => {
		if (hideLabel || !payload?.length) {
			return null;
		}

		const [item] = payload;
		const key = `${labelKey || item.dataKey || item.name || "value"}`;
		const itemConfig = getPayloadConfigFromPayload(config, item, key);
		const value = !labelKey && typeof label === "string" ? config[label as keyof typeof config]?.label || label : itemConfig?.label;

		if (labelFormatter) {
			return <div className={cn("font-medium", labelClassName)}>{labelFormatter(value, payload)}</div>;
		}

		if (!value) {
			return null;
		}

		return <div className={cn("font-medium", labelClassName)}>{value}</div>;
	}, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);

	if (!active || !payload?.length) {
		return null;
	}

	const nestLabel = payload.length === 1 && indicator !== "dot";

	return (
		<div ref={ref} className={cn("grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl", className)}>
			{!nestLabel ? tooltipLabel : null}
			<div className="grid gap-1.5">
				{payload.map((item, index) => {
					const key = `${nameKey || item.name || item.dataKey || "value"}`;
					const itemConfig = getPayloadConfigFromPayload(config, item, key);
					const indicatorColor = color || item.payload.fill || item.color;

					return (
						<div key={item.dataKey} className={cn("flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground", indicator === "dot" && "items-center")}>
							{formatter && item?.value !== undefined && item.name ? (
								formatter(item.value, item.name, item, index, item.payload)
							) : (
								<>
									{itemConfig?.icon ? (
										<itemConfig.icon />
									) : (
										!hideIndicator && (
											<div
												className={cn("shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]", {
													"h-2.5 w-2.5": indicator === "dot",
													"w-1": indicator === "line",
													"w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
													"my-0.5": nestLabel && indicator === "dashed",
												})}
												style={
													{
														"--color-bg": indicatorColor,
														"--color-border": indicatorColor,
													} as React.CSSProperties
												}
											/>
										)
									)}
									<div className={cn("flex flex-1 justify-between leading-none", nestLabel ? "items-end" : "items-center")}>
										<div className="grid gap-1.5">
											{nestLabel ? tooltipLabel : null}
											<span className="text-muted-foreground">{itemConfig?.label || item.name}</span>
										</div>
										{item.value && <span className="font-mono font-medium tabular-nums text-foreground">{item.value.toLocaleString()}</span>}
									</div>
								</>
							)}
						</div>
					);
				})}
			</div>
		</div>
	);
});
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
	HTMLDivElement,
	React.ComponentProps<"div"> &
		Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
			hideIcon?: boolean;
			nameKey?: string;
		}
>(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
	const { config } = useChart();

	if (!payload?.length) {
		return null;
	}

	return (
		<div ref={ref} className={cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className)}>
			{payload.map((item) => {
				const key = `${nameKey || item.dataKey || "value"}`;
				const itemConfig = getPayloadConfigFromPayload(config, item, key);

				return (
					<div key={item.value} className={cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground")}>
						{itemConfig?.icon && !hideIcon ? (
							<itemConfig.icon />
						) : (
							<div
								className="h-2 w-2 shrink-0 rounded-[2px]"
								style={{
									backgroundColor: item.color,
								}}
							/>
						)}
						{itemConfig?.label}
					</div>
				);
			})}
		</div>
	);
});
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
	if (typeof payload !== "object" || payload === null) {
		return undefined;
	}

	const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : undefined;

	let configLabelKey: string = key;

	if (key in payload && typeof payload[key as keyof typeof payload] === "string") {
		configLabelKey = payload[key as keyof typeof payload] as string;
	} else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key as keyof typeof payloadPayload] === "string") {
		configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;
	}

	return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];
}

export { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };

================
File: components/ui/checkbox.tsx
================
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { CheckIcon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const Checkbox = React.forwardRef<React.ElementRef<typeof CheckboxPrimitive.Root>, React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>>(({ className, ...props }, ref) => (
	<CheckboxPrimitive.Root ref={ref} className={cn("peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground", className)} {...props}>
		<CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
			<CheckIcon className="h-4 w-4" />
		</CheckboxPrimitive.Indicator>
	</CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };

================
File: components/ui/coded-text.tsx
================
"use client";

import { useEffect, useRef, memo } from "react";

const ANIMATION_DURATION = 500;
const EXTRA_WIDTH = 5;

const CodedText: React.FC<{ children: React.ReactNode; className?: string }> = ({ children, className }) => {
	const containerRef = useRef<HTMLDivElement>(null);
	const elementRef = useRef<HTMLSpanElement>(null);

	useEffect(() => {
		const element = elementRef.current;
		if (!element) return;

		const originalText = element.textContent ?? "";

		const handleMouseEnter = () => {
			const startTime = performance.now();

			const intervalId = element.getAttribute("data-interval");
			if (intervalId) clearInterval(Number(intervalId));

			const newInterval = setInterval(() => {
				const elapsedTime = performance.now() - startTime;
				const progress = Math.min(elapsedTime / ANIMATION_DURATION, 1);

				element.innerText = originalText
					.split("")
					.map((char, index) => {
						if (index < originalText.length * progress) {
							return originalText[index];
						}
						return String.fromCharCode(Math.random() * 128);
					})
					.join("");

				if (progress === 1) {
					clearInterval(newInterval);
					element.removeAttribute("data-interval");
				}
			}, 20);

			element.setAttribute("data-interval", newInterval.toString());
		};

		const handleMouseLeave = () => {
			const intervalId = element.getAttribute("data-interval");
			if (intervalId) {
				clearInterval(Number(intervalId));
				element.removeAttribute("data-interval");
			}
			element.innerText = originalText;
		};

		element.addEventListener("mouseenter", handleMouseEnter);
		element.addEventListener("mouseleave", handleMouseLeave);

		const { width, height } = element.getBoundingClientRect();
		if (containerRef.current) {
			containerRef.current.style.width = `${width + EXTRA_WIDTH}px`;
			containerRef.current.style.height = `${height}px`;
		}

		return () => {
			element.removeEventListener("mouseenter", handleMouseEnter);
			element.removeEventListener("mouseleave", handleMouseLeave);
		};
	}, []);

	return (
		<div ref={containerRef} className="inline-block overflow-hidden">
			<span ref={elementRef} className={`text-center block ${className} h-full`}>
				{children}
			</span>
		</div>
	);
};

export default memo(CodedText);

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client";

import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { Command as CommandPrimitive } from "cmdk";

import { cn } from "../../lib/utils";
import { Dialog, DialogContent } from "./dialog";

const Command = React.forwardRef<React.ElementRef<typeof CommandPrimitive>, React.ComponentPropsWithoutRef<typeof CommandPrimitive>>(({ className, ...props }, ref) => <CommandPrimitive ref={ref} className={cn("flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground", className)} {...props} />);
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
	return (
		<Dialog {...props}>
			<DialogContent className="overflow-hidden p-0">
				<Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">{children}</Command>
			</DialogContent>
		</Dialog>
	);
};

const CommandInput = React.forwardRef<React.ElementRef<typeof CommandPrimitive.Input>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>>(({ className, ...props }, ref) => (
	<div className="flex items-center border-b px-3" cmdk-input-wrapper="">
		<MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
		<CommandPrimitive.Input ref={ref} className={cn("flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50", className)} {...props} />
	</div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<React.ElementRef<typeof CommandPrimitive.List>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>>(({ className, ...props }, ref) => <CommandPrimitive.List ref={ref} className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)} {...props} />);

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<React.ElementRef<typeof CommandPrimitive.Empty>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>>((props, ref) => <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />);

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<React.ElementRef<typeof CommandPrimitive.Group>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>>(({ className, ...props }, ref) => <CommandPrimitive.Group ref={ref} className={cn("overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground", className)} {...props} />);

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<React.ElementRef<typeof CommandPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>>(({ className, ...props }, ref) => <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />);
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<React.ElementRef<typeof CommandPrimitive.Item>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>>(({ className, ...props }, ref) => (
	<CommandPrimitive.Item ref={ref} className={cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50", className)} {...props} />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
	return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
CommandShortcut.displayName = "CommandShortcut";

export { Command, CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem, CommandShortcut, CommandSeparator };

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.tsx
================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>>(({ className, ...props }, ref) => <DialogPrimitive.Overlay ref={ref} className={cn("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", className)} {...props} />);
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>>(({ className, children, ...props }, ref) => (
	<DialogPortal>
		<DialogOverlay />
		<DialogPrimitive.Content
			ref={ref}
			className={cn(
				"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
				className
			)}
			{...props}
		>
			{children}
			<DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
				<Cross2Icon className="h-4 w-4" />
				<span className="sr-only">Close</span>
			</DialogPrimitive.Close>
		</DialogPrimitive.Content>
	</DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />;
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />;
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>>(({ className, ...props }, ref) => <DialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold leading-none tracking-tight", className)} {...props} />);
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Description>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>>(({ className, ...props }, ref) => <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />);
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export { Dialog, DialogPortal, DialogOverlay, DialogTrigger, DialogClose, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription };

================
File: components/ui/drawer.tsx
================
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "../../lib/utils";

const Drawer = ({ shouldScaleBackground = true, ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) => <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />;
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<React.ElementRef<typeof DrawerPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>>(({ className, ...props }, ref) => <DrawerPrimitive.Overlay ref={ref} className={cn("fixed inset-0 z-50 bg-black/80", className)} {...props} />);
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<React.ElementRef<typeof DrawerPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>>(({ className, children, ...props }, ref) => (
	<DrawerPortal>
		<DrawerOverlay />
		<DrawerPrimitive.Content ref={ref} className={cn("fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background", className)} {...props}>
			<div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
			{children}
		</DrawerPrimitive.Content>
	</DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)} {...props} />;
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />;
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<React.ElementRef<typeof DrawerPrimitive.Title>, React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>>(({ className, ...props }, ref) => <DrawerPrimitive.Title ref={ref} className={cn("text-lg font-semibold leading-none tracking-tight", className)} {...props} />);
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<React.ElementRef<typeof DrawerPrimitive.Description>, React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>>(({ className, ...props }, ref) => <DrawerPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />);
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export { Drawer, DrawerPortal, DrawerOverlay, DrawerTrigger, DrawerClose, DrawerContent, DrawerHeader, DrawerFooter, DrawerTitle, DrawerDescription };

================
File: components/ui/dropdown-menu.tsx
================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ChevronRightIcon, DotFilledIcon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
	React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
		inset?: boolean;
	}
>(({ className, inset, children, ...props }, ref) => (
	<DropdownMenuPrimitive.SubTrigger ref={ref} className={cn("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent", inset && "pl-8", className)} {...props}>
		{children}
		<ChevronRightIcon className="ml-auto h-4 w-4" />
	</DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<React.ElementRef<typeof DropdownMenuPrimitive.SubContent>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>>(({ className, ...props }, ref) => (
	<DropdownMenuPrimitive.SubContent
		ref={ref}
		className={cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className)}
		{...props}
	/>
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<React.ElementRef<typeof DropdownMenuPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>>(({ className, sideOffset = 4, ...props }, ref) => (
	<DropdownMenuPrimitive.Portal>
		<DropdownMenuPrimitive.Content
			ref={ref}
			sideOffset={sideOffset}
			className={cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md", "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className)}
			{...props}
		/>
	</DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.Item>,
	React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
		inset?: boolean;
	}
>(({ className, inset, ...props }, ref) => <DropdownMenuPrimitive.Item ref={ref} className={cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", inset && "pl-8", className)} {...props} />);
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>>(({ className, children, checked, ...props }, ref) => (
	<DropdownMenuPrimitive.CheckboxItem ref={ref} className={cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className)} checked={checked} {...props}>
		<span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<DropdownMenuPrimitive.ItemIndicator>
				<CheckIcon className="h-4 w-4" />
			</DropdownMenuPrimitive.ItemIndicator>
		</span>
		{children}
	</DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>>(({ className, children, ...props }, ref) => (
	<DropdownMenuPrimitive.RadioItem ref={ref} className={cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className)} {...props}>
		<span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<DropdownMenuPrimitive.ItemIndicator>
				<DotFilledIcon className="h-4 w-4 fill-current" />
			</DropdownMenuPrimitive.ItemIndicator>
		</span>
		{children}
	</DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
	React.ElementRef<typeof DropdownMenuPrimitive.Label>,
	React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
		inset?: boolean;
	}
>(({ className, inset, ...props }, ref) => <DropdownMenuPrimitive.Label ref={ref} className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)} {...props} />);
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<React.ElementRef<typeof DropdownMenuPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>>(({ className, ...props }, ref) => <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />);
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
	return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />;
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuCheckboxItem, DropdownMenuRadioItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuGroup, DropdownMenuPortal, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuRadioGroup };

================
File: components/ui/form.tsx
================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "../../lib/utils";
import { Label } from "./label";

const Form = FormProvider;

type FormFieldContextValue<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = {
	name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);

const FormField = <TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>({ ...props }: ControllerProps<TFieldValues, TName>) => {
	return (
		<FormFieldContext.Provider value={{ name: props.name }}>
			<Controller {...props} />
		</FormFieldContext.Provider>
	);
};

const useFormField = () => {
	const fieldContext = React.useContext(FormFieldContext);
	const itemContext = React.useContext(FormItemContext);
	const { getFieldState, formState } = useFormContext();

	const fieldState = getFieldState(fieldContext.name, formState);

	if (!fieldContext) {
		throw new Error("useFormField should be used within <FormField>");
	}

	const { id } = itemContext;

	return {
		id,
		name: fieldContext.name,
		formItemId: `${id}-form-item`,
		formDescriptionId: `${id}-form-item-description`,
		formMessageId: `${id}-form-item-message`,
		...fieldState,
	};
};

type FormItemContextValue = {
	id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);

const FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => {
	const id = React.useId();

	return (
		<FormItemContext.Provider value={{ id }}>
			<div ref={ref} className={cn("space-y-2", className)} {...props} />
		</FormItemContext.Provider>
	);
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<React.ElementRef<typeof LabelPrimitive.Root>, React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>>(({ className, ...props }, ref) => {
	const { error, formItemId } = useFormField();

	return <Label ref={ref} className={cn(error && "text-destructive", className)} htmlFor={formItemId} {...props} />;
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(({ ...props }, ref) => {
	const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

	return <Slot ref={ref} id={formItemId} aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`} aria-invalid={!!error} {...props} />;
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => {
	const { formDescriptionId } = useFormField();

	return <p ref={ref} id={formDescriptionId} className={cn("text-[0.8rem] text-muted-foreground", className)} {...props} />;
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, children, ...props }, ref) => {
	const { error, formMessageId } = useFormField();
	const body = error ? String(error?.message) : children;

	if (!body) {
		return null;
	}

	return (
		<p ref={ref} id={formMessageId} className={cn("text-[0.8rem] font-medium text-destructive", className)} {...props}>
			{body}
		</p>
	);
});
FormMessage.displayName = "FormMessage";

export { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/index.ts
================
export { Button } from "./button";
export { Alert, AlertDescription, AlertTitle } from "./alert";
export { Sheet, SheetContent, SheetHeader, SheetTitle } from "./sheet";
export { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./card";

================
File: components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { DashIcon } from "@radix-ui/react-icons"
import { OTPInput, OTPInputContext } from "input-otp"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <DashIcon />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: components/ui/input.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {
	return <input type={type} className={cn("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", className)} ref={ref} {...props} />;
});
Input.displayName = "Input";

export { Input };

================
File: components/ui/label.tsx
================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70");

const Label = React.forwardRef<React.ElementRef<typeof LabelPrimitive.Root>, React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>>(({ className, ...props }, ref) => <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />);
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

================
File: components/ui/marquee.tsx
================
import React from "react";
import { cn } from "@/lib/utils";

interface MarqueeProps {
	className?: string;
	reverse?: boolean;
	pauseOnHover?: boolean;
	children?: React.ReactNode;
	vertical?: boolean;
	repeat?: number;
	[key: string]: any;
}

export default function Marquee({ className, reverse, pauseOnHover = false, children, vertical = false, repeat = 4, ...props }: MarqueeProps) {
	return (
		<div
			{...props}
			className={cn(
				"group flex overflow-hidden p-2 [--duration:40s] [--gap:0.5rem] sm:[--gap:0.75rem] md:[--gap:1rem] [gap:var(--gap)]",
				{
					"flex-row": !vertical,
					"flex-col": vertical,
				},
				className
			)}
		>
			{Array(repeat)
				.fill(0)
				.map((_, i) => (
					<div
						key={i}
						className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
							"animate-marquee flex-row": !vertical,
							"animate-marquee-vertical flex-col": vertical,
							"group-hover:[animation-play-state:paused]": pauseOnHover,
							"[animation-direction:reverse]": reverse,
						})}
					>
						{children}
					</div>
				))}
		</div>
	);
}

================
File: components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons"
import * as MenubarPrimitive from "@radix-ui/react-menubar"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import { ChevronDownIcon } from "@radix-ui/react-icons"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/orbiting-circles.tsx
================
import { cn } from "@/lib/utils";

export interface OrbitingCirclesProps {
  className?: string;
  children?: React.ReactNode;
  reverse?: boolean;
  duration?: number;
  delay?: number;
  radius?: number;
  path?: boolean;
}

export default function OrbitingCircles({
  className,
  children,
  reverse,
  duration = 20,
  delay = 10,
  radius = 50,
  path = true,
}: OrbitingCirclesProps) {
  return (
    <>
      {path && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          version="1.1"
          className="pointer-events-none absolute inset-0 size-full"
        >
          <circle
            className="stroke-black/10 stroke-1 dark:stroke-white/10"
            cx="50%"
            cy="50%"
            r={radius}
            fill="none"
          />
        </svg>
      )}

      <div
        style={
          {
            "--duration": duration,
            "--radius": radius,
            "--delay": -delay,
          } as React.CSSProperties
        }
        className={cn(
          "absolute flex size-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1000ms)] dark:bg-white/10",
          { "[animation-direction:reverse]": reverse },
          className,
        )}
      >
        {children}
      </div>
    </>
  );
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DotsHorizontalIcon,
} from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeftIcon className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRightIcon className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: components/ui/progress.tsx
================
"use client";

import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "../../lib/utils";

const Progress = React.forwardRef<React.ElementRef<typeof ProgressPrimitive.Root>, React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>>(({ className, value, ...props }, ref) => (
	<ProgressPrimitive.Root ref={ref} className={cn("relative h-2 w-full overflow-hidden rounded-full bg-primary/20", className)} {...props}>
		<ProgressPrimitive.Indicator className="h-full w-full flex-1 bg-primary transition-all" style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
	</ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import { CheckIcon } from "@radix-ui/react-icons"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <CheckIcon className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/resizable.tsx
================
"use client"

import { DragHandleDots2Icon } from "@radix-ui/react-icons"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/scroll-based-velocity.tsx
================
"use client";

import React, { useEffect, useRef, useState } from "react";
import { motion, useAnimationFrame, useMotionValue, useScroll, useSpring, useTransform, useVelocity } from "framer-motion";

import { cn } from "@/lib/utils";

interface VelocityScrollProps {
	text: string;
	default_velocity?: number;
	className?: string;
}

interface ParallaxProps {
	children: string;
	baseVelocity: number;
	className?: string;
}

export const wrap = (min: number, max: number, v: number) => {
	const rangeSize = max - min;
	return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;
};

export function VelocityScroll({ text, default_velocity = 5, className }: VelocityScrollProps) {
	function ParallaxText({ children, baseVelocity = 100, className }: ParallaxProps) {
		const baseX = useMotionValue(0);
		const { scrollY } = useScroll();
		const scrollVelocity = useVelocity(scrollY);
		const smoothVelocity = useSpring(scrollVelocity, {
			damping: 50,
			stiffness: 400,
		});

		const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {
			clamp: false,
		});

		const [repetitions, setRepetitions] = useState(1);
		const containerRef = useRef<HTMLDivElement>(null);
		const textRef = useRef<HTMLSpanElement>(null);

		useEffect(() => {
			const calculateRepetitions = () => {
				if (containerRef.current && textRef.current) {
					const containerWidth = containerRef.current.offsetWidth;
					const textWidth = textRef.current.offsetWidth;
					const newRepetitions = Math.ceil(containerWidth / textWidth) + 2;
					setRepetitions(newRepetitions);
				}
			};

			calculateRepetitions();

			window.addEventListener("resize", calculateRepetitions);
			return () => window.removeEventListener("resize", calculateRepetitions);
		}, [children]);

		const x = useTransform(baseX, (v) => `${wrap(-100 / repetitions, 0, v)}%`);

		const directionFactor = React.useRef<number>(1);
		useAnimationFrame((t, delta) => {
			let moveBy = directionFactor.current * baseVelocity * (delta / 1000);

			if (velocityFactor.get() < 0) {
				directionFactor.current = -1;
			} else if (velocityFactor.get() > 0) {
				directionFactor.current = 1;
			}

			moveBy += directionFactor.current * moveBy * velocityFactor.get();

			baseX.set(baseX.get() + moveBy);
		});

		const MotionDiv = motion.div;

		return (
			<div className="w-full overflow-hidden whitespace-nowrap" ref={containerRef}>
				<MotionDiv style={{ x, display: "inline-block" }} data-testid="motion-div">
					{Array.from({ length: repetitions }).map((_, i) => (
						<span key={i} ref={i === 0 ? textRef : null} className="inline-block">
							{children}{" "}
						</span>
					))}
				</MotionDiv>
			</div>
		);
	}

	return (
		<section className="relative w-full">
			<ParallaxText baseVelocity={default_velocity} className={className}>
				{text}
			</ParallaxText>
			<ParallaxText baseVelocity={-default_velocity} className={className}>
				{text}
			</ParallaxText>
		</section>
	);
}

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons"
import * as SelectPrimitive from "@radix-ui/react-select"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>>(({ className, ...props }, ref) => <SheetPrimitive.Overlay className={cn("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", className)} {...props} ref={ref} />);
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva("fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out", {
	variants: {
		side: {
			top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
			bottom: "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
			left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
			right: "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
		},
	},
	defaultVariants: {
		side: "right",
	},
});

interface SheetContentProps extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>, VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(({ side = "right", className, children, ...props }, ref) => (
	<SheetPortal>
		<SheetOverlay />
		<SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
			<SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
				<Cross2Icon className="h-4 w-4" />
				<span className="sr-only">Close</span>
			</SheetPrimitive.Close>
			{children}
		</SheetPrimitive.Content>
	</SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />;
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />;
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Title>, React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>>(({ className, ...props }, ref) => <SheetPrimitive.Title ref={ref} className={cn("text-lg font-semibold text-foreground", className)} {...props} />);
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Description>, React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>>(({ className, ...props }, ref) => <SheetPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />);
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export { Sheet, SheetPortal, SheetOverlay, SheetTrigger, SheetClose, SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription };

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "../../lib/utils";

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn("animate-pulse rounded-md bg-primary/10", className)} {...props} />;
}

export { Skeleton };

================
File: components/ui/slider.tsx
================
"use client";

import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "../../lib/utils";

const Slider = React.forwardRef<React.ElementRef<typeof SliderPrimitive.Root>, React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>>(({ className, ...props }, ref) => (
	<SliderPrimitive.Root ref={ref} className={cn("relative flex w-full touch-none select-none items-center", className)} {...props}>
		<SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
			<SliderPrimitive.Range className="absolute h-full bg-primary" />
		</SliderPrimitive.Track>
		<SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
	</SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "../../lib/utils";

const Switch = React.forwardRef<React.ElementRef<typeof SwitchPrimitives.Root>, React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>>(({ className, ...props }, ref) => (
	<SwitchPrimitives.Root className={cn("peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input", className)} {...props} ref={ref}>
		<SwitchPrimitives.Thumb className={cn("pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0")} />
	</SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };

================
File: components/ui/table.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(({ className, ...props }, ref) => (
	<div className="relative w-full overflow-auto">
		<table ref={ref} className={cn("w-full caption-bottom text-sm", className)} {...props} />
	</div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />);
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />);
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => <tfoot ref={ref} className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)} {...props} />);
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(({ className, ...props }, ref) => <tr ref={ref} className={cn("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted", className)} {...props} />);
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(({ className, ...props }, ref) => <th ref={ref} className={cn("h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]", className)} {...props} />);
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(({ className, ...props }, ref) => <td ref={ref} className={cn("p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]", className)} {...props} />);
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(({ className, ...props }, ref) => <caption ref={ref} className={cn("mt-4 text-sm text-muted-foreground", className)} {...props} />);
TableCaption.displayName = "TableCaption";

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };

================
File: components/ui/tabs.tsx
================
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "../../lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<React.ElementRef<typeof TabsPrimitive.List>, React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>>(({ className, ...props }, ref) => <TabsPrimitive.List ref={ref} className={cn("inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground", className)} {...props} />);
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<React.ElementRef<typeof TabsPrimitive.Trigger>, React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>>(({ className, ...props }, ref) => (
	<TabsPrimitive.Trigger ref={ref} className={cn("inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow", className)} {...props} />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<React.ElementRef<typeof TabsPrimitive.Content>, React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>>(({ className, ...props }, ref) => <TabsPrimitive.Content ref={ref} className={cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", className)} {...props} />);
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

================
File: components/ui/text-stroke.tsx
================
import React from "react";

interface TextStrokeProps {
	strokeColor?: string;
	textColor?: string;
	strokeWidth?: number;
	className?: string;
	children: React.ReactNode;
}

export default function TextStroke({ strokeColor = "white", textColor = "black", strokeWidth = 1, className = "", children }: TextStrokeProps) {
	const strokeStyle = {
		WebkitTextStroke: `${strokeWidth}px ${strokeColor}`,
		textStroke: `${strokeWidth}px ${strokeColor}`,
		color: textColor,
	};

	return (
		<h1 className={`text-4xl font-bold ${className}`} style={strokeStyle}>
			{children}
		</h1>
	);
}

================
File: components/ui/textarea.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
	return <textarea className={cn("flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", className)} ref={ref} {...props} />;
});
Textarea.displayName = "Textarea";

export { Textarea };

================
File: components/ui/toast.tsx
================
"use client";

import * as React from "react";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Viewport>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>>(({ className, ...props }, ref) => <ToastPrimitives.Viewport ref={ref} className={cn("fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]", className)} {...props} />);
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
	"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
	{
		variants: {
			variant: {
				default: "border bg-background text-foreground",
				destructive: "destructive group border-destructive bg-destructive text-destructive-foreground",
			},
		},
		defaultVariants: {
			variant: "default",
		},
	}
);

const Toast = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Root>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>>(({ className, variant, ...props }, ref) => {
	return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Action>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>>(({ className, ...props }, ref) => (
	<ToastPrimitives.Action
		ref={ref}
		className={cn(
			"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
			className
		)}
		{...props}
	/>
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Close>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>>(({ className, ...props }, ref) => (
	<ToastPrimitives.Close ref={ref} className={cn("absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600", className)} toast-close="" {...props}>
		<Cross2Icon className="h-4 w-4" />
	</ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Title>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>>(({ className, ...props }, ref) => <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold [&+div]:text-xs", className)} {...props} />);
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Description>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>>(({ className, ...props }, ref) => <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />);
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export { type ToastProps, type ToastActionElement, ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };

================
File: components/ui/toaster.tsx
================
"use client";

import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from "./toast";
import { useToast } from "./use-toast";

export function Toaster() {
	const { toasts } = useToast();

	return (
		<ToastProvider>
			{toasts.map(function ({ id, title, description, action, ...props }) {
				return (
					<Toast key={id} {...props}>
						<div className="grid gap-1">
							{title && <ToastTitle>{title}</ToastTitle>}
							{description && <ToastDescription>{description}</ToastDescription>}
						</div>
						{action}
						<ToastClose />
					</Toast>
				);
			})}
			<ToastViewport />
		</ToastProvider>
	);
}

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-3",
        sm: "h-8 px-2",
        lg: "h-10 px-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "../../lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<React.ElementRef<typeof TooltipPrimitive.Content>, React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>>(({ className, sideOffset = 4, ...props }, ref) => (
	<TooltipPrimitive.Content ref={ref} sideOffset={sideOffset} className={cn("z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className)} {...props} />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };

================
File: components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "./toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: components/ui/vortex.tsx
================
"use client";

import { cn } from "@/lib/utils";
import React, { useEffect, useRef, useState, useCallback } from "react";
import { createNoise3D } from "simplex-noise";
import { motion } from "framer-motion";
import { useTheme } from "next-themes";

interface VortexProps {
	children?: React.ReactNode;
	className?: string;
	containerClassName?: string;
	particleCount?: number;
	rangeY?: number;
	baseHue?: number;
	baseSpeed?: number;
	rangeSpeed?: number;
	baseRadius?: number;
	rangeRadius?: number;
	backgroundColor?: string | null;
}

const Vortex = (props: VortexProps) => {
	const frameRef = useRef<number | undefined>(undefined);
	const canvasRef = useRef<HTMLCanvasElement>(null);
	const containerRef = useRef(null);
	const { resolvedTheme } = useTheme();
	const [baseHue, setBaseHue] = useState(220);

	// Constants
	const particleCount = props.particleCount || 700;
	const particlePropCount = 9;
	const particlePropsLength = particleCount * particlePropCount;
	const rangeY = props.rangeY || 100;
	const baseTTL = 50;
	const rangeTTL = 150;
	const baseSpeed = props.baseSpeed || 0.0;
	const rangeSpeed = props.rangeSpeed || 1.5;
	const baseRadius = props.baseRadius || 1;
	const rangeRadius = props.rangeRadius || 2;
	const rangeHue = 20;
	const noiseSteps = 3;
	const xOff = 0.00125;
	const yOff = 0.00125;
	const zOff = 0.0005;
	const backgroundColor = props.backgroundColor || null;
	let tick = 0;
	const noise3D = createNoise3D();
	let particleProps = new Float32Array(particlePropsLength);
	let center: [number, number] = [0, 0];

	const HALF_PI: number = 0.5 * Math.PI;
	const TAU: number = 2 * Math.PI;
	const TO_RAD: number = Math.PI / 180;
	const rand = (n: number): number => n * Math.random();
	const randRange = (n: number): number => n - rand(2 * n);
	const fadeInOut = (t: number, m: number): number => {
		let hm = 0.5 * m;
		return Math.abs(((t + hm) % m) - hm) / hm;
	};
	const lerp = (n1: number, n2: number, speed: number): number => (1 - speed) * n1 + speed * n2;

	// Move all function declarations before they're used
	const initParticle = (particleProps: Float32Array, i: number) => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		const x = rand(canvas.width);
		const y = center[1] + randRange(rangeY);
		const vx = 0;
		const vy = 0;
		const life = 0;
		const ttl = baseTTL + rand(rangeTTL);
		const speed = baseSpeed + rand(rangeSpeed);
		const radius = baseRadius + rand(rangeRadius);
		const hue = baseHue + rand(rangeHue);

		particleProps.set([x, y, vx, vy, life, ttl, speed, radius, hue], i);
	};

	const initParticles = () => {
		tick = 0;
		particleProps = new Float32Array(particlePropsLength);
		for (let i = 0; i < particlePropsLength; i += particlePropCount) {
			initParticle(particleProps, i);
		}
	};

	const resize = useCallback((width?: number, height?: number) => {
		if (!canvasRef.current) return;

		const canvas = canvasRef.current;
		const w = width || window.innerWidth;
		const h = height || window.innerHeight;

		canvas.width = w;
		canvas.height = h;

		center = [w * 0.5, h * 0.5];
		initParticles();
	}, []);

	// Rest of your component code...
	// (Keep all the other functions as they are)

	const setup = useCallback(() => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		const ctx = canvas.getContext("2d");
		if (!ctx) return;

		center = [canvas.width * 0.5, canvas.height * 0.5];
		initParticles();

		const animate = () => {
			draw(canvas, ctx, particleProps, baseHue, baseSpeed, rangeSpeed, baseRadius, rangeRadius);
			frameRef.current = requestAnimationFrame(animate);
		};
		animate();
	}, []);

	useEffect(() => {
		setBaseHue(resolvedTheme === "dark" ? 45 : 270);
	}, [resolvedTheme]);

	useEffect(() => {
		setup();

		const handleResize = () => resize(window.innerWidth, window.innerHeight);
		window.addEventListener("resize", handleResize);

		return () => {
			window.removeEventListener("resize", handleResize);
			if (frameRef.current) {
				cancelAnimationFrame(frameRef.current);
			}
		};
	}, [setup, resize]);

	const drawParticle = (x: number, y: number, x2: number, y2: number, life: number, ttl: number, radius: number, hue: number, ctx: CanvasRenderingContext2D) => {
		ctx.save();
		ctx.lineCap = "round";
		ctx.lineWidth = radius;
		ctx.strokeStyle = `hsla(${hue},100%,${resolvedTheme === "dark" ? "60%" : "50%"},${fadeInOut(life, ttl)})`;
		ctx.beginPath();
		ctx.moveTo(x, y);
		ctx.lineTo(x2, y2);
		ctx.stroke();
		ctx.closePath();
		ctx.restore();
	};

	const updateParticle = (i: number, ctx: CanvasRenderingContext2D) => {
		const canvas = canvasRef.current;
		if (!canvas) return;

		let i2 = 1 + i,
			i3 = 2 + i,
			i4 = 3 + i,
			i5 = 4 + i,
			i6 = 5 + i,
			i7 = 6 + i,
			i8 = 7 + i,
			i9 = 8 + i;

		let n, x, y, vx, vy, life, ttl, speed, x2, y2, radius, hue;

		x = particleProps[i];
		y = particleProps[i2];
		n = noise3D(x * xOff, y * yOff, tick * zOff) * noiseSteps * TAU;
		vx = lerp(particleProps[i3], Math.cos(n), 0.5);
		vy = lerp(particleProps[i4], Math.sin(n), 0.5);
		life = particleProps[i5];
		ttl = particleProps[i6];
		speed = particleProps[i7];
		x2 = x + vx * speed;
		y2 = y + vy * speed;
		radius = particleProps[i8];
		hue = particleProps[i9];

		drawParticle(x, y, x2, y2, life, ttl, radius, hue, ctx);

		life++;

		particleProps[i] = x2;
		particleProps[i2] = y2;
		particleProps[i3] = vx;
		particleProps[i4] = vy;
		particleProps[i5] = life;

		if (checkBounds(x, y, canvas) || life > ttl) {
			initParticle(particleProps, i);
		}
	};

	const checkBounds = (x: number, y: number, canvas: HTMLCanvasElement) => {
		return x > canvas.width || x < 0 || y > canvas.height || y < 0;
	};

	const drawParticles = (ctx: CanvasRenderingContext2D) => {
		for (let i = 0; i < particlePropsLength; i += particlePropCount) {
			updateParticle(i, ctx);
		}
	};

	const draw = (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, particleProps: Float32Array, baseHue: number, baseSpeed: number, rangeSpeed: number, baseRadius: number, rangeRadius: number) => {
		tick++;

		ctx.clearRect(0, 0, canvas.width, canvas.height);

		if (backgroundColor) {
			ctx.fillStyle = backgroundColor;
			ctx.fillRect(0, 0, canvas.width, canvas.height);
		}

		drawParticles(ctx);
		renderGlow(canvas, ctx);
		renderToScreen(canvas, ctx);
	};

	const renderGlow = (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) => {
		ctx.save();
		ctx.filter = "blur(8px) brightness(200%)";
		ctx.globalCompositeOperation = "lighter";
		ctx.drawImage(canvas, 0, 0);
		ctx.restore();

		ctx.save();
		ctx.filter = "blur(4px) brightness(200%)";
		ctx.globalCompositeOperation = "lighter";
		ctx.drawImage(canvas, 0, 0);
		ctx.restore();
	};

	const renderToScreen = (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) => {
		ctx.save();
		ctx.globalCompositeOperation = "lighter";
		ctx.drawImage(canvas, 0, 0);
		ctx.restore();
	};

	return (
		<div className={cn("relative h-full w-full", props.containerClassName)}>
			<motion.div
				initial={{ opacity: 0 }}
				animate={{ opacity: 1 }}
				ref={containerRef}
				style={{
					position: "absolute",
					height: "100%",
					width: "100%",
					inset: 0,
					zIndex: 0,
					background: "transparent",
					display: "flex",
					alignItems: "center",
					justifyContent: "center",
				}}
			>
				<canvas ref={canvasRef}></canvas>
			</motion.div>

			<div className={cn("relative z-10", props.className)}>{props.children}</div>
		</div>
	);
};

export { Vortex };
export default Vortex;

================
File: hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/fonts.ts
================
import localFont from 'next/font/local';

export const customFont = localFont({
  src: [
    {
      path: '../public/fonts/Modelistasignature-ownAV.otf',
      weight: '400',
      style: 'normal',
    },
  ],
  display: 'swap',
});

================
File: lib/queries/blog.ts
================
export const getBlogPostsQuery = `#graphql
  query GetBlogPosts($first: Int!, $after: String) {
    articles(first: $first, after: $after) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        cursor
        node {
          id
          title
          handle
          excerpt
          publishedAt
          image {
            url(transform: {maxWidth: 1200, maxHeight: 800, crop: CENTER})
            altText
            width
            height
          }
          author {
            name
          }
          content
        }
      }
    }
  }
`;

================
File: lib/queries/cart.ts
================
export const addToCartMutation = `
  mutation CreateCart($lines: [CartLineInput!]!) {
    cartCreate(input: { lines: $lines }) {
      cart {
        id
        checkoutUrl
      }
      userErrors {
        field
        message
      }
    }
  }
`;

================
File: lib/queries/customer.ts
================
export const customerAccessTokenCreateMutation = `
  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {
    customerAccessTokenCreate(input: $input) {
      customerAccessToken {
        accessToken
        expiresAt
      }
      customerUserErrors {
        code
        field
        message
      }
    }
  }
`;

export const customerCreateMutation = `
  mutation customerCreate($input: CustomerCreateInput!) {
    customerCreate(input: $input) {
      customer {
        id
        email
        firstName
        lastName
      }
      customerUserErrors {
        code
        field
        message
      }
    }
  }
`;

================
File: lib/queries/index.ts
================
export * from "./products";
export * from "./cart";
export * from "./blog";
export * from "./customer";

================
File: lib/queries/products.ts
================
export const getAllProductsQuery = `
  query GetAllProducts {
    products(first: 100) {
      edges {
        node {
          id
          title
          handle
          description
          availableForSale
          priceRange {
            minVariantPrice {
              amount
              currencyCode
            }
          }
          images(first: 1) {
            edges {
              node {
                url
                altText
              }
            }
          }
        }
      }
    }
  }
`;

export const getProductByHandleQuery = `
  query GetProductByHandle($handle: String!) {
    product(handle: $handle) {
      id
      title
      description
      handle
      availableForSale
      priceRange {
        minVariantPrice {
          amount
          currencyCode
        }
      }
      images(first: 5) {
        edges {
          node {
            url
            altText
          }
        }
      }
      variants(first: 1) {
        edges {
          node {
            id
            title
            price {
              amount
              currencyCode
            }
          }
        }
      }
    }
  }
`;

================
File: lib/shopify.ts
================
import { createStorefrontApiClient, type ClientResponse } from "@shopify/storefront-api-client";

if (!process.env.NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN) {
	throw new Error("NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN is not defined");
}

if (!process.env.NEXT_PUBLIC_SHOPIFY_STOREFRONT_PUBLIC_TOKEN) {
	throw new Error("NEXT_PUBLIC_SHOPIFY_STOREFRONT_PUBLIC_TOKEN is not defined");
}

export const shopifyClient = createStorefrontApiClient({
	storeDomain: `https://${process.env.NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN}`,
	publicAccessToken: process.env.NEXT_PUBLIC_SHOPIFY_STOREFRONT_PUBLIC_TOKEN,
	apiVersion: "2024-01",
});

export const TAGS = {
	products: "products",
	cart: "cart",
	blog: "blog",
} as const;

export type ShopifyResponse<T> = ClientResponse<T>;

const requestCache = new Map();

export async function dedupedRequest<T>(query: string, variables?: Record<string, unknown>): Promise<ShopifyResponse<T>> {
	const key = JSON.stringify({ query, variables });

	if (!requestCache.has(key)) {
		requestCache.set(key, shopifyClient.request<T>(query, { variables }));

		requestCache.get(key)?.finally(() => {
			requestCache.delete(key);
		});
	}

	return requestCache.get(key) as Promise<ShopifyResponse<T>>;
}

================
File: lib/unstable-cache.ts
================
export { unstable_cache } from "next/cache";

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatPrice(price: { amount: string; currencyCode: string }) {
	return new Intl.NumberFormat("en-US", {
		style: "currency",
		currency: price.currencyCode,
	}).format(parseFloat(price.amount));
}

================
File: next.config.ts
================
/** @type {import('next').NextConfig} */
const nextConfig: import("next").NextConfig = {
	images: {
		remotePatterns: [
			{
				protocol: "https",
				hostname: "**",
			},
			{
				protocol: "http",
				hostname: "placehold.co",
			},
		],
		dangerouslyAllowSVG: true,
		contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
	},
};

export default nextConfig;

================
File: package.json
================
{
	"name": "byronwade.com",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev --turbopack",
		"build": "next build",
		"start": "next start",
		"lint": "next lint",
		"postinstall": "playwright install"
	},
	"dependencies": {
		"@axe-core/playwright": "^4.10.0",
		"@hookform/resolvers": "^3.9.1",
		"@next/third-parties": "15.0.2",
		"@playwright/test": "^1.48.2",
		"@radix-ui/react-accordion": "^1.2.1",
		"@radix-ui/react-alert-dialog": "^1.1.2",
		"@radix-ui/react-aspect-ratio": "^1.1.0",
		"@radix-ui/react-avatar": "^1.1.1",
		"@radix-ui/react-checkbox": "^1.1.2",
		"@radix-ui/react-collapsible": "^1.1.1",
		"@radix-ui/react-context-menu": "^2.2.2",
		"@radix-ui/react-dialog": "^1.1.2",
		"@radix-ui/react-dropdown-menu": "^2.1.2",
		"@radix-ui/react-hover-card": "^1.1.2",
		"@radix-ui/react-icons": "^1.3.1",
		"@radix-ui/react-label": "^2.1.0",
		"@radix-ui/react-menubar": "^1.1.2",
		"@radix-ui/react-navigation-menu": "^1.2.1",
		"@radix-ui/react-popover": "^1.1.2",
		"@radix-ui/react-progress": "^1.1.0",
		"@radix-ui/react-radio-group": "^1.2.1",
		"@radix-ui/react-scroll-area": "^1.2.0",
		"@radix-ui/react-select": "^2.1.2",
		"@radix-ui/react-separator": "^1.1.0",
		"@radix-ui/react-slider": "^1.2.1",
		"@radix-ui/react-slot": "^1.1.0",
		"@radix-ui/react-switch": "^1.1.1",
		"@radix-ui/react-tabs": "^1.1.1",
		"@radix-ui/react-toast": "^1.2.2",
		"@radix-ui/react-toggle": "^1.1.0",
		"@radix-ui/react-toggle-group": "^1.1.0",
		"@radix-ui/react-tooltip": "^1.1.3",
		"@react-three/drei": "^9.115.0",
		"@react-three/fiber": "^8.17.10",
		"@shopify/storefront-api-client": "^1.0.3",
		"@supabase/ssr": "^0.4.0",
		"@supabase/supabase-js": "^2.45.0",
		"@tanstack/react-query": "^5.61.0",
		"@tanstack/react-query-next-experimental": "^5.61.0",
		"@types/animejs": "^3.1.12",
		"@types/html-to-text": "^9.0.4",
		"@types/jsdom": "^21.1.7",
		"@types/pa11y": "^5.3.7",
		"@types/puppeteer": "^7.0.4",
		"@types/three": "^0.169.0",
		"animejs": "^3.2.2",
		"axe-core": "^4.10.2",
		"cheerio": "^1.0.0",
		"chrome-launcher": "^1.1.2",
		"class-variance-authority": "^0.7.0",
		"clsx": "^2.1.1",
		"cmdk": "1.0.0",
		"date-fns": "^4.1.0",
		"embla-carousel-react": "^8.3.1",
		"framer-motion": "^11.0.0",
		"geist": "^1.3.1",
		"html-to-text": "^9.0.5",
		"input-otp": "^1.2.5",
		"jsdom": "^25.0.1",
		"lighthouse": "^12.2.1",
		"lucide-react": "^0.454.0",
		"next": "^15.0.4-canary.23",
		"next-themes": "^0.4.1",
		"openai": "^4.69.0",
		"pa11y": "^8.0.0",
		"playwright-core": "^1.27.1",
		"prisma": "^5.17.0",
		"react": "^19.0.0-rc-c11c9510-20241120",
		"react-day-picker": "8.10.1",
		"react-dom": "^19.0.0-rc-c11c9510-20241120",
		"react-feather": "^2.0.10",
		"react-hook-form": "^7.53.1",
		"react-resizable-panels": "^2.1.6",
		"react-three": "^0.9.7",
		"recharts": "^2.13.2",
		"sharp": "^0.33.5",
		"simplex-noise": "^4.0.3",
		"sonner": "^1.5.0",
		"tailwind-merge": "^2.5.4",
		"tailwindcss-animate": "^1.0.7",
		"three": "^0.170.0",
		"vaul": "^1.1.1",
		"zlib": "^1.0.5",
		"zod": "^3.23.8",
		"zustand": "^4.5.4"
	},
	"devDependencies": {
		"@tailwindcss/typography": "^0.5.13",
		"@types/node": "^20",
		"@types/react": "npm:types-react@19.0.0-rc.1",
		"@types/react-dom": "npm:types-react-dom@19.0.0-rc.1",
		"eslint": "^8",
		"eslint-config-next": "15.0.2",
		"postcss": "^8",
		"tailwindcss": "^3.4.1",
		"typescript": "^5",
		"playwright": "^1.27.1"
	},
	"overrides": {
		"@types/react": "npm:types-react@19.0.0-rc.1",
		"@types/react-dom": "npm:types-react-dom@19.0.0-rc.1"
	}
}

================
File: playwright.config.ts
================
import { PlaywrightTestConfig } from '@playwright/test';

const config: PlaywrightTestConfig = {
  use: {
    headless: true,
    channel: process.env.NODE_ENV === 'production' ? 'chrome' : undefined,
  },
};

export default config;

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/astronaut.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="626.000000pt" height="626.000000pt" viewBox="0 0 626.000000 626.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,626.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M3240 5702 c0 -29 125 -152 155 -152 3 0 -10 20 -31 44 -41 49 -124
122 -124 108z"/>
<path d="M2516 5614 c-44 -24 -86 -44 -93 -44 -7 0 -13 -4 -13 -10 0 -15 21
-11 55 10 17 10 49 28 72 40 23 11 47 28 53 36 16 18 18 19 -74 -32z"/>
<path d="M2754 5607 c17 -71 106 -167 154 -167 11 0 77 -73 93 -102 20 -37
-10 -16 -55 38 -25 31 -46 53 -46 50 0 -16 32 -66 47 -75 10 -5 15 -13 11 -17
-4 -4 -33 6 -65 22 -58 29 -92 66 -128 142 -9 17 -22 32 -30 32 -22 0 -19 -8
18 -54 49 -60 71 -96 58 -96 -5 0 -29 25 -51 55 -22 30 -48 55 -56 55 -12 0
-9 -9 13 -35 74 -92 96 -114 126 -125 111 -42 185 -95 223 -160 14 -25 18 -43
13 -58 -8 -21 -9 -21 -51 -6 -84 31 -192 23 -413 -28 -289 -68 -345 -93 -581
-262 -117 -84 -147 -98 -158 -73 -3 6 -3 2 0 -10 3 -12 -2 -33 -11 -47 -9 -14
-14 -30 -10 -36 3 -5 -5 -25 -19 -43 -14 -18 -32 -50 -41 -70 -26 -63 -51 -42
-66 57 -8 52 -7 82 5 142 20 94 20 141 1 174 l-15 25 6 -26 c3 -15 1 -30 -5
-33 -6 -4 -11 -18 -11 -32 0 -14 -6 -27 -14 -30 -8 -3 -17 -16 -20 -30 -8 -32
-24 -31 -28 4 -2 17 -9 27 -18 26 -11 -1 -17 9 -18 29 -3 42 -12 47 -13 9 -3
-76 -2 -99 5 -140 6 -35 5 -47 -9 -62 -17 -19 -18 -19 -49 2 -48 33 -68 58
-62 74 3 8 10 13 15 10 5 -4 22 -1 37 4 24 9 25 9 14 -5 -15 -18 -5 -20 14 -3
10 10 9 15 -3 30 -9 10 -18 28 -21 41 -3 12 -14 23 -23 25 -10 2 -16 0 -15 -5
3 -13 -25 -83 -34 -83 -4 0 -8 4 -8 10 0 5 -20 32 -45 60 -24 27 -49 59 -55
71 -16 29 -19 21 -11 -28 5 -23 5 -40 1 -38 -18 11 -33 -31 -35 -95 -2 -39 0
-70 4 -70 3 1 17 7 31 15 14 8 47 14 74 15 45 0 52 -4 97 -49 27 -27 49 -54
49 -60 0 -6 20 -52 45 -102 25 -51 45 -94 45 -96 0 -2 -9 1 -20 7 -12 6 -30 8
-41 5 -15 -5 -22 -2 -26 13 -5 19 -5 19 -56 0 -83 -31 -127 -60 -129 -82 -3
-42 3 -58 67 -188 37 -72 60 -126 52 -120 -14 12 -118 217 -200 392 -24 52
-51 101 -60 109 -10 7 -17 24 -17 37 0 40 -20 38 -21 -3 -2 -54 1 -77 12 -87
5 -6 9 -22 9 -36 0 -16 14 -41 35 -64 35 -39 48 -97 25 -111 -6 -4 -10 7 -10
27 0 25 -10 44 -40 76 -44 48 -47 47 -25 -5 8 -19 15 -38 15 -40 0 -11 -30 20
-30 31 0 6 -8 20 -16 31 -15 19 -15 19 -9 -10 12 -56 36 -107 67 -146 17 -21
33 -37 37 -37 3 1 27 -19 54 -45 26 -26 55 -47 64 -47 13 0 14 -3 5 -12 -17
-17 -78 6 -119 45 -35 33 -52 32 -33 -2 6 -12 8 -21 4 -21 -10 0 -43 43 -76
99 -33 57 -48 55 -28 -3 15 -47 96 -132 113 -118 9 8 15 4 24 -14 11 -24 10
-24 -27 -18 -32 5 -40 3 -49 -14 -6 -11 -9 -27 -6 -34 17 -49 13 -65 -21 -82
-40 -18 -49 -35 -40 -72 l7 -25 26 21 c14 11 31 20 37 20 6 0 0 -7 -12 -16
-28 -20 -28 -71 1 -66 9 2 17 -2 17 -9 0 -8 4 -8 15 1 19 16 52 -19 91 -97 16
-31 40 -69 54 -84 25 -27 26 -27 38 -9 18 30 15 44 -17 67 -26 20 -91 107 -91
124 0 15 32 18 46 4 19 -18 38 -19 52 -2 7 8 -2 31 -32 78 -51 82 -82 118
-123 144 l-33 21 56 2 c51 2 54 1 40 -14 -23 -22 -20 -32 11 -36 36 -4 79 -67
94 -138 6 -30 16 -63 21 -73 8 -16 7 -17 -11 -8 -29 16 -32 14 -27 -21 10 -83
29 -97 68 -49 31 37 68 60 93 60 11 -1 35 4 53 9 23 8 30 8 26 0 -5 -8 1 -9
16 -5 31 8 89 -20 100 -48 6 -15 20 -25 45 -29 19 -4 33 -11 30 -17 -4 -5 3
-9 14 -9 12 0 21 -7 21 -15 0 -8 -5 -15 -11 -15 -5 0 -7 4 -4 10 3 5 0 7 -9 4
-8 -3 -27 1 -43 9 -15 8 -34 12 -40 10 -7 -3 -13 2 -13 10 0 24 -43 28 -120
12 -65 -14 -157 -51 -148 -60 2 -2 29 5 60 17 42 15 68 19 101 14 47 -7 87
-29 74 -42 -4 -4 -13 -2 -19 4 -14 14 -62 16 -53 3 3 -6 -4 -15 -16 -21 -21
-12 -21 -12 7 -30 16 -10 43 -30 59 -44 l30 -25 -27 -1 c-16 0 -28 -4 -28 -10
0 -5 7 -10 15 -10 8 0 15 -4 15 -10 0 -5 -7 -10 -15 -10 -8 0 -15 -4 -15 -9 0
-5 9 -7 20 -4 11 3 20 0 20 -6 0 -6 -9 -11 -21 -11 -15 0 -19 -5 -15 -15 7
-20 -23 -20 -60 0 -52 27 -89 28 -150 6 -31 -12 -69 -30 -83 -40 -14 -10 -45
-28 -69 -40 -34 -17 -49 -33 -66 -71 -13 -27 -27 -46 -31 -42 -5 4 -5 2 -2 -4
12 -20 -4 -70 -29 -98 l-25 -26 38 1 c21 1 30 3 21 6 -22 5 -22 2 2 54 12 28
20 37 20 24 1 -52 121 -120 223 -127 30 -3 34 -6 26 -20 -7 -13 -6 -18 3 -18
9 0 9 -3 0 -12 -8 -8 -15 -8 -24 -1 -20 17 -100 60 -125 67 -47 15 -21 -11 30
-29 28 -10 66 -32 82 -49 17 -17 42 -37 58 -45 15 -8 27 -18 27 -21 0 -14 -31
-34 -38 -24 -4 5 -32 28 -62 50 -99 75 -150 100 -150 73 0 -5 4 -8 9 -5 8 5
80 -41 191 -122 15 -11 23 -11 40 -2 19 10 27 8 53 -10 l30 -23 -19 26 c-10
15 -22 27 -26 27 -15 0 -8 27 11 44 18 16 21 16 72 -16 30 -18 55 -36 57 -40
2 -4 8 -8 13 -8 5 0 19 -10 30 -21 l22 -22 -27 7 c-30 7 -32 3 -11 -21 8 -10
21 -27 29 -38 12 -16 16 -17 30 -6 17 14 20 8 17 -29 -1 -8 14 -25 33 -38 38
-26 66 -84 66 -137 0 -19 4 -35 8 -35 4 0 27 19 50 42 23 22 44 39 47 36 5 -5
-116 -146 -126 -147 -12 -2 -21 73 -10 77 19 6 12 40 -10 47 -24 8 -68 53 -69
71 0 10 -169 94 -189 94 -18 0 -112 60 -150 95 -20 19 -44 38 -53 41 -10 3
-18 9 -18 13 0 11 -125 66 -183 81 -45 12 -141 16 -214 10 -29 -3 -33 -7 -33
-34 0 -17 -9 -40 -22 -54 -17 -17 -3 -12 47 19 93 57 127 56 255 -4 25 -12 63
-33 85 -48 54 -36 166 -144 158 -153 -3 -3 1 -6 10 -6 9 0 19 -4 22 -10 3 -5
2 -10 -3 -10 -10 0 -180 108 -200 127 -7 7 -19 13 -26 13 -6 0 -30 9 -51 21
-56 29 -124 49 -165 48 l-35 0 45 -20 c24 -11 48 -25 52 -32 4 -7 8 -8 8 -3 0
6 5 5 12 -2 7 -7 20 -12 31 -12 10 0 16 -4 13 -9 -3 -4 -30 0 -60 10 -30 10
-80 21 -113 24 l-58 5 50 -16 c262 -80 374 -132 448 -205 16 -16 33 -26 39
-23 6 4 8 2 5 -3 -4 -6 9 -23 28 -37 34 -26 63 -66 48 -66 -4 0 -37 28 -73 62
-99 93 -192 148 -321 189 -190 61 -298 61 -336 1 -9 -15 -27 -40 -40 -55 -18
-23 -23 -41 -23 -88 0 -40 4 -58 11 -54 6 4 8 14 5 22 -3 8 -1 11 4 8 6 -4 23
7 39 23 28 28 34 29 108 27 114 -3 233 -38 291 -86 26 -22 70 -56 97 -78 58
-44 85 -74 110 -116 l17 -30 -21 25 c-56 64 -94 98 -150 133 -34 20 -61 33
-61 28 0 -5 14 -14 30 -21 42 -17 142 -130 174 -196 17 -34 26 -69 26 -100 l0
-48 33 32 c20 20 44 32 62 33 17 1 53 8 81 17 43 12 61 27 125 98 41 45 80 83
87 83 6 1 12 6 12 12 0 5 4 7 10 4 13 -8 49 11 90 50 82 77 130 117 130 107 0
-6 -8 -15 -17 -21 -10 -5 -15 -12 -12 -15 3 -3 22 10 42 29 42 40 57 38 88
-12 20 -32 20 -35 4 -47 -10 -7 -15 -18 -11 -24 14 -22 -13 -12 -47 18 -43 37
-47 37 -38 3 4 -16 14 -28 23 -28 8 0 22 -5 29 -12 8 -6 26 -14 41 -18 16 -4
25 -12 21 -18 -3 -5 -1 -7 4 -4 6 4 16 0 23 -8 17 -20 25 -19 27 4 1 11 -5 22
-13 25 -19 7 -19 66 1 66 8 0 15 7 15 15 0 8 7 15 15 15 8 0 15 5 15 10 0 6
-9 10 -20 10 -11 0 -24 8 -27 18 -4 9 -16 25 -27 35 -20 17 -20 17 1 45 13 17
30 27 47 27 31 1 34 -10 5 -18 -21 -6 -21 -7 9 -32 17 -14 44 -52 60 -85 17
-32 39 -72 51 -88 12 -17 21 -34 21 -40 0 -5 27 -34 59 -64 48 -44 61 -52 66
-39 6 13 10 12 27 -9 13 -16 19 -18 15 -7 -12 33 11 17 32 -23 23 -45 21 -50
-9 -18 -24 26 -26 17 -4 -18 11 -16 23 -23 32 -19 9 3 19 0 24 -7 11 -19 10
-60 -2 -53 -6 4 -8 15 -5 25 5 16 -2 18 -79 19 -46 1 -92 4 -103 8 -15 6 -16
4 -6 -9 7 -8 11 -17 9 -19 -2 -2 -6 -24 -10 -49 -4 -31 -3 -40 4 -30 5 8 10
27 10 43 0 15 4 27 9 27 5 0 16 2 23 5 11 4 13 -3 10 -29 -3 -28 1 -40 24 -61
l28 -26 -28 11 c-16 6 -30 9 -32 8 -1 -2 1 -19 5 -38 7 -35 26 -44 26 -12 0
26 37 21 51 -7 7 -13 25 -34 41 -47 33 -28 32 -28 -29 -9 l-48 14 0 -34 c0
-37 -8 -43 -28 -23 -9 9 -12 8 -12 -4 0 -21 26 -42 45 -34 9 3 15 0 15 -9 0
-19 48 -55 65 -49 7 3 16 1 20 -5 9 -16 25 -13 25 4 0 8 4 15 9 15 5 0 16 3
25 6 11 4 16 1 16 -11 0 -11 -5 -15 -15 -11 -9 3 -15 0 -15 -9 0 -8 5 -15 10
-15 6 0 10 -7 10 -15 0 -18 -5 -18 -31 -5 -10 6 -19 7 -19 2 0 -9 76 -42 95
-42 6 0 1 7 -9 15 -11 8 -18 15 -15 15 14 0 145 -52 154 -61 7 -8 3 -9 -15 -3
-14 5 -41 8 -60 7 -21 -1 -29 1 -21 6 10 6 9 10 -4 15 -23 9 -26 8 -24 -6 3
-26 -1 -38 -13 -38 -14 0 -167 104 -205 139 -22 19 -23 19 -23 2 0 -10 7 -24
15 -31 7 -6 27 -35 43 -64 37 -65 81 -117 96 -114 6 1 31 -9 55 -24 39 -23 41
-27 25 -37 -11 -6 -14 -11 -6 -11 20 0 3 -20 -18 -20 -10 0 -44 13 -75 30 -31
16 -60 30 -63 30 -14 0 34 -41 66 -56 l37 -17 -30 -14 c-30 -14 -29 -14 17 -9
26 3 50 1 53 -4 10 -16 28 -11 21 5 -8 23 18 18 60 -10 20 -14 44 -25 54 -25
26 0 31 -12 12 -26 -9 -7 -38 -14 -64 -14 -32 0 -47 -4 -45 -12 3 -18 104 -48
160 -48 40 0 47 -3 47 -20 0 -30 -76 -27 -146 5 -30 14 -58 25 -62 25 -5 0
-29 13 -54 29 l-45 29 12 -40 c13 -44 44 -74 90 -84 17 -4 24 -9 18 -11 -7 -3
-13 -20 -13 -39 0 -29 6 -38 40 -59 22 -14 46 -25 53 -25 8 0 38 -23 68 -51
65 -62 102 -79 193 -89 44 -5 74 -14 85 -25 15 -17 15 -17 -4 -11 -44 17 -87
19 -95 6 -7 -11 -12 -11 -23 -2 -7 6 -31 19 -53 27 l-39 16 50 -48 c27 -26 49
-51 48 -54 -1 -4 6 -5 15 -2 10 2 38 -3 62 -11 25 -9 68 -16 96 -16 41 0 55
-5 74 -25 12 -13 25 -23 29 -22 3 1 20 -12 37 -28 81 -78 92 -85 142 -85 55 0
126 32 150 68 13 20 13 22 -3 16 -15 -6 -16 -5 -3 15 12 21 9 26 -44 76 -32
30 -58 59 -58 65 0 5 -8 10 -17 10 -13 0 -9 8 17 30 29 25 32 31 20 40 -12 7
-30 -5 -80 -54 -36 -35 -76 -69 -90 -75 l-25 -12 25 21 c153 130 198 225 206
440 5 110 4 123 -9 107 -12 -15 -16 -15 -20 -3 -3 8 -1 17 6 19 9 3 12 41 11
134 -1 104 -4 135 -17 154 -10 13 -17 19 -17 14 0 -6 -5 -2 -11 9 -8 12 -14
15 -18 7 -4 -6 -8 12 -8 39 -2 49 0 51 37 70 25 13 38 16 35 8 -3 -7 11 -38
30 -68 33 -53 39 -85 8 -45 -15 20 -15 20 -8 -2 21 -72 119 -193 173 -215 15
-6 56 -18 91 -28 36 -9 57 -19 49 -23 -9 -3 -45 5 -82 18 -65 23 -74 17 -28
-19 13 -10 27 -29 32 -42 5 -13 28 -33 51 -45 24 -12 48 -27 55 -34 7 -6 33
-18 58 -25 25 -7 44 -16 41 -20 -4 -7 25 -13 135 -26 58 -8 164 20 208 53 40
30 91 132 71 143 -6 5 -9 17 -6 29 4 17 1 21 -16 20 -12 -1 -31 -1 -42 0 -17
1 -18 3 -5 14 24 20 66 80 72 104 10 39 -10 25 -30 -19 -20 -45 -73 -108 -90
-108 -14 0 -3 36 14 51 20 16 17 32 -3 25 -12 -4 -8 3 10 21 35 35 114 138
134 176 32 62 -17 79 -57 20 -25 -37 -123 -123 -163 -144 -19 -10 -19 -8 5 18
16 16 28 32 28 37 0 4 11 17 25 30 43 40 28 62 -20 30 -30 -20 -121 -44 -160
-43 l-30 1 30 7 c76 19 129 64 224 193 12 16 7 15 -23 -6 -54 -36 -144 -67
-185 -64 l-36 3 55 29 c47 25 157 104 198 143 7 7 23 19 34 28 33 22 14 29
-34 12 -59 -22 -215 -28 -223 -9 -8 20 -6 24 6 16 9 -5 10 1 5 19 -8 34 -45
97 -57 97 -5 0 -52 -18 -105 -40 -53 -22 -100 -40 -104 -40 -4 0 -24 44 -45
98 -99 257 -95 235 -41 256 24 9 68 31 98 49 30 18 60 31 66 29 7 -2 12 3 12
12 0 9 7 16 15 16 8 0 15 4 15 8 0 4 14 16 30 26 30 17 31 17 51 -6 18 -20 20
-21 14 -3 -3 11 -9 34 -12 50 l-6 30 22 -19 c29 -26 36 -15 11 17 -11 14 -20
33 -20 43 0 10 -10 38 -21 62 -18 36 -26 43 -45 39 -13 -2 -22 -1 -21 2 1 3
-4 16 -11 29 -9 15 -19 21 -31 17 -10 -3 -24 1 -30 9 -7 8 -18 13 -25 10 -16
-6 -29 23 -15 32 6 4 3 14 -8 26 -11 13 -14 22 -7 25 39 14 -66 252 -115 260
-19 3 -20 0 -11 -16 5 -11 15 -23 20 -26 12 -7 50 -82 55 -108 2 -10 7 -27 10
-36 7 -23 -7 -34 -68 -54 l-47 -16 26 27 c15 15 32 43 38 62 11 30 10 41 -6
73 -10 20 -21 37 -24 37 -2 0 0 -9 6 -19 16 -30 12 -83 -9 -114 -16 -25 -20
-27 -32 -14 -10 11 -23 12 -52 5 -78 -17 -151 31 -141 94 11 67 73 113 144
106 40 -4 47 -2 43 11 -5 19 34 68 50 63 11 -3 27 16 27 33 -1 6 -6 3 -13 -6
-7 -9 -20 -13 -34 -10 l-22 6 23 26 c14 17 34 27 52 27 33 1 93 6 212 17 67 6
82 11 82 25 0 9 -9 25 -20 35 -24 22 -26 35 -5 35 9 0 26 7 39 15 28 19 67 7
108 -32 26 -25 28 -25 52 -10 14 9 32 14 41 11 11 -5 14 -2 9 10 -5 13 1 15
35 12 23 -2 41 -2 41 0 0 3 -7 17 -16 32 l-16 27 26 -29 c15 -15 30 -25 34
-22 3 4 2 10 -4 14 -6 4 -13 14 -16 23 -5 14 -1 13 31 -4 36 -20 37 -20 65 -2
20 13 24 20 15 23 -15 5 -54 42 -44 42 3 0 15 -5 28 -12 64 -33 69 -33 73 -2
1 8 -8 19 -22 24 -38 15 -28 19 16 8 43 -11 61 -5 42 14 -7 7 -12 22 -12 33 0
30 29 87 41 80 10 -7 12 25 3 49 -3 9 -10 16 -16 16 -5 0 -7 -4 -4 -9 3 -4 -4
-17 -16 -27 l-21 -19 15 30 c9 17 13 36 10 44 -3 10 1 13 16 9 25 -7 30 4 38
80 6 65 19 105 46 144 12 17 15 29 8 33 -18 11 -36 -12 -65 -87 -37 -92 -43
-69 -11 37 14 43 22 82 19 85 -3 3 -7 1 -10 -5 -2 -5 -14 -28 -28 -50 -14 -22
-33 -57 -42 -77 -19 -39 -33 -49 -33 -23 0 24 -15 17 -18 -7 -1 -13 -6 -36
-11 -53 -9 -26 -9 -23 -6 20 2 28 9 72 15 99 6 27 8 51 5 54 -3 3 -5 -2 -5
-11 0 -10 -4 -17 -9 -17 -5 0 -15 -20 -22 -45 -14 -48 -34 -63 -23 -17 4 15
17 54 30 86 13 33 22 61 20 63 -2 2 -14 -10 -26 -27 -12 -16 -26 -28 -31 -25
-14 9 -47 -13 -55 -37 l-7 -23 -11 25 c-10 24 -10 23 -14 -17 -2 -24 -7 -43
-13 -43 -5 0 -9 -7 -9 -15 0 -8 -4 -15 -10 -15 -5 0 -7 -7 -4 -15 4 -11 -1
-15 -17 -17 -13 0 -30 -2 -38 -2 -20 -2 -46 -56 -42 -88 3 -26 -10 -22 -50 16
-25 24 -40 31 -46 25 -7 -7 -15 -5 -24 9 -28 38 -79 49 -79 16 0 -9 -4 -12
-10 -9 -5 3 -10 1 -10 -4 0 -20 -22 -11 -50 19 -19 21 -37 30 -59 30 -27 0
-31 -3 -31 -27 -1 -25 -2 -26 -14 -10 -18 23 -30 22 -23 -3 7 -27 -9 -34 -44
-20 -39 17 -63 -2 -28 -21 23 -12 23 -12 4 -20 -33 -13 -45 -10 -54 13 -6 18
-9 19 -14 5 -4 -10 -2 -17 4 -17 6 0 9 -7 5 -15 -4 -10 1 -15 14 -15 11 0 20
-4 20 -10 0 -5 -14 -10 -30 -10 -17 0 -29 3 -28 8 2 4 -7 17 -20 30 -29 29
-66 26 -70 -5 -3 -23 -32 -22 -32 2 0 21 -25 36 -38 23 -9 -9 -12 -4 -13 23
-1 33 -2 32 -11 -11 -10 -49 -5 -264 8 -294 5 -14 4 -17 -6 -11 -9 6 -12 -1
-8 -27 3 -28 1 -34 -10 -30 -11 4 -13 0 -7 -16 8 -28 -9 -29 -42 -2 -30 23
-47 26 -40 6 3 -8 1 -16 -5 -18 -6 -2 2 -18 17 -36 33 -39 22 -42 -18 -4 l-29
27 7 -30 c10 -40 28 -68 70 -107 20 -17 49 -54 65 -80 l30 -48 -25 -10 c-15
-6 -23 -15 -19 -24 4 -10 -9 -19 -43 -31 -26 -10 -70 -28 -98 -40 -27 -13 -71
-32 -97 -44 -26 -11 -52 -21 -57 -21 -6 0 -11 -4 -11 -10 0 -5 -5 -10 -11 -10
-17 0 -103 -42 -111 -54 -4 -6 -21 21 -38 59 -17 39 -36 78 -41 88 -8 14 -4
19 18 27 67 25 92 36 151 68 46 25 62 39 62 55 1 22 1 22 16 2 16 -19 16 -19
9 5 -22 81 -38 109 -64 113 l-26 4 27 2 c25 1 27 3 18 27 -6 14 -7 30 -4 36
12 19 -39 -4 -56 -25 -9 -11 -29 -21 -44 -23 -16 -2 -45 -14 -66 -28 -36 -24
-90 -44 -90 -34 0 9 35 44 55 57 17 11 18 12 1 7 -13 -5 -17 -2 -12 9 3 8 2
15 -3 15 -13 0 -32 -26 -25 -33 10 -9 -46 -28 -58 -21 -6 4 -8 3 -5 -2 3 -6
-2 -15 -11 -21 -14 -8 -17 -6 -18 11 -1 16 14 31 60 58 120 72 177 137 262
298 23 44 72 164 80 195 7 28 6 29 -12 15 -18 -14 -18 -14 -5 2 13 18 11 110
-5 196 -6 31 8 46 20 20 3 -10 8 -9 18 3 7 9 31 22 53 29 22 7 47 15 55 18 8
3 23 4 33 3 9 -1 17 4 17 11 -1 18 -39 86 -40 71 0 -16 -76 -18 -85 -3 -4 6
10 10 35 10 48 0 56 12 40 69 -12 46 -22 55 -51 46 -14 -5 -18 -12 -14 -25 3
-10 -2 -33 -11 -52 -21 -44 -56 -49 -71 -10 -10 24 -11 19 -12 -38 -1 -62 -2
-64 -15 -38 -8 15 -12 36 -9 46 4 19 -21 82 -33 82 -3 0 -3 -17 0 -37 10 -59
16 -185 9 -196 -10 -17 -23 17 -23 65 0 56 -18 148 -32 166 -18 22 -28 13 -23
-23 2 -19 0 -37 -6 -41 -6 -3 -9 -41 -8 -87 1 -54 -2 -82 -10 -85 -6 -2 -11
-12 -11 -23 0 -10 -3 -20 -7 -20 -38 -7 -59 -4 -71 8 -16 16 -9 43 12 43 9 0
12 7 9 20 -3 11 -9 20 -14 20 -5 0 -9 5 -9 10 0 19 25 10 35 -12 6 -13 17 -24
25 -26 13 -2 14 10 12 74 -3 54 1 90 13 120 9 24 14 48 10 53 -3 6 -43 22 -88
36 -101 32 -272 49 -422 42 -60 -3 -117 -2 -126 1 -22 9 -8 46 23 63 13 6 26
18 31 25 4 7 20 15 36 19 51 11 72 89 34 127 -17 17 -23 18 -41 7 -16 -10 -23
-10 -35 -1 -8 7 -39 16 -68 19 l-53 6 54 19 c68 24 229 64 291 73 45 7 46 6
62 -28 10 -19 17 -46 17 -59 0 -29 4 -35 65 -83 28 -22 55 -45 60 -52 6 -8 34
-16 63 -20 47 -5 52 -4 52 13 0 10 -9 34 -21 53 -20 34 -19 55 3 33 7 -7 20
-12 29 -12 9 0 20 -7 23 -16 3 -8 2 -12 -4 -9 -16 10 -12 -5 11 -41 11 -19 25
-32 29 -29 5 3 26 -30 46 -74 25 -52 42 -77 51 -74 7 3 13 0 13 -7 0 -6 5 -8
11 -5 6 4 8 13 5 21 -3 8 0 11 9 8 9 -4 22 7 34 26 19 32 19 32 -2 84 -12 28
-34 71 -49 95 -28 44 -37 78 -19 66 5 -3 12 -1 16 5 11 18 24 11 31 -16 6 -23
11 -26 38 -21 17 3 71 24 119 46 48 23 92 39 97 36 6 -3 10 0 10 7 0 17 -67
158 -84 178 -8 8 -24 46 -36 84 -20 62 -26 70 -64 87 -53 24 -55 24 -128 -10
-75 -34 -94 -53 -103 -104 -9 -47 -18 -40 -44 38 -11 33 -31 90 -45 128 -34
89 -33 117 4 157 17 18 28 35 25 39 -3 3 -9 1 -13 -5 -10 -15 -51 -36 -60 -30
-4 2 -7 -6 -8 -17 -2 -49 -13 -99 -25 -113 -10 -12 -9 -13 7 -7 17 6 17 5 5
-10 -13 -17 -15 -16 -34 0 -30 26 -86 87 -87 93 0 3 20 12 45 19 49 14 76 37
28 24 -50 -14 -81 -7 -134 32 -31 22 -49 31 -46 21 4 -9 2 -16 -3 -16 -10 0
-75 87 -75 101 0 4 -6 14 -14 21 -11 11 -13 9 -7 -15z m410 -389 c8 -18 25
-60 37 -93 12 -33 25 -64 29 -70 4 -5 15 -28 24 -50 14 -37 14 -38 -1 -17 -23
32 -39 27 -40 -12 -1 -24 6 -41 23 -57 28 -26 69 -128 56 -141 -4 -4 -16 15
-25 44 -22 71 -66 121 -136 156 l-59 30 26 13 c15 7 30 14 34 16 4 2 10 -1 13
-7 4 -6 3 -10 -2 -9 -4 1 -16 -1 -26 -5 -14 -7 -11 -11 20 -27 21 -11 43 -17
50 -14 20 7 15 33 -7 40 -11 3 -20 10 -20 15 0 6 11 5 26 -1 30 -11 42 -5 26
13 -10 13 -72 183 -72 199 0 18 9 9 24 -23z m356 -61 c0 -8 -16 -18 -35 -24
-40 -13 -46 -2 -13 21 27 20 48 20 48 3z m-497 -63 c23 -5 26 -8 16 -20 -13
-15 -33 -9 -23 8 4 6 -1 8 -16 3 -12 -4 -52 -8 -88 -10 -37 -2 -73 -4 -80 -4
-7 -1 -11 -5 -8 -10 3 -5 39 -12 78 -16 87 -8 108 -13 108 -26 0 -7 -12 -8
-31 -4 -17 4 -57 7 -90 7 -32 0 -59 4 -59 9 0 5 -15 9 -32 8 -31 -1 -32 -1 -8
-9 20 -6 13 -8 -28 -9 -59 -1 -250 -37 -267 -50 -5 -5 -21 -12 -34 -16 -13 -4
-40 -14 -60 -23 -20 -9 -39 -15 -43 -14 -5 1 -8 -2 -8 -8 0 -5 -7 -10 -16 -10
-9 0 -12 -5 -8 -12 4 -7 3 -8 -5 -4 -15 9 -53 -3 -46 -15 3 -5 0 -6 -8 -3 -9
3 -16 -3 -20 -15 -4 -15 -10 -19 -23 -14 -11 4 -15 3 -10 -5 3 -6 -3 -16 -15
-22 -12 -7 -19 -8 -15 -2 3 6 0 12 -6 15 -9 3 -6 8 7 13 11 4 38 20 60 35 32
22 142 74 235 113 8 3 2 4 -15 0 -76 -14 -337 -152 -307 -162 18 -6 14 -20 -8
-27 -11 -3 -19 -10 -17 -14 1 -5 -26 -30 -60 -55 -35 -26 -84 -72 -109 -102
-25 -29 -51 -51 -57 -47 -5 3 -7 1 -3 -5 9 -14 -7 -23 -24 -12 -10 6 0 24 46
77 33 37 66 77 74 87 14 18 14 19 -8 7 -38 -20 -35 -7 6 23 287 210 426 274
707 324 163 29 231 32 318 16z m257 -29 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10
15 0 8 5 15 10 15 6 0 10 -7 10 -15z m234 -30 c9 -24 -3 -43 -36 -54 -46 -16
-66 -13 -79 11 -10 18 -8 24 11 40 28 22 95 24 104 3z m34 -77 c21 -21 13 -47
-18 -63 -38 -20 -63 -19 -83 3 -14 15 -14 21 -4 34 28 35 82 49 105 26z m-258
-23 c14 -19 14 -19 -2 -6 -10 7 -18 18 -18 24 0 6 1 8 3 6 1 -2 9 -13 17 -24z
m20 -80 c0 -5 -5 -3 -10 5 -5 8 -10 20 -10 25 0 6 5 3 10 -5 5 -8 10 -19 10
-25z m-235 -75 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13
-4 16 -10z m-1135 -74 c-17 -21 -80 -57 -74 -43 2 7 21 22 42 33 46 27 47 27
32 10z m1454 -84 c-17 -16 -17 -16 -6 0 7 9 10 29 7 45 l-5 28 11 -28 c10 -24
8 -32 -7 -45z m-44 16 c0 -4 -4 -8 -10 -8 -5 0 -10 4 -10 9 0 5 -3 18 -6 28
-5 16 -4 16 10 -1 9 -11 16 -23 16 -28z m30 9 c0 -5 -4 -5 -10 -2 -5 3 -10 14
-10 23 0 15 2 15 10 2 5 -8 10 -19 10 -23z m-1537 -82 c-3 -9 -8 -14 -10 -11
-3 3 -2 9 2 15 9 16 15 13 8 -4z m167 -15 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4
10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1074 -57 c4 -9 -11 0 -33 18 -22 19 -40
38 -40 42 -2 13 67 -43 73 -60z m-1365 -170 c1 -24 -19 -13 -25 15 -4 15 -20
56 -36 90 -15 35 -28 69 -27 75 1 14 88 -163 88 -180z m239 175 c8 -11 42
-116 42 -132 0 -3 -5 -6 -11 -6 -12 0 -44 71 -53 118 -6 33 4 42 22 20z m-108
-13 c0 -8 -82 -57 -87 -51 -9 9 8 26 26 26 9 0 26 7 37 15 21 16 24 17 24 10z
m1291 -62 c13 -16 12 -17 -3 -4 -17 13 -22 21 -14 21 2 0 10 -8 17 -17z
m-1390 -34 c-5 -13 -10 -19 -10 -12 -1 15 10 45 15 40 3 -2 0 -15 -5 -28z m34
-59 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z
m-125 -30 c0 -5 -23 -19 -52 -32 -28 -12 -68 -30 -87 -40 -19 -10 -36 -16 -38
-14 -3 3 153 87 175 95 1 1 2 -3 2 -9z m137 -72 c-3 -8 -6 -5 -6 6 -1 11 2 17
5 13 3 -3 4 -12 1 -19z m22 -50 c10 -30 9 -31 -4 -14 -8 11 -15 26 -15 33 0
22 8 14 19 -19z m1237 -34 c-3 -8 -10 -14 -16 -14 -14 0 -13 27 2 53 l13 22 3
-23 c2 -13 1 -30 -2 -38z m-1391 36 c20 -32 -68 -90 -106 -70 -26 14 -24 45 3
64 25 18 93 22 103 6z m1480 0 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4
10 9 10 6 0 13 -4 16 -10z m-920 -28 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10
-3 15 -9 12 -12z m-253 -11 c-17 -10 12 -108 39 -132 10 -9 15 -19 12 -23 -3
-3 6 -24 21 -46 27 -41 32 -65 17 -89 -14 -22 -35 0 -81 88 -34 64 -41 87 -43
142 -1 47 1 65 9 62 7 -2 15 1 19 7 4 6 10 9 13 5 4 -3 1 -10 -6 -14z m356
-26 c23 -9 42 -21 42 -25 0 -4 -17 1 -37 11 -21 10 -43 19 -50 19 -6 0 -15 5
-19 12 -5 7 -2 9 7 6 8 -3 33 -14 57 -23z m-624 -11 c24 -24 19 -40 -20 -63
-38 -22 -89 -28 -99 -10 -12 19 4 54 32 71 35 22 67 23 87 2z m1542 -114 l24
-82 -20 -25 c-15 -19 -20 -21 -20 -9 0 18 -15 22 -25 6 -12 -19 -20 -2 -19 37
2 21 -2 60 -7 87 -8 41 -6 52 8 68 23 26 31 14 59 -82z m-742 -3 c15 -78 17
-107 8 -107 -19 0 -31 27 -34 80 l-3 54 -44 11 c-25 6 -46 16 -48 22 -3 8 17
5 55 -8 53 -18 61 -24 66 -52z m41 43 c3 -6 -3 -10 -14 -10 -12 0 -21 2 -21 4
0 2 -3 12 -7 21 -5 15 -3 16 15 6 11 -6 24 -16 27 -21z m555 6 c0 -2 -7 -6
-15 -10 -8 -3 -15 -1 -15 4 0 6 7 10 15 10 8 0 15 -2 15 -4z m-1343 -28 c-3
-8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m128 2 c3 -5 1 -10 -4 -10
-6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m2125 -10 c-19 -12 -30 -12
-30 -1 0 10 31 20 40 14 2 -2 -2 -8 -10 -13z m460 16 c0 -3 -4 -8 -10 -11 -5
-3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-2395 -36 c3 -5 1 -10 -4
-10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-295 -10 c0 -5 -2 -10
-4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m2263 3 c-7 -2
-19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-113 -7 c0 -2 -7 -7 -16 -10
-8 -3 -12 -2 -9 4 6 10 25 14 25 6z m-175 -31 c-23 -8 -85 -10 -85 -3 0 4 21
8 48 7 26 0 43 -2 37 -4z m-1367 -24 c22 -12 98 -37 137 -46 40 -9 55 -23 55
-51 0 -24 -14 -32 -24 -15 -7 11 -57 1 -74 -15 -7 -7 -20 -10 -28 -7 -9 3 -20
0 -24 -7 -11 -18 -60 -4 -60 17 0 9 -11 28 -24 42 -14 15 -28 38 -31 53 -7 27
-7 27 48 37 4 0 15 -3 25 -8z m1920 -8 c11 -10 29 -26 40 -35 12 -10 22 -28
22 -40 0 -20 -5 -17 -45 22 -25 24 -45 50 -45 57 0 17 6 16 28 -4z m-2158 -18
c14 -16 10 -18 -14 -9 -9 3 -16 10 -16 15 0 14 16 11 30 -6z m-966 -18 c-11
-6 -22 -15 -26 -21 -5 -7 -8 -4 -8 6 0 19 29 40 44 31 5 -3 0 -10 -10 -16z
m286 -58 c0 -5 -4 -9 -10 -9 -5 0 -10 7 -10 16 0 8 5 12 10 9 6 -3 10 -10 10
-16z m1165 12 c10 -17 -11 -21 -31 -6 -18 14 -18 14 3 15 12 0 24 -4 28 -9z
m619 -55 c-21 -31 -39 -54 -42 -52 -2 3 5 17 17 32 13 16 19 35 16 46 -5 13
-2 16 8 12 8 -3 17 2 21 12 4 9 9 15 11 12 3 -3 -11 -31 -31 -62z m-54 -1 c0
-21 -5 -25 -29 -25 -19 0 -34 -8 -43 -22 -19 -28 -119 -128 -128 -128 -12 0
-32 28 -28 38 1 6 32 40 67 77 41 44 74 71 95 75 57 14 66 12 66 -15z m-1111
-50 c18 -25 29 -50 25 -56 -5 -9 -64 78 -64 96 0 11 8 3 39 -40z m351 -40 c9
-10 9 -15 1 -15 -21 0 -11 -20 14 -26 14 -3 23 -10 20 -14 -6 -10 22 -33 46
-37 13 -2 17 2 13 12 -8 19 0 19 18 2 7 -8 26 -17 41 -21 26 -6 28 -5 21 16
-6 20 -5 21 10 6 19 -19 68 -32 93 -24 10 3 24 2 31 -3 17 -10 -59 -24 -82
-15 -9 3 -44 7 -78 8 -49 1 -144 20 -166 32 -1 1 -5 12 -8 25 -3 13 -8 34 -11
47 -6 26 17 31 37 7z m-540 -75 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1
10 4 10 6 0 11 -4 11 -10z m895 -20 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6
2 10 4 10 3 0 8 -4 11 -10z m1298 -37 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17
0 24 -2 18 -5z m-1119 -48 c-4 -8 -8 -15 -10 -15 -2 0 -4 7 -4 15 0 8 4 15 10
15 5 0 7 -7 4 -15z m330 -37 c22 -53 16 -93 -14 -101 -12 -3 -27 2 -37 11 -9
10 -20 17 -24 17 -4 0 -11 3 -15 8 -4 4 -2 7 5 7 7 0 9 5 5 12 -5 7 -2 9 8 6
20 -8 50 42 38 62 -13 21 -12 32 3 28 6 -3 20 -25 31 -50z m-960 -30 c4 -21
11 -38 15 -38 5 0 11 -11 14 -25 3 -16 0 -24 -6 -22 -11 3 -47 109 -47 137 1
25 16 -9 24 -52z m850 37 c-4 -15 -1 -32 6 -40 10 -12 9 -15 -8 -15 -12 0 -23
9 -27 20 -3 11 -12 20 -18 20 -10 0 41 40 51 40 1 0 0 -11 -4 -25z m-134 5 c0
-5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m90 -54
c0 -38 -59 -43 -60 -4 0 5 25 17 58 27 1 1 2 -10 2 -23z m-1607 -23 c-7 -2
-19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m217 -7 c0 -2 -7 -7 -16 -10
-8 -3 -12 -2 -9 4 6 10 25 14 25 6z m664 -11 c11 -8 32 -15 48 -15 25 0 28 -4
28 -31 0 -21 -4 -29 -12 -25 -7 2 -32 10 -55 17 -38 10 -43 15 -43 40 0 32 6
35 34 14z m136 -35 c-36 -45 -40 -47 -40 -22 0 13 53 62 68 62 2 0 -11 -18
-28 -40z m428 -13 c-2 -19 -7 -23 -25 -19 -28 5 -29 11 -5 28 25 19 32 17 30
-9z m-1484 -53 c9 -8 16 -19 16 -24 0 -5 3 -15 6 -24 4 -11 1 -16 -11 -16 -12
0 -15 5 -11 16 10 25 -17 11 -31 -17 -9 -17 -13 -19 -13 -7 0 9 5 20 10 23 15
9 2 25 -15 18 -8 -3 -15 0 -15 5 0 13 28 42 40 42 5 0 16 -7 24 -16z m1497 -1
c13 -16 12 -17 -3 -4 -10 7 -18 15 -18 17 0 8 8 3 21 -13z m-23 -18 c-3 -3 -9
2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m112 -30 c0 -13 -50 -36 -61 -29
-14 8 -11 21 13 47 20 23 23 24 35 8 7 -9 12 -20 13 -26z m524 30 c-4 -8 -1
-15 6 -15 7 0 9 -8 5 -19 -3 -11 -1 -22 5 -26 12 -8 13 -25 1 -25 -8 0 -24 37
-22 53 1 4 -6 7 -14 7 -12 0 -12 3 2 20 21 24 24 25 17 5z m-1855 -51 c-18
-18 -36 -31 -40 -29 -4 3 -5 -4 -2 -14 3 -13 -3 -23 -19 -32 -12 -7 -26 -12
-30 -11 -4 1 -5 -4 -2 -12 3 -7 -7 -27 -21 -44 -26 -31 -27 -31 -51 -15 l-25
16 51 49 c51 49 70 81 70 122 0 22 2 23 51 13 l50 -10 -32 -33z m-309 -7 c0
-16 -3 -18 -12 -9 -22 22 -32 12 -11 -10 22 -25 37 -48 30 -48 -2 0 -19 13
-38 29 -18 17 -36 27 -39 25 -2 -3 6 -14 20 -24 14 -11 20 -20 13 -20 -6 0
-15 5 -18 10 -4 6 -10 8 -14 6 -4 -3 -13 0 -21 5 -12 8 -12 12 -2 16 6 2 10 9
6 14 -3 5 4 9 15 9 11 0 22 4 25 8 2 4 14 8 25 9 15 1 21 -4 21 -20z m2126
-23 c8 -18 14 -40 14 -49 0 -23 -17 -18 -27 9 -6 18 -12 22 -28 15 -18 -7 -18
-8 -2 -8 13 -1 17 -7 15 -23 -4 -29 -20 -28 -34 3 -26 53 -25 64 3 81 33 20
41 16 59 -28z m-583 -4 c-11 -9 -95 -42 -98 -38 -1 2 -5 12 -9 23 -5 17 2 22
42 35 41 14 48 14 60 1 6 -8 9 -18 5 -21z m147 -16 c13 -32 13 -31 -5 -31 -9
0 -14 6 -11 13 3 8 1 16 -4 19 -6 4 -10 1 -10 -5 0 -7 -6 -10 -12 -8 -7 3 -19
-2 -27 -9 -8 -8 -22 -12 -33 -10 -10 3 -16 1 -12 -4 3 -5 -2 -9 -10 -9 -9 0
-16 -5 -16 -11 0 -5 -4 -8 -9 -4 -10 5 -79 -19 -160 -56 -24 -11 -46 -18 -49
-15 -10 11 19 33 65 52 27 10 93 42 148 70 108 56 127 57 145 8z m-1300 2 c14
-3 34 -12 45 -21 l20 -16 -20 3 c-11 1 -25 -1 -32 -5 -6 -4 -14 -3 -18 3 -3 5
-14 10 -24 10 -10 0 -24 7 -31 15 -7 9 -15 13 -18 10 -8 -8 70 -75 86 -75 9 0
7 -9 -7 -29 l-21 -29 -40 39 c-22 21 -44 39 -50 39 -14 0 7 51 27 66 11 7 25
9 38 4 11 -5 31 -11 45 -14z m1608 7 c-1 -5 6 -33 15 -65 21 -69 22 -90 3 -65
-7 9 -20 15 -27 12 -16 -6 -39 37 -39 71 0 12 -6 24 -12 27 -8 3 -3 9 12 15
30 13 51 15 48 5z m-353 -43 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4
10 3 0 8 -4 11 -10z m287 -27 c6 -16 12 -35 13 -43 1 -8 6 -24 10 -34 6 -14 5
-17 -3 -12 -7 4 -12 2 -12 -3 0 -6 -3 -11 -7 -11 -10 0 -53 117 -45 124 13 14
33 4 44 -21z m-317 7 c-3 -5 -12 -10 -18 -10 -7 0 -6 4 3 10 19 12 23 12 15 0z
m92 -15 c5 -16 -36 -13 -42 3 -3 9 2 12 17 10 12 -2 23 -8 25 -13z m-1101 -22
c-3 -3 -13 -2 -23 2 -17 7 -17 8 2 15 19 7 34 -5 21 -17z m1238 -31 c10 -31
21 -63 24 -71 3 -9 1 -12 -6 -7 -7 4 -12 2 -12 -4 0 -7 -7 -9 -16 -6 -8 3 -12
2 -9 -3 3 -5 1 -13 -5 -16 -9 -6 -46 64 -64 120 -6 20 7 28 64 44 3 0 13 -25
24 -57z m466 38 c-27 -14 -38 -16 -49 -7 -12 10 -9 13 15 18 58 13 71 9 34
-11z m-2027 -7 c18 -9 35 -16 38 -15 4 0 15 -8 24 -18 17 -19 17 -21 -13 -50
-40 -37 -50 -37 -97 0 -21 17 -42 30 -47 30 -11 0 43 68 55 69 4 1 22 -7 40
-16z m1227 7 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4
11 -10z m-1015 -60 c-4 -7 0 -10 10 -8 10 2 20 -4 22 -12 4 -13 3 -13 -6 0 -9
12 -11 12 -11 1 0 -8 8 -20 18 -28 15 -12 14 -13 -15 -8 -28 6 -34 3 -44 -19
-12 -26 -29 -35 -29 -15 0 5 -5 7 -12 3 -9 -6 -9 -9 0 -12 7 -2 12 -14 12 -26
0 -12 5 -27 11 -33 7 -7 8 -17 2 -28 -9 -15 -11 -15 -26 -1 -8 9 -20 16 -26
16 -6 0 -8 8 -5 18 4 10 3 13 -3 6 -9 -12 -45 -15 -53 -5 -3 3 -35 22 -73 41
-37 19 -80 44 -95 57 -23 18 -24 22 -11 28 11 4 38 -8 75 -34 60 -42 74 -48
74 -32 0 4 26 36 58 70 l57 62 23 -21 c13 -12 26 -19 30 -16 3 4 -4 13 -16 22
-12 8 -20 19 -17 24 3 5 17 -2 31 -15 14 -13 23 -29 19 -35z m1123 38 c-2 -6
-10 -14 -16 -16 -7 -2 -10 2 -6 12 7 18 28 22 22 4z m857 -17 c15 -17 14 -19
-12 -24 -16 -3 -34 0 -43 8 -8 7 -22 10 -30 7 -12 -4 -13 -3 -3 10 18 21 68
20 88 -1z m-2347 -71 c-25 -40 -34 -48 -48 -40 -39 21 -39 34 -2 77 34 39 37
40 58 26 l22 -14 -30 -49z m1082 -47 c0 -4 -10 3 -21 17 -34 42 -59 84 -59
100 0 8 18 -13 40 -47 22 -34 40 -66 40 -70z m479 113 c10 -12 8 -13 -8 -9
-12 3 -21 9 -21 14 0 14 16 11 29 -5z m668 -6 c-1 -21 -21 -27 -32 -10 -8 13
3 30 20 30 8 0 13 -9 12 -20z m-357 6 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4
0 6 5 11 10 11 6 0 10 -2 10 -4z m-580 -27 c0 -4 -7 -6 -15 -3 -9 4 -15 0 -15
-10 0 -9 7 -16 16 -16 8 0 12 -4 9 -10 -10 -16 -23 -12 -35 10 -8 15 -7 24 2
34 13 14 38 11 38 -5z m55 3 c-11 -3 -23 -9 -27 -16 -5 -7 -8 -5 -8 6 0 19 18
28 40 19 12 -4 10 -6 -5 -9z m142 2 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1
17 -2 13 -5z m83 -35 c0 -5 -13 0 -30 13 -16 12 -30 23 -30 25 0 2 14 -3 30
-12 17 -9 30 -20 30 -26z m-160 21 c-20 -13 -33 -13 -25 0 3 6 14 10 23 10 15
0 15 -2 2 -10z m1075 -38 c-3 -3 -13 2 -23 11 -10 10 -22 14 -27 10 -4 -5 -5
-2 -1 4 5 10 13 9 32 -3 13 -9 22 -19 19 -22z m-1146 8 c-20 -11 -54 -37 -75
-60 -27 -28 -40 -36 -46 -27 -5 9 -10 9 -19 0 -15 -15 -22 -73 -8 -73 6 0 8
-8 5 -17 -3 -10 2 -28 12 -40 14 -18 21 -19 42 -11 14 6 30 12 35 13 6 2 22 6
38 10 43 11 31 -2 -25 -29 -75 -34 -98 -40 -98 -24 0 7 -7 26 -15 42 -8 15
-12 32 -9 37 3 5 -2 16 -10 24 -8 9 -13 22 -10 29 3 8 1 17 -5 20 -6 4 -7 14
-4 23 4 11 3 14 -5 9 -7 -4 -12 -3 -12 3 0 17 20 23 35 11 10 -8 15 -9 15 -2
0 6 -9 14 -20 17 -21 7 -28 25 -10 25 6 0 10 -5 10 -11 0 -6 8 -8 18 -5 9 2
33 7 52 11 34 7 34 6 13 -9 -12 -9 -29 -13 -40 -9 -17 6 -17 5 1 -16 l20 -22
35 35 c36 34 87 65 106 65 6 0 -6 -9 -26 -19z m591 16 c0 -3 -4 -8 -10 -11 -5
-3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m290 -21 c-7 -9 -15 -13 -19
-10 -3 3 1 10 9 15 21 14 24 12 10 -5z m-604 -31 c-4 -14 -18 -38 -33 -52 -14
-15 -22 -21 -19 -14 4 6 3 12 -3 12 -5 0 -12 -6 -14 -12 -4 -10 -6 -10 -6 0
-1 7 6 15 14 18 8 4 15 13 15 21 0 8 4 11 10 8 5 -3 12 6 16 20 3 14 11 25 16
25 6 0 7 -11 4 -26z m899 6 c-3 -5 -12 -10 -18 -10 -7 0 -6 4 3 10 19 12 23
12 15 0z m-875 -20 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0
11 -4 11 -10z m140 -11 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6
-3 10 -11 10 -16z m690 15 c0 -3 -7 -12 -15 -20 -13 -14 -15 -13 -15 5 0 12 6
21 15 21 8 0 15 -3 15 -6z m-74 -17 c6 -6 -3 -8 -31 -7 -6 0 -26 -15 -58 -46
-12 -12 -40 -34 -61 -50 -32 -23 -37 -25 -28 -9 14 26 84 94 114 110 24 13 52
14 64 2z m-1286 -52 c13 -31 20 -59 16 -62 -3 -3 -6 -1 -6 5 0 7 -11 35 -24
62 -13 28 -21 50 -16 50 4 0 18 -25 30 -55z m606 30 c-11 -8 -22 -12 -25 -9
-6 6 19 24 34 24 6 -1 1 -7 -9 -15z m803 -19 c-2 -2 -20 -6 -39 -9 -19 -2 -27
-2 -18 0 9 2 22 11 29 19 8 10 15 12 22 5 6 -6 9 -13 6 -15z m-1260 -83 l25
-12 -28 -7 c-20 -5 -32 -2 -44 11 -16 16 -16 17 5 6 32 -16 36 -14 13 9 -11
11 -20 32 -19 48 0 26 1 25 12 -8 7 -19 23 -40 36 -47z m266 58 c-3 -6 -16
-16 -28 -22 -20 -10 -20 -9 3 14 25 24 38 28 25 8z m-1165 -1 c0 -5 -5 -10
-11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1224 -15 c-4 -8 -11
-12 -16 -9 -6 4 -5 10 3 15 19 12 19 11 13 -6z m-1225 -8 c-2 -1 -12 -9 -22
-16 -15 -12 -17 -12 -11 3 3 9 13 16 22 16 8 0 13 -1 11 -3z m-679 -17 c8 -5
11 -10 5 -10 -5 0 -17 5 -25 10 -8 5 -10 10 -5 10 6 0 17 -5 25 -10z m2900 -7
c7 -6 -31 -33 -46 -33 -7 0 -9 10 -6 25 4 21 9 24 26 19 11 -4 23 -9 26 -11z
m-920 -3 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10
-10z m-886 -24 c-3 -8 -19 -19 -36 -25 -38 -13 -38 -13 -38 -2 0 5 13 12 30
16 16 4 32 11 35 16 9 14 15 11 9 -5z m629 7 c-7 -2 -19 -2 -25 0 -7 3 -2 5
12 5 14 0 19 -2 13 -5z m47 -3 c0 -5 -8 -10 -17 -10 -15 0 -16 2 -3 10 19 12
20 12 20 0z m680 1 c0 -5 -9 -11 -21 -14 -16 -4 -18 -3 -8 9 13 16 29 19 29 5z
m-760 -28 c0 -5 -9 -19 -19 -32 -15 -20 -18 -21 -18 -5 0 11 7 24 16 31 19 15
21 15 21 6z m-1950 -14 c72 -16 77 -18 60 -30 -11 -8 -4 -9 25 -4 31 4 37 3
25 -5 -12 -9 -8 -10 19 -6 26 5 32 3 28 -8 -4 -9 3 -16 18 -20 13 -3 31 -9 41
-13 12 -5 15 -3 9 6 -6 10 -3 11 14 2 24 -13 28 -23 6 -15 -26 11 -16 -2 32
-40 62 -48 48 -46 -23 4 -67 47 -83 53 -237 84 -77 16 -126 22 -140 17 -24 -9
-51 -37 -60 -61 -4 -10 -6 -8 -6 6 -2 40 69 90 129 93 8 0 35 -4 60 -10z
m3030 3 c0 -5 -20 -17 -45 -29 -36 -16 -47 -18 -55 -8 -8 10 -1 17 32 28 50
18 68 20 68 9z m-985 -12 c-3 -5 -14 -10 -23 -9 -14 0 -13 2 3 9 27 11 27 11
20 0z m-155 -27 c0 -12 -89 -49 -107 -45 -9 2 -12 -1 -8 -7 4 -7 -4 -11 -20
-11 -21 0 -26 4 -21 16 5 14 4 15 -8 5 -8 -7 -17 -8 -20 -3 -3 4 8 16 25 26
16 9 29 12 29 7 0 -16 62 -13 84 4 21 16 46 20 46 8z m50 -23 c-8 -5 -22 -9
-30 -9 -10 0 -8 3 5 9 27 12 43 12 25 0z m-835 -10 c3 -5 1 -10 -4 -10 -6 0
-11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m585 -20 c0 -5 -10 -10 -22 -10
-19 0 -20 2 -8 10 19 13 30 13 30 0z m153 -15 c-11 -8 -23 -24 -26 -35 -5 -18
-1 -21 21 -18 21 2 26 8 25 26 -2 12 2 22 7 22 6 0 10 -16 10 -35 0 -24 -5
-35 -15 -35 -8 0 -15 -5 -15 -12 0 -6 -3 -8 -7 -5 -3 4 -12 2 -20 -4 -17 -15
-44 6 -36 27 3 9 0 12 -8 9 -9 -3 -14 3 -15 20 -2 28 5 31 25 13 11 -11 13
-10 9 2 -3 9 6 21 26 31 37 18 49 15 19 -6z m-1537 -17 l19 -23 -25 20 c-14
11 -27 21 -29 22 -2 2 0 3 6 3 5 0 18 -10 29 -22z m153 -63 c25 -22 67 -57 93
-78 42 -34 46 -40 36 -57 -12 -19 -13 -19 -23 0 -19 35 -107 121 -172 167 -35
25 -63 47 -63 50 0 10 86 -44 129 -82z m246 75 c3 -5 1 -10 -4 -10 -6 0 -11 5
-11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m925 -15 c0 -8 -4 -15 -10 -15 -5 0 -7
7 -4 15 4 8 8 15 10 15 2 0 4 -7 4 -15z m-34 -12 c7 -10 14 -27 14 -38 0 -11
7 -30 15 -42 9 -13 11 -24 6 -28 -13 -8 -41 34 -41 62 0 13 -4 23 -9 23 -6 0
-9 9 -8 20 2 25 6 25 23 3z m69 7 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2
10 4 10 3 0 8 -4 11 -10z m88 -25 c-3 -8 -9 -15 -14 -15 -10 0 -12 24 -3 33
11 11 24 -3 17 -18z m-893 0 c0 -8 -2 -15 -4 -15 -2 0 -6 7 -10 15 -3 8 -1 15
4 15 6 0 10 -7 10 -15z m660 -100 c10 -9 30 -17 44 -17 19 0 27 -9 40 -41 17
-43 15 -54 -6 -41 -7 5 -17 9 -23 10 -5 0 -15 2 -22 2 -12 2 -46 56 -88 141
-34 67 -31 77 5 15 16 -28 39 -59 50 -69z m190 94 c0 -11 -4 -17 -10 -14 -5 3
-10 13 -10 21 0 8 5 14 10 14 6 0 10 -9 10 -21z m-20 -24 c0 -8 -4 -15 -10
-15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m1157 -11 c-3 -4 9
-23 28 -43 19 -20 40 -52 46 -71 6 -19 23 -59 36 -87 13 -29 22 -61 19 -70 -4
-11 -44 -32 -106 -57 -137 -53 -134 -50 -115 -111 19 -65 19 -74 -3 -68 -10 2
-24 -3 -31 -11 -8 -9 -19 -16 -25 -16 -6 0 4 13 21 28 23 18 30 31 24 40 -6
11 -20 5 -61 -26 -49 -38 -190 -106 -255 -123 -23 -7 -19 -8 23 -5 28 2 52 0
52 -4 0 -8 -75 -20 -129 -20 -61 0 -301 57 -301 72 0 4 -26 15 -57 23 -78 22
-163 56 -163 65 0 4 9 10 20 13 24 6 80 -13 80 -28 0 -26 96 -47 273 -60 98
-8 109 -25 15 -25 -34 0 -59 -2 -56 -5 12 -13 225 -5 273 9 98 28 157 55 201
91 57 47 69 69 55 103 -13 33 -33 110 -36 138 -2 12 -7 30 -13 40 -6 11 -12
44 -14 73 l-3 55 34 7 c18 4 37 12 41 18 3 7 20 14 36 17 16 3 31 8 34 12 7
10 43 31 54 31 5 1 7 -2 3 -5z m-1187 -85 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10
16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m75 11 c-3 -5 -12 -10 -18 -10 -7 0 -6 4
3 10 19 12 23 12 15 0z m866 -38 c-20 -3 -25 -13 -22 -39 1 -7 -3 -13 -9 -13
-6 0 -8 5 -4 11 4 8 -1 9 -16 4 -17 -5 -21 -3 -18 10 1 9 6 15 10 13 3 -2 16
10 29 26 21 27 23 28 36 10 13 -17 12 -19 -6 -22z m-901 18 c0 -5 -4 -10 -10
-10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-1045 -10 c3 -5 1
-10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m113 -56 c-7
-15 -19 -29 -26 -32 -7 -2 -2 12 10 31 27 40 36 41 16 1z m1593 6 c30 -22 30
-50 0 -50 -24 0 -41 20 -41 47 0 28 4 28 41 3z m-1704 -22 c-3 -7 -5 -2 -5 12
0 14 2 19 5 13 2 -7 2 -19 0 -25z m1695 -45 c17 -15 26 -63 11 -63 -16 0 -43
35 -43 57 0 27 7 29 32 6z m-1702 -28 c-7 -9 -15 -13 -19 -10 -3 3 1 10 9 15
21 14 24 12 10 -5z m1925 5 c3 -5 3 -15 -1 -21 -6 -11 -23 6 -24 24 0 10 18 9
25 -3z m-119 -77 c-11 -11 -19 6 -11 24 8 17 8 17 12 0 3 -10 2 -21 -1 -24z
m571 -45 c-3 -10 0 -15 8 -12 13 5 30 -24 20 -34 -3 -3 -5 0 -5 8 0 9 -3 10
-14 1 -11 -9 -16 -3 -25 33 -14 58 -14 65 5 41 8 -11 13 -28 11 -37z m-1389
-17 c2 -6 -1 -11 -6 -11 -14 0 -62 40 -62 52 0 12 63 -26 68 -41z m17 29 c10
-11 14 -20 8 -20 -5 0 -18 9 -28 20 -10 11 -14 20 -8 20 5 0 18 -9 28 -20z
m162 -15 c12 -39 14 -36 -54 -71 -24 -12 -43 -17 -43 -12 0 5 14 15 31 21 28
11 30 15 25 49 -6 34 0 44 25 47 3 1 10 -15 16 -34z m1606 0 c-27 -19 -180
-85 -196 -85 -19 0 72 50 138 75 71 28 87 31 58 10z m-1443 -15 c-36 -11 -52
-11 -45 0 3 6 21 10 38 9 31 -1 31 -1 7 -9z m1076 -72 c4 -6 3 -8 -3 -5 -10 6
-87 -13 -99 -26 -4 -4 -19 -7 -33 -8 -24 0 -24 -1 -6 -9 15 -7 9 -9 -25 -9
-25 -1 -56 -4 -70 -6 -16 -3 -11 2 15 14 22 11 74 27 114 35 41 9 76 18 79 21
9 8 20 6 28 -7z m-1327 -102 c-5 -6 -9 -15 -9 -20 0 -6 4 -5 9 3 5 8 16 11 26
7 14 -5 15 -9 5 -22 -7 -8 -19 -13 -27 -10 -9 4 -21 -6 -31 -24 -20 -35 -29
-36 -61 -10 -21 19 -22 23 -10 51 l12 31 20 -27 20 -27 14 32 c10 25 10 36 2
46 -6 8 -15 12 -19 9 -5 -3 -12 0 -16 6 -5 8 -3 9 6 4 9 -6 10 -1 5 16 -5 19
0 16 28 -16 22 -25 32 -44 26 -49z m1391 68 c0 -2 -7 -4 -15 -4 -8 0 -15 4
-15 10 0 5 7 7 15 4 8 -4 15 -8 15 -10z m-1280 -14 c0 -5 -5 -10 -11 -10 -5 0
-7 -4 -4 -10 3 -5 0 -10 -8 -10 -23 0 -28 12 -9 26 21 16 32 17 32 4z m1053
-77 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m234 1 c-3 -3 -12
-4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-547 -14 c-8 -5 -19 -10 -25 -10
-5 0 -3 5 5 10 8 5 20 10 25 10 6 0 3 -5 -5 -10z m467 3 c-20 -2 -52 -2 -70 0
-17 2 0 4 38 4 39 0 53 -2 32 -4z m-507 -17 c0 -11 -19 -15 -25 -6 -3 5 1 10
9 10 9 0 16 -2 16 -4z m378 -16 c29 -5 83 -10 120 -10 65 -1 66 -1 36 -14 -41
-18 -152 -6 -214 23 -46 21 -41 21 58 1z m12 -70 c13 -9 13 -10 0 -10 -8 0
-22 5 -30 10 -13 9 -13 10 0 10 8 0 22 -5 30 -10z m145 -20 l30 -8 -35 0 c-19
0 -44 3 -55 8 -18 8 -18 9 5 8 14 0 39 -4 55 -8z m-65 -70 c0 -5 -7 -10 -15
-10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m-1132 -91 c-2 -6 -8
-10 -13 -10 -5 0 -11 4 -13 10 -2 6 4 11 13 11 9 0 15 -5 13 -11z m1587 -29
c-3 -5 -11 -10 -16 -10 -6 0 -7 5 -4 10 3 6 11 10 16 10 6 0 7 -4 4 -10z
m-385 -24 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25 14 25 6z m105 -6
c15 -6 7 -9 -30 -9 -36 -1 -46 2 -35 9 18 12 38 12 65 0z m-174 -54 c55 -25
231 -53 269 -43 11 3 20 2 20 -3 0 -22 -149 -17 -251 10 -25 6 -59 22 -75 35
-37 31 -29 31 37 1z m-368 -82 c-9 -22 -34 -60 -56 -86 -21 -27 -35 -53 -31
-60 4 -7 3 -8 -5 -4 -6 4 -20 2 -29 -6 -16 -12 -16 -11 -2 7 8 11 31 39 50 62
20 22 47 62 60 87 28 55 38 55 13 0z m-590 -1 c-7 -2 -19 -2 -25 0 -7 3 -2 5
12 5 14 0 19 -2 13 -5z m-70 -10 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0
35 -2 23 -4z m664 -60 c-26 -41 -67 -82 -67 -67 0 5 12 20 25 33 14 13 33 36
42 52 9 16 19 27 21 25 2 -2 -8 -21 -21 -43z m-607 -3 c0 -5 -5 -10 -11 -10
-5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m620 -79 c-6 -23 -15 -39 -20
-36 -4 3 -1 23 7 45 20 51 28 45 13 -9z m-731 -5 c-2 -2 -17 -6 -34 -10 -22
-5 -26 -4 -15 4 14 9 59 15 49 6z m94 -13 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22
4 25 0 35 -2 23 -4z m581 -61 c3 -5 -9 -19 -27 -33 l-32 -23 25 31 c29 37 27
36 34 25z m18 -34 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z
m-414 -44 l47 -14 -60 5 c-33 3 -80 12 -105 20 l-45 15 58 -6 c33 -4 80 -13
105 -20z"/>
<path d="M2658 5033 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"/>
<path d="M2598 5023 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"/>
<path d="M2057 4739 c-32 -23 -56 -43 -54 -46 5 -4 117 76 117 83 0 7 -5 4
-63 -37z"/>
<path d="M1470 3271 c0 -5 5 -13 10 -16 6 -3 10 -2 10 4 0 5 -4 13 -10 16 -5
3 -10 2 -10 -4z"/>
<path d="M1736 3215 c4 -8 10 -12 15 -9 14 8 10 24 -6 24 -9 0 -12 -6 -9 -15z"/>
<path d="M1846 2977 c-3 -12 -9 -16 -17 -12 -7 5 -10 3 -7 -6 3 -8 19 -14 41
-14 34 -1 35 0 20 17 -10 11 -12 18 -5 18 7 0 12 4 12 8 0 17 -39 7 -44 -11z"/>
<path d="M1000 2700 c0 -5 10 -10 23 -10 18 0 19 2 7 10 -19 13 -30 13 -30 0z"/>
<path d="M2625 5519 c13 -5 -19 -6 -85 -3 -126 8 -128 -4 -3 -16 48 -5 95 -11
103 -14 8 -3 22 -1 30 4 13 9 12 12 -4 25 -11 8 -29 15 -40 14 -21 0 -21 -1
-1 -10z"/>
<path d="M2350 5500 c0 -5 9 -10 19 -10 11 0 23 5 26 10 4 6 -5 10 -19 10 -14
0 -26 -4 -26 -10z"/>
<path d="M2290 5490 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0
-15 -4 -15 -10z"/>
<path d="M2193 5463 c-39 -13 -58 -33 -33 -33 6 0 10 5 10 11 0 6 7 9 15 5 8
-3 15 -1 15 5 0 6 7 9 15 5 8 -3 15 -1 15 4 0 5 10 11 23 13 18 4 19 4 2 5
-11 0 -39 -6 -62 -15z"/>
<path d="M2111 5421 c-7 -5 -9 -11 -5 -14 5 -3 15 1 22 9 14 16 5 18 -17 5z"/>
<path d="M3170 5420 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
<path d="M2045 5379 c-11 -16 -1 -19 13 -3 7 8 8 14 3 14 -5 0 -13 -5 -16 -11z"/>
<path d="M1438 5364 c-4 -5 0 -18 8 -29 15 -20 17 -12 5 19 -4 11 -10 15 -13
10z"/>
<path d="M2010 5361 c0 -4 -30 -31 -67 -59 -38 -27 -79 -61 -92 -75 -13 -14
-29 -23 -35 -21 -20 8 -88 -66 -120 -129 -30 -61 -29 -93 1 -38 24 42 215 231
281 277 49 35 64 54 42 54 -5 0 -10 -4 -10 -9z m-230 -206 c-49 -50 -67 -60
-30 -17 31 35 61 62 68 62 3 0 -14 -20 -38 -45z"/>
<path d="M3215 5360 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0
-7 -4 -4 -10z"/>
<path d="M1745 5264 c-140 -64 -155 -70 -197 -84 -41 -12 -59 -30 -32 -30 38
0 324 126 339 150 10 17 -6 12 -110 -36z"/>
<path d="M1430 5236 c0 -8 5 -18 10 -21 6 -3 10 1 10 9 0 8 -4 18 -10 21 -5 3
-10 -1 -10 -9z"/>
<path d="M1380 5215 c-1 -21 43 -155 51 -155 5 0 9 1 9 3 0 9 -59 160 -60 152z"/>
<path d="M1460 5210 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
-4 -4 -4 -10z"/>
<path d="M1525 5100 c3 -5 11 -10 16 -10 6 0 7 5 4 10 -3 6 -11 10 -16 10 -6
0 -7 -4 -4 -10z"/>
<path d="M1120 4959 c0 -19 5 -41 10 -49 7 -10 8 -1 4 30 -8 56 -14 64 -14 19z"/>
<path d="M3745 4981 c-3 -6 -1 -11 4 -11 6 0 11 -5 11 -11 0 -6 -7 -8 -17 -4
-15 5 -16 4 -5 -7 15 -15 47 1 47 23 0 17 -31 24 -40 10z"/>
<path d="M1158 4836 c9 -25 18 -43 20 -41 6 5 -21 85 -28 85 -4 0 0 -20 8 -44z"/>
<path d="M1237 4853 c-20 -40 -27 -76 -18 -91 5 -9 10 3 15 34 3 26 11 53 17
61 7 7 9 16 6 19 -3 3 -12 -7 -20 -23z"/>
<path d="M1518 4853 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"/>
<path d="M1820 4843 c0 -13 5 -23 10 -23 13 0 13 11 0 30 -8 12 -10 11 -10 -7z"/>
<path d="M1284 4776 c-3 -14 -2 -32 3 -41 7 -12 10 -6 11 24 2 46 -4 54 -14
17z"/>
<path d="M3423 4753 c-19 -22 -20 -27 -8 -39 9 -9 24 -12 39 -8 22 5 23 8 14
35 -13 39 -19 41 -45 12z"/>
<path d="M1182 4750 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z"/>
<path d="M3500 4709 c0 -16 4 -19 18 -14 9 4 34 9 55 12 50 7 29 23 -30 23
-37 0 -43 -3 -43 -21z"/>
<path d="M1093 4674 c-33 -63 -34 -214 -1 -307 12 -33 16 -36 31 -25 13 10 18
36 23 123 7 112 -2 172 -29 210 -14 18 -15 18 -24 -1z"/>
<path d="M4299 4604 c-10 -28 -28 -219 -29 -312 0 -36 3 -43 18 -40 15 3 17
16 15 118 -1 63 2 146 8 184 10 75 6 95 -12 50z"/>
<path d="M4356 4613 c-26 -89 -36 -363 -13 -363 11 0 15 38 20 173 3 94 9 180
12 190 4 9 3 17 -3 17 -6 0 -13 -8 -16 -17z"/>
<path d="M4616 4621 c-6 -9 44 -35 52 -27 7 8 -19 36 -34 36 -7 0 -15 -4 -18
-9z"/>
<path d="M4050 4609 c0 -6 6 -9 14 -6 7 3 24 -1 36 -10 21 -15 21 -14 8 6 -13
22 -58 29 -58 10z"/>
<path d="M4120 4611 c0 -4 16 -7 36 -5 29 2 33 0 23 -12 -9 -11 -9 -14 1 -14
9 0 10 -3 1 -13 -6 -8 -7 -18 -3 -23 4 -5 -5 1 -19 14 -16 14 -28 19 -31 12
-2 -8 -11 -7 -31 3 -14 8 -24 17 -20 21 4 4 0 4 -9 1 -9 -4 -14 -13 -11 -21 3
-8 0 -14 -6 -14 -6 0 -11 7 -11 15 0 8 -4 15 -10 15 -5 0 -11 -19 -11 -42 -1
-24 -3 -59 -4 -78 -9 -111 -16 -198 -20 -222 -3 -20 0 -28 10 -28 12 0 15 17
15 88 0 85 11 127 27 107 5 -6 7 -53 5 -106 l-3 -97 -40 -6 c-36 -6 -50 -18
-31 -29 13 -9 327 23 330 33 2 5 18 10 35 11 31 1 31 1 7 9 -14 4 -43 8 -65 9
l-40 1 6 167 c3 93 9 179 14 192 5 17 4 22 -6 19 -17 -6 -26 -54 -34 -188 -8
-147 -15 -190 -27 -190 -12 0 -5 284 8 349 l7 31 -47 0 c-25 0 -46 -4 -46 -9z
m-40 -59 c0 -4 -9 -15 -19 -24 -14 -12 -21 -13 -24 -5 -2 7 3 17 12 24 19 14
31 16 31 5z m67 -12 c18 -22 16 -34 -2 -16 -9 8 -23 12 -32 9 -10 -4 -14 -2
-10 4 4 6 1 14 -5 17 -7 2 -2 4 12 3 14 -1 30 -9 37 -17z m-31 -40 c0 -17 -38
-22 -52 -7 -5 4 0 5 11 1 14 -6 17 -4 13 7 -4 9 0 15 11 15 9 0 17 -7 17 -16z
m64 -4 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25 14 25 6z m-115 -26 c17
-18 17 -20 2 -14 -14 5 -16 2 -10 -12 6 -16 5 -17 -9 -4 -11 11 -13 17 -4 23
8 5 7 10 -4 17 -8 5 -10 10 -4 10 6 0 19 -9 29 -20z m65 -15 c-7 -9 -15 -13
-19 -10 -3 3 1 10 9 15 21 14 24 12 10 -5z m30 -120 c0 -57 -4 -95 -10 -95
-11 0 -14 172 -3 183 12 13 13 7 13 -88z m-52 -15 c-2 -71 -7 -100 -15 -100
-10 0 -13 25 -13 93 0 52 3 97 7 100 19 20 24 -2 21 -93z"/>
<path d="M4150 4581 c0 -5 5 -13 10 -16 6 -3 10 -2 10 4 0 5 -4 13 -10 16 -5
3 -10 2 -10 -4z"/>
<path d="M4656 4571 c-4 -5 3 -7 14 -4 23 6 26 13 6 13 -8 0 -17 -4 -20 -9z"/>
<path d="M1306 4527 c3 -10 9 -15 12 -12 3 3 0 11 -7 18 -10 9 -11 8 -5 -6z"/>
<path d="M4890 4510 c0 -5 7 -7 15 -4 8 4 15 8 15 10 0 2 -7 4 -15 4 -8 0 -15
-4 -15 -10z"/>
<path d="M4921 4481 c-9 -6 -4 -10 16 -14 34 -6 41 -2 16 11 -11 6 -25 7 -32
3z"/>
<path d="M3951 4194 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z"/>
<path d="M4672 4170 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z"/>
<path d="M4205 4168 c-156 -11 -245 -28 -255 -49 -6 -10 -10 -19 -10 -21 0 -2
55 -4 123 -4 67 0 109 3 92 6 -22 4 -4 9 64 17 52 6 97 16 101 23 4 7 16 9 29
5 12 -3 19 -10 16 -15 -3 -4 2 -11 11 -14 10 -4 14 -13 10 -24 -5 -14 -4 -14
9 2 10 14 12 23 4 32 -7 8 -7 14 1 19 24 15 2 27 -50 29 -30 0 -95 -2 -145 -6z"/>
<path d="M1220 4160 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
-4 -4 -4 -10z"/>
<path d="M3419 4155 c-1 -6 -1 -14 0 -18 1 -4 4 -24 7 -45 3 -20 7 -45 10 -54
3 -10 1 -18 -5 -18 -6 0 -11 -8 -11 -18 0 -10 -5 -23 -12 -30 -8 -8 -8 -15 2
-27 8 -10 9 -15 1 -15 -6 0 -11 -7 -11 -15 0 -8 -4 -15 -9 -15 -11 0 -12 -68
-2 -75 4 -2 13 19 21 48 7 29 17 58 23 65 5 6 7 12 4 12 -3 0 1 16 9 36 8 19
16 57 17 84 2 40 -2 54 -20 72 -13 12 -24 18 -24 13z"/>
<path d="M5270 4141 c0 -6 14 -11 30 -11 17 0 30 -4 30 -10 0 -5 -8 -7 -17 -3
-15 5 -16 3 -6 -7 10 -11 16 -10 32 4 26 23 51 14 51 -18 0 -13 3 -33 6 -43 5
-15 4 -16 -5 -3 -9 12 -12 13 -20 1 -6 -9 -11 -10 -15 -2 -4 6 -16 15 -26 21
-18 10 -18 9 -4 -17 7 -16 14 -35 14 -43 0 -11 13 -15 49 -16 44 -1 50 2 67
30 17 30 17 30 0 16 -16 -13 -20 -12 -33 5 -8 11 -12 30 -10 42 2 13 -1 29 -7
37 -14 19 -136 34 -136 17z"/>
<path d="M3721 4114 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z"/>
<path d="M5113 4123 c-7 -3 -13 -11 -13 -19 0 -8 -6 -11 -15 -8 -19 8 -20 -10
-1 -25 11 -10 16 -8 24 6 14 25 26 9 12 -16 -12 -24 -30 -27 -48 -9 -19 19
-14 -3 5 -24 15 -17 15 -20 3 -28 -12 -7 -12 -12 -2 -22 10 -10 15 -6 24 20 7
18 19 32 29 32 24 0 32 60 11 81 -10 9 -23 15 -29 12z"/>
<path d="M1113 4114 c3 -4 2 -16 -4 -28 -10 -20 -10 -20 5 -2 19 24 20 36 4
36 -6 0 -8 -3 -5 -6z"/>
<path d="M4285 4100 c27 -12 35 -12 35 0 0 6 -12 10 -27 9 -25 0 -26 -1 -8 -9z"/>
<path d="M5205 4090 c3 -5 15 -10 25 -10 10 0 22 5 25 10 4 6 -7 10 -25 10
-18 0 -29 -4 -25 -10z"/>
<path d="M3710 4080 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
<path d="M4265 4060 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0
-7 -4 -4 -10z"/>
<path d="M4300 4063 c0 -5 7 -17 15 -27 15 -20 20 -10 9 18 -6 16 -24 22 -24
9z"/>
<path d="M4805 4059 c-4 -6 -5 -12 -2 -15 2 -3 7 2 10 11 7 17 1 20 -8 4z"/>
<path d="M4840 4032 c0 -10 7 -27 15 -38 20 -26 19 -38 -2 -29 -15 5 -16 4 -5
-6 21 -22 13 -32 -22 -26 -31 5 -34 3 -39 -21 -3 -16 -1 -31 7 -37 13 -11 19
-55 7 -55 -5 0 -14 7 -21 15 -11 13 -14 13 -26 -2 -18 -24 -17 -58 1 -73 8 -7
16 -30 16 -54 l1 -41 7 37 c8 40 28 71 42 63 4 -3 4 -16 -1 -29 -11 -31 -17
-217 -6 -234 4 -7 1 -15 -9 -18 -10 -4 -12 -10 -6 -18 4 -6 5 -20 1 -31 -7
-19 -8 -19 -18 5 -8 21 -17 26 -43 25 -33 0 -34 -2 -37 -42 -2 -22 1 -56 6
-75 8 -29 13 -33 38 -31 16 1 30 6 32 10 1 4 16 30 33 56 l30 48 28 -21 c16
-11 36 -20 44 -20 8 0 17 -7 21 -15 3 -8 12 -15 21 -15 8 0 15 -4 15 -10 0
-16 -14 -12 -37 10 -17 16 -23 17 -32 6 -13 -16 -4 -49 12 -39 5 3 7 1 4 -4
-4 -6 2 -30 12 -54 11 -24 22 -67 26 -96 6 -50 10 -54 58 -85 29 -18 59 -33
67 -33 23 -1 58 41 70 84 33 125 295 195 507 136 10 -3 2 2 -17 11 -40 19
-104 35 -137 35 -13 -1 -23 4 -23 9 0 6 10 10 23 10 12 0 29 5 37 10 20 13
-110 13 -180 0 -40 -8 -57 -7 -68 2 -13 11 -15 10 -9 -4 7 -20 -3 -24 -20 -7
-8 8 -17 8 -31 0 -28 -15 -37 -14 -23 3 6 8 34 23 61 35 27 12 51 25 55 30 3
6 26 13 50 17 25 3 45 10 45 15 0 5 7 9 16 9 14 0 45 10 174 56 13 4 13 6 0
14 -8 5 -23 7 -32 4 -23 -7 -168 34 -191 54 -18 16 -115 29 -143 18 -14 -5
-12 -10 12 -33 26 -25 27 -28 10 -31 -10 -2 -23 2 -27 9 -24 40 -26 41 -61 31
-20 -5 -41 -6 -48 -2 -11 7 -50 -21 -50 -35 0 -2 -21 -26 -46 -52 -25 -26 -44
-40 -41 -31 3 9 11 45 17 80 18 104 19 107 58 128 65 34 86 58 75 82 -9 20
-10 19 -33 -18 -22 -36 -24 -37 -28 -16 -2 13 4 34 12 48 25 37 3 29 -56 -22
l-53 -45 -3 58 c-1 32 -5 69 -8 83 -6 24 -6 25 -14 4 -7 -18 -14 -21 -42 -15
-22 5 -33 12 -32 24 2 52 5 57 27 58 20 1 20 2 2 6 -30 7 -47 33 -34 50 20 23
65 16 85 -14 11 -17 19 -23 22 -15 3 10 7 10 18 1 11 -9 27 -9 70 0 55 13 76
33 56 53 -9 9 -18 4 -35 -15 -29 -35 -35 -34 -42 6 -4 19 -12 34 -18 35 -59 5
-153 25 -155 32 -6 18 -42 11 -42 -8z m30 -241 c0 -22 5 -43 10 -46 6 -3 10 3
10 15 0 18 5 21 33 18 30 -3 32 -5 30 -38 -1 -19 -2 -86 -2 -147 l-1 -113 -34
0 c-30 0 -34 3 -38 30 -3 17 -2 51 2 75 7 43 6 44 -24 47 -29 3 -31 5 -29 40
1 21 10 49 19 63 11 17 14 35 10 60 -4 22 -3 35 4 35 5 0 10 -18 10 -39z m332
-269 c-6 -5 -22 -28 -35 -52 -16 -31 -36 -51 -61 -63 -21 -10 -40 -16 -43 -14
-2 3 29 37 69 75 40 39 75 68 78 66 2 -3 -1 -8 -8 -12z m-332 -7 c0 -8 -9 -15
-20 -15 -20 0 -26 11 -13 23 12 13 33 7 33 -8z m-110 -90 c7 -8 19 -15 27 -15
22 0 -34 -89 -57 -90 -3 0 -3 27 -2 60 4 62 10 71 32 45z m240 -145 c32 -68
20 -73 -13 -5 -15 30 -23 55 -19 55 5 0 19 -22 32 -50z m455 40 c-3 -5 -25
-10 -48 -9 -33 0 -38 2 -22 9 28 12 78 12 70 0z m-425 -123 c0 -14 -39 -41
-48 -33 -6 7 27 46 40 46 4 0 8 -6 8 -13z m67 -27 c1 -10 -1 -21 -5 -24 -4 -2
-7 9 -7 25 -1 31 7 30 12 -1z"/>
<path d="M5234 4029 c-3 -6 -22 -17 -40 -25 -23 -9 -34 -21 -34 -34 0 -23 -2
-23 39 -9 24 8 31 17 31 36 0 22 2 24 15 13 12 -10 15 -10 15 3 0 8 6 18 13
20 6 3 2 6 -10 6 -12 1 -25 -4 -29 -10z"/>
<path d="M1275 3990 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0
-7 -4 -4 -10z"/>
<path d="M3538 3841 c-10 -3 -14 -11 -10 -18 5 -7 13 -9 21 -4 19 12 10 30
-11 22z"/>
<path d="M3353 3801 c-9 -25 -7 -33 13 -57 13 -15 26 -25 29 -22 3 3 -5 16
-18 30 -19 20 -20 27 -10 37 14 13 18 41 5 41 -4 0 -13 -13 -19 -29z"/>
<path d="M5576 3762 c18 -15 37 -37 43 -50 7 -12 16 -20 21 -17 6 4 7 -1 3
-11 -4 -11 -2 -15 4 -11 5 3 21 -6 35 -21 28 -31 61 -82 53 -82 -3 0 11 -23
31 -52 19 -29 38 -65 41 -80 7 -33 12 -38 36 -29 17 6 17 8 -1 27 -15 15 -17
25 -10 38 5 10 7 20 4 23 -3 4 -6 1 -6 -5 0 -7 -4 -12 -10 -12 -5 0 -10 7 -10
15 0 8 -5 15 -11 15 -6 0 -8 7 -5 17 4 9 1 20 -6 25 -10 6 -10 10 2 18 10 7
12 12 4 18 -6 4 -19 23 -29 42 -9 19 -35 56 -56 81 -31 38 -34 46 -18 42 11
-3 26 -14 32 -24 19 -30 29 -22 13 10 -17 31 -68 49 -146 50 l-45 0 31 -27z"/>
<path d="M3310 3730 c-12 -16 -18 -30 -13 -30 5 0 17 14 26 30 10 17 16 30 13
30 -2 0 -14 -13 -26 -30z"/>
<path d="M1608 3673 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"/>
<path d="M1558 3663 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"/>
<path d="M5480 3644 c0 -12 34 -33 53 -34 20 0 22 11 5 28 -12 12 -58 17 -58
6z"/>
<path d="M5171 3623 c13 -15 12 -16 -9 -11 -15 4 -22 2 -19 -5 2 -7 15 -12 28
-12 17 0 25 6 27 23 3 17 -2 22 -19 22 -19 0 -20 -2 -8 -17z"/>
<path d="M3150 3565 c-11 -13 -10 -14 4 -9 9 3 16 10 16 15 0 13 -6 11 -20 -6z"/>
<path d="M5590 3470 c-19 -4 -53 -14 -74 -22 l-39 -14 104 -18 c162 -26 150
-26 143 -2 -15 52 -63 72 -134 56z"/>
<path d="M3890 3421 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0
-10 -4 -10 -9z"/>
<path d="M5765 3411 c-3 -5 -1 -12 5 -16 5 -3 10 1 10 9 0 18 -6 21 -15 7z"/>
<path d="M3724 3340 c-31 -12 -54 -49 -54 -86 0 -77 114 -100 172 -35 35 39
36 74 3 106 -25 26 -78 33 -121 15z"/>
<path d="M5563 3340 c-13 -5 -23 -12 -23 -15 0 -8 53 6 65 16 12 12 -13 11
-42 -1z"/>
<path d="M5911 3306 c-13 -54 -13 -56 -1 -56 9 0 30 61 30 88 0 29 -19 8 -29
-32z"/>
<path d="M5625 3331 c-2 -5 13 -13 35 -20 48 -14 73 -47 101 -137 36 -118 30
-111 72 -74 31 27 37 38 37 72 0 31 3 39 14 35 8 -3 17 1 20 10 8 21 -1 30
-16 15 -7 -7 -26 -12 -42 -11 l-31 1 33 8 c42 10 46 14 34 37 -10 17 -11 17
-17 1 -11 -28 -48 -22 -70 11 -25 38 -29 34 -10 -12 17 -41 21 -112 5 -102 -5
3 -10 19 -10 34 0 29 -62 111 -83 111 -7 0 -24 7 -39 14 -15 8 -30 11 -33 7z"/>
<path d="M4010 3238 c0 -7 5 -20 10 -28 8 -12 10 -11 10 7 0 12 -4 25 -10 28
-5 3 -10 0 -10 -7z"/>
<path d="M5304 3239 c-3 -5 6 -9 20 -9 31 0 34 6 6 13 -11 3 -23 1 -26 -4z"/>
<path d="M5388 3243 c17 -2 47 -2 65 0 17 2 3 4 -33 4 -36 0 -50 -2 -32 -4z"/>
<path d="M5457 3163 c18 -2 50 -2 70 0 21 2 7 4 -32 4 -38 0 -55 -2 -38 -4z"/>
<path d="M4260 3120 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
-4 -4 -4 -10z"/>
<path d="M5269 3122 c-36 -15 -108 -78 -109 -94 0 -20 -20 -25 -20 -6 0 8 -3
9 -10 2 -8 -8 -7 -19 0 -39 10 -26 9 -27 -17 -21 l-28 7 24 -19 c18 -15 21
-21 10 -25 -12 -5 -12 -7 1 -16 13 -9 12 -11 -4 -11 -20 0 -20 0 0 -15 18 -15
15 -16 -33 -13 -28 2 -49 0 -47 -4 2 -3 -2 -8 -8 -11 -7 -2 16 -4 51 -3 35 1
66 -3 67 -9 2 -5 -13 -10 -33 -11 -48 -1 -84 -10 -97 -25 -8 -9 -6 -10 9 -5
25 9 95 18 77 10 -6 -3 -10 -9 -7 -14 2 -4 -13 -10 -35 -14 -44 -7 -55 -26
-16 -26 14 0 36 -4 51 -10 17 -7 24 -7 20 0 -3 6 -1 10 4 10 6 0 11 -7 11 -15
0 -11 -11 -15 -42 -15 -61 0 -66 -6 -60 -72 3 -42 11 -65 28 -83 28 -30 30
-30 71 -5 24 14 36 32 47 71 9 29 16 60 16 70 0 30 48 123 80 153 33 32 36 41
18 52 -7 5 -8 3 -3 -6 6 -9 4 -11 -5 -5 -9 5 -5 14 15 31 16 13 33 24 38 24 6
0 8 3 4 6 -3 3 -21 -2 -41 -11 -31 -15 -36 -22 -36 -52 0 -22 -4 -32 -11 -28
-6 4 -8 13 -5 21 3 8 1 14 -5 14 -19 0 25 51 60 70 l36 19 -33 1 c-24 0 -42
-8 -64 -30 -16 -16 -31 -30 -33 -30 -8 0 -10 72 -2 77 6 3 7 1 3 -5 -15 -24
20 -11 38 14 l18 26 -23 -12 c-15 -7 -9 2 16 24 22 20 35 36 28 36 -6 0 -15
-4 -18 -10 -3 -5 -11 -10 -18 -10 -6 0 4 11 23 25 33 24 32 31 -1 17z"/>
<path d="M5458 3077 c-27 -6 -48 -15 -48 -20 0 -5 10 -7 23 -4 12 4 41 9 65
13 45 7 69 25 30 23 -13 -1 -44 -6 -70 -12z"/>
<path d="M1260 3060 c34 -11 60 -11 35 0 -11 5 -29 8 -40 8 -16 0 -15 -2 5 -8z"/>
<path d="M1106 3042 c-3 -5 18 -12 47 -16 28 -3 70 -8 92 -11 38 -5 38 -4 -10
10 -67 21 -122 28 -129 17z"/>
<path d="M5646 3038 c3 -4 29 -7 59 -5 29 1 48 5 42 9 -16 10 -107 6 -101 -4z"/>
<path d="M5280 3030 c-8 -5 -10 -10 -5 -10 6 0 17 5 25 10 8 5 11 10 5 10 -5
0 -17 -5 -25 -10z"/>
<path d="M4274 3010 c-6 -6 -24 -12 -40 -13 -25 -2 -28 -6 -26 -27 4 -29 22
-52 22 -28 0 11 6 15 21 11 15 -4 22 0 26 16 3 11 9 21 14 21 5 0 9 7 9 15 0
17 -12 19 -26 5z"/>
<path d="M5473 3008 c-35 -17 -27 -29 10 -14 17 7 39 16 47 19 9 3 5 5 -10 6
-14 0 -35 -5 -47 -11z"/>
<path d="M5667 2993 c-13 -13 -7 -21 13 -16 11 3 20 9 20 14 0 10 -24 12 -33
2z"/>
<path d="M5058 2963 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"/>
<path d="M5463 2910 c0 -30 2 -43 4 -27 2 15 2 39 0 55 -2 15 -4 2 -4 -28z"/>
<path d="M5530 2910 c-12 -8 -11 -10 8 -10 12 0 22 5 22 10 0 13 -11 13 -30 0z"/>
<path d="M5296 2874 c-21 -20 -39 -54 -33 -61 3 -2 16 1 28 8 29 15 66 49 53
49 -5 0 -2 5 6 10 12 8 9 10 -12 10 -15 0 -34 -7 -42 -16z"/>
<path d="M5548 2873 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"/>
<path d="M5720 2870 c20 -13 57 -13 65 0 4 6 -11 10 -37 10 -31 0 -39 -3 -28
-10z"/>
<path d="M4281 2854 c-7 -8 -11 -18 -8 -21 9 -9 45 7 51 22 7 20 -25 19 -43
-1z"/>
<path d="M4350 2856 c0 -2 8 -10 18 -17 15 -13 16 -12 3 4 -13 16 -21 21 -21
13z"/>
<path d="M5539 2841 c12 -8 51 -4 51 5 0 2 -15 4 -32 4 -23 0 -29 -3 -19 -9z"/>
<path d="M5465 2820 c4 -14 12 -29 17 -35 7 -7 8 -2 3 15 -4 14 -12 30 -17 35
-7 7 -8 2 -3 -15z"/>
<path d="M4391 2821 c-8 -5 -9 -11 -3 -15 5 -3 15 1 22 9 14 16 3 20 -19 6z"/>
<path d="M4293 2809 c-24 -9 -33 -49 -11 -49 6 0 8 -3 5 -6 -4 -4 -13 -1 -21
5 -9 8 -16 8 -20 2 -4 -5 -1 -13 4 -16 8 -5 6 -13 -5 -25 -8 -9 -13 -24 -9
-34 8 -20 6 -20 52 -1 34 15 38 15 49 -1 12 -16 13 -16 13 -2 0 9 -5 29 -11
45 -7 15 -15 42 -18 59 -5 28 -9 30 -28 23z"/>
<path d="M5303 2805 c-35 -15 -45 -45 -15 -45 12 0 13 -3 5 -8 -10 -7 -10 -28
0 -104 15 -107 32 -143 73 -151 51 -9 88 31 58 64 -9 10 -14 25 -11 33 4 9 2
18 -3 21 -5 3 0 15 12 27 l21 21 -32 13 c-24 10 -30 18 -28 35 2 13 12 26 23
30 14 6 9 8 -18 8 -20 1 -49 6 -65 12 l-28 11 49 18 c26 11 51 21 54 24 11 12
-64 5 -95 -9z"/>
<path d="M5534 2813 c4 -4 30 -8 57 -9 30 0 45 2 37 7 -16 11 -104 12 -94 2z"/>
<path d="M5671 2804 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z"/>
<path d="M5740 2810 c-12 -7 -8 -10 17 -10 17 0 40 -3 50 -6 12 -5 15 -4 8 4
-15 16 -58 23 -75 12z"/>
<path d="M5536 2758 c1 -18 6 -43 9 -55 5 -15 3 -23 -5 -23 -19 0 -37 24 -45
58 -3 18 -11 32 -16 32 -5 0 -8 -3 -7 -7 1 -5 -2 -38 -6 -74 -8 -76 6 -125 45
-153 47 -33 105 -5 95 46 -2 14 4 34 14 48 l19 25 10 -27 c6 -15 21 -34 34
-43 32 -21 75 -3 83 34 4 14 13 37 21 50 13 20 13 25 2 33 -11 7 -11 11 -1 15
6 2 12 16 12 29 0 27 -37 48 -65 38 -18 -7 -18 -10 -5 -34 7 -12 7 -21 0 -25
-16 -10 -50 14 -51 38 -1 20 -2 20 -6 2 -3 -11 -9 -24 -14 -30 -5 -5 -9 -21
-9 -36 0 -15 -4 -31 -10 -34 -5 -3 -10 -2 -10 4 0 5 -8 17 -17 26 -15 16 -15
18 0 26 20 12 11 39 -13 39 -10 0 -20 7 -24 15 -3 8 -14 15 -24 15 -14 0 -17
-7 -16 -32z"/>
<path d="M5360 2770 l-25 -8 25 -1 c14 0 32 4 40 9 13 9 13 10 0 9 -8 -1 -26
-5 -40 -9z"/>
<path d="M4360 2750 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
<path d="M4421 2751 c-8 -5 -11 -16 -7 -28 4 -12 1 -25 -9 -33 -24 -20 -17
-30 18 -23 47 9 63 37 26 46 -17 5 -19 9 -9 26 11 22 4 27 -19 12z"/>
<path d="M4370 2620 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
-4 -4 -4 -10z"/>
<path d="M4392 2580 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z"/>
<path d="M2330 2546 c0 -9 5 -16 10 -16 6 0 10 4 10 9 0 6 -4 13 -10 16 -5 3
-10 -1 -10 -9z"/>
<path d="M4316 2551 c-9 -14 16 -113 30 -118 7 -2 31 5 53 17 37 18 41 23 35
48 -4 15 -9 29 -11 32 -7 8 -72 7 -67 -1 2 -4 -1 -11 -7 -15 -16 -9 -30 18
-17 33 7 9 7 13 0 13 -6 0 -13 -4 -16 -9z m98 -56 c3 -8 1 -15 -4 -15 -6 0
-10 7 -10 15 0 8 2 15 4 15 2 0 6 -7 10 -15z"/>
<path d="M780 2520 c-8 -5 -12 -12 -9 -15 4 -3 12 1 19 10 14 17 11 19 -10 5z"/>
<path d="M2019 2503 c-25 -29 -13 -167 19 -228 9 -16 15 -38 13 -47 -1 -10 3
-18 8 -18 6 0 10 -5 9 -12 -2 -7 16 -19 39 -27 38 -14 49 -13 114 2 70 17 179
70 179 87 0 19 -60 21 -87 3 -47 -32 -81 -46 -92 -39 -6 4 -11 1 -11 -7 0 -18
-60 -31 -74 -17 -7 7 0 10 20 11 l29 1 -32 8 c-73 17 -96 62 -99 195 -1 55 -7
101 -12 103 -4 1 -15 -5 -23 -15z m82 -285 c27 -31 23 -42 -6 -16 -24 21 -32
38 -19 38 4 0 15 -10 25 -22z"/>
<path d="M2350 2505 c0 -8 -14 -28 -30 -45 -35 -36 -33 -45 12 -54 18 -4 59
-20 90 -36 31 -17 63 -30 70 -30 16 0 -63 79 -79 80 -7 0 -13 7 -13 16 0 22
-30 84 -41 84 -5 0 -9 -7 -9 -15z"/>
<path d="M729 2460 l-24 -20 30 12 c39 15 54 28 33 28 -9 0 -26 -9 -39 -20z"/>
<path d="M4284 2452 c6 -19 4 -20 -44 -24 -26 -3 -26 -7 10 -88 17 -38 30 -74
30 -82 0 -7 8 -22 16 -33 14 -19 15 -17 8 20 -3 22 -11 45 -16 52 -13 16 -4
28 31 42 28 12 28 14 19 49 -5 20 -14 41 -18 46 -5 5 -6 15 -3 22 3 9 -2 14
-17 14 -16 0 -20 -4 -16 -18z"/>
<path d="M740 2430 c-8 -5 -10 -10 -5 -10 6 0 17 5 25 10 8 5 11 10 5 10 -5 0
-17 -5 -25 -10z"/>
<path d="M1305 2414 c11 -8 31 -24 43 -35 13 -11 26 -18 28 -16 7 6 -68 67
-81 67 -5 0 -1 -7 10 -16z"/>
<path d="M688 2365 c-31 -19 -59 -43 -63 -52 -5 -14 -2 -14 17 3 33 30 93 64
112 64 9 0 16 5 16 10 0 18 -25 10 -82 -25z"/>
<path d="M2205 2380 c11 -5 29 -9 40 -9 l20 0 -20 9 c-11 5 -29 9 -40 9 l-20
0 20 -9z"/>
<path d="M2280 2362 c18 -12 121 -34 127 -28 6 6 -53 24 -102 31 -27 4 -35 3
-25 -3z"/>
<path d="M695 2329 c-55 -34 -115 -88 -115 -102 0 -6 22 11 48 35 49 46 71 60
115 77 21 8 24 7 24 -19 0 -18 -5 -26 -12 -23 -7 2 -19 -2 -26 -9 -8 -7 -38
-29 -66 -48 -29 -19 -53 -38 -53 -42 0 -4 -6 -13 -14 -21 -18 -18 -46 -84 -46
-108 0 -30 15 -22 28 15 16 43 127 164 158 172 13 3 21 10 18 15 -3 5 2 6 11
3 8 -4 22 0 31 7 14 11 13 14 -3 23 -10 6 -18 20 -18 31 0 30 -25 28 -80 -6z"/>
<path d="M4430 2330 c34 -11 60 -11 35 0 -11 5 -29 8 -40 8 -16 0 -15 -2 5 -8z"/>
<path d="M4505 2310 c27 -12 43 -12 25 0 -8 5 -22 9 -30 9 -10 0 -8 -3 5 -9z"/>
<path d="M2547 2293 c-4 -6 0 -18 7 -28 10 -14 17 -16 32 -7 19 10 19 11 -1
18 -11 4 -23 12 -26 17 -4 6 -9 5 -12 0z"/>
<path d="M900 2276 c0 -8 5 -18 10 -21 6 -3 10 1 10 9 0 8 -4 18 -10 21 -5 3
-10 -1 -10 -9z"/>
<path d="M760 2222 c-61 -38 -137 -126 -166 -189 -23 -49 -32 -131 -17 -147 4
-3 21 33 38 82 44 122 126 245 153 228 15 -9 45 19 41 38 -4 15 -9 13 -49 -12z"/>
<path d="M2438 2214 c-7 -16 -18 -33 -25 -37 -16 -10 -16 -32 0 -58 10 -17 9
-22 -5 -33 -10 -7 -18 -19 -18 -25 0 -7 8 -11 18 -9 12 2 17 -3 16 -19 0 -12
3 -20 8 -17 12 7 57 -29 58 -46 0 -11 6 -9 19 7 28 34 17 63 -24 63 -28 0 -34
4 -39 28 -17 86 -17 101 -1 132 9 17 14 34 11 37 -3 3 -11 -7 -18 -23z"/>
<path d="M800 2180 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
<path d="M2370 2153 c0 -16 5 -35 10 -43 7 -11 9 -3 8 28 -1 46 -18 60 -18 15z"/>
<path d="M820 2136 c0 -24 16 -43 26 -33 8 7 -7 57 -17 57 -5 0 -9 -11 -9 -24z"/>
<path d="M860 2150 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
-4 -4 -4 -10z"/>
<path d="M723 2053 c-74 -73 -107 -117 -100 -136 2 -7 10 -1 17 13 6 14 36 45
66 70 30 24 54 52 54 61 0 10 12 27 26 38 15 12 22 21 16 21 -5 0 -41 -30 -79
-67z"/>
<path d="M720 1869 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
-5 -10 -11z"/>
<path d="M708 1844 c-4 -4 -3 -15 3 -25 7 -14 6 -17 -5 -13 -9 3 -16 -4 -20
-23 -4 -15 -21 -56 -37 -91 -16 -34 -29 -70 -28 -80 0 -9 9 3 20 28 26 59 64
116 111 165 l37 40 -26 2 c-16 0 -21 -2 -13 -7 9 -6 9 -9 0 -15 -6 -4 -17 0
-23 10 -7 9 -16 13 -19 9z"/>
<path d="M660 1815 c-7 -9 -11 -18 -8 -20 3 -3 11 1 18 10 7 9 11 18 8 20 -3
3 -11 -1 -18 -10z"/>
<path d="M621 1754 c-12 -15 -21 -32 -21 -40 0 -7 -3 -21 -6 -31 -7 -21 39 53
49 80 9 24 2 21 -22 -9z"/>
<path d="M1610 1761 c0 -10 8 -21 18 -23 10 -3 39 -37 66 -76 26 -39 55 -77
64 -84 16 -12 16 -11 1 7 -8 11 -26 38 -38 60 -30 52 -93 135 -103 135 -4 0
-8 -8 -8 -19z"/>
<path d="M920 1710 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0
-16 -4 -16 -10z"/>
<path d="M1430 1590 c-8 -5 -23 -10 -32 -10 -20 0 -98 -32 -98 -40 0 -3 23 -3
52 -1 40 2 54 -1 64 -14 7 -9 18 -14 24 -10 9 6 9 10 -1 17 -9 5 -4 6 14 2 32
-7 37 12 10 45 -13 15 -22 18 -33 11z"/>
<path d="M784 1495 c-7 -19 -14 -39 -14 -45 0 -17 -18 -11 -22 8 -2 9 -5 -40
-6 -111 -3 -119 -1 -131 24 -187 23 -51 38 -68 118 -129 50 -38 98 -71 105
-73 8 -2 27 -15 44 -30 33 -30 90 -43 156 -36 l41 3 -6 -35 c-4 -25 -1 -40 9
-48 12 -11 19 -7 37 23 22 36 53 57 100 68 19 5 111 66 138 92 2 2 -7 1 -20
-1 -22 -5 -22 -5 -4 10 26 21 16 20 -36 -3 -24 -11 -51 -22 -60 -25 -11 -3
-18 -15 -18 -29 0 -25 -22 -41 -73 -52 -20 -4 -33 -16 -43 -41 -8 -20 -18 -34
-21 -31 -3 3 7 32 21 64 22 46 38 65 79 91 29 18 70 49 92 68 26 23 30 30 12
18 -15 -9 -30 -14 -33 -12 -3 3 10 15 28 27 52 33 24 24 -32 -10 -28 -17 -57
-28 -65 -25 -8 3 -15 1 -15 -4 0 -6 5 -10 11 -10 23 0 1 -23 -35 -35 -46 -16
-76 -42 -76 -66 0 -39 -18 -26 -24 17 -8 59 6 89 62 130 23 18 38 36 32 39 -5
3 -10 3 -10 -2 0 -4 -14 -16 -30 -25 l-30 -17 17 24 c10 13 21 25 26 25 4 0 7
6 7 13 0 21 59 70 150 126 46 28 81 51 77 51 -4 0 -44 -19 -90 -42 -105 -55
-105 -55 -87 -34 7 10 37 31 65 47 27 16 43 29 35 29 -8 0 -53 -22 -100 -50
-47 -27 -90 -50 -96 -50 -5 0 -29 -19 -52 -42 -23 -22 -42 -36 -42 -30 0 7 4
12 10 12 5 0 12 11 16 25 4 14 9 24 11 21 7 -6 34 20 32 31 -5 32 34 76 104
116 26 15 47 30 47 32 0 13 -96 -32 -125 -59 -18 -17 -48 -39 -66 -49 -30 -16
-32 -17 -44 0 -9 12 -10 25 -3 45 10 27 38 40 38 17 0 -8 5 -7 16 2 15 12 13
14 -11 22 -20 7 -29 5 -39 -8 -8 -12 -15 -14 -20 -7 -3 6 -2 14 4 17 7 4 8 11
1 18 -9 12 -11 18 -11 37 0 17 -25 11 -37 -9 -8 -12 -19 -17 -31 -14 -17 4
-58 -13 -117 -50 -30 -18 -34 -28 -24 -54 5 -14 9 -54 9 -89 0 -36 5 -74 10
-85 8 -15 7 -19 -4 -19 -22 0 -43 36 -56 94 -6 27 -15 57 -21 68 -6 11 -12 41
-14 66 -2 26 -7 63 -10 83 -7 39 10 63 26 38 6 -10 9 -8 9 9 0 13 5 32 10 42
8 15 6 21 -9 30 -28 15 -31 14 -47 -25z m496 -294 c0 -5 -7 -12 -16 -15 -14
-5 -15 -4 -4 9 14 17 20 19 20 6z m-256 -110 c3 -5 -3 -11 -14 -14 -20 -5 -26
3 -13 16 9 10 21 9 27 -2z m-50 -30 c3 -5 0 -14 -8 -20 -10 -9 -15 -8 -19 3
-9 22 15 37 27 17z m426 -15 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11
10 11 6 0 10 -2 10 -4z m70 -60 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5
11 10 11 6 0 10 -2 10 -4z m-335 -26 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3
6 -2 10 4 10 5 0 13 -4 16 -10z m31 -47 c-7 -7 -26 7 -26 19 0 6 6 6 15 -2 9
-7 13 -15 11 -17z"/>
<path d="M856 1483 c-14 -35 -6 -82 16 -94 17 -9 20 -9 16 3 -8 20 26 40 41
25 8 -8 14 -8 23 1 10 10 10 15 -2 22 -8 5 -15 15 -15 21 0 7 -17 18 -37 25
-31 11 -37 10 -42 -3z"/>
<path d="M966 1425 c-7 -19 13 -19 38 0 19 14 19 15 -6 15 -14 0 -28 -7 -32
-15z"/>
<path d="M1030 1420 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
<path d="M1677 1395 c10 -13 22 -25 27 -25 5 0 -1 11 -14 25 -30 32 -36 32
-13 0z"/>
<path d="M1700 1286 c0 -2 8 -10 18 -17 15 -13 16 -12 3 4 -13 16 -21 21 -21
13z"/>
<path d="M1210 1240 c-9 -6 -10 -10 -3 -10 6 0 15 5 18 10 8 12 4 12 -15 0z"/>
<path d="M1487 1109 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z"/>
<path d="M1259 1050 c-41 -35 -69 -80 -51 -80 4 0 32 22 62 49 38 34 52 53 45
60 -7 7 -24 -2 -56 -29z"/>
<path d="M2999 1063 c11 -20 49 -63 57 -63 2 0 -8 18 -22 40 -26 39 -54 57
-35 23z"/>
<path d="M1624 1038 c-32 -24 -33 -40 -9 -93 7 -17 23 -51 34 -78 11 -26 26
-46 33 -45 12 3 99 110 93 116 -9 9 -46 -22 -66 -55 -19 -30 -24 -34 -27 -19
-2 10 10 32 29 52 30 31 31 34 11 34 -14 0 -27 -11 -37 -30 -19 -37 -29 -39
-20 -3 3 15 23 43 43 61 l37 34 -34 -18 c-18 -11 -39 -32 -46 -48 -12 -28 -13
-29 -24 -8 -13 25 -16 55 -2 34 6 -11 13 -7 30 14 27 34 27 48 1 34 -19 -10
-20 -9 -14 14 8 32 6 32 -32 4z"/>
<path d="M1538 1003 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"/>
<path d="M1949 949 c-26 -26 -22 -37 29 -73 38 -27 43 -28 72 -16 43 18 36 47
-20 81 -55 34 -55 34 -81 8z"/>
<path d="M1424 916 c-22 -19 -61 -44 -87 -56 -60 -28 -91 -65 -76 -91 9 -18
11 -18 40 3 23 18 27 24 14 28 -12 4 -8 10 15 24 31 18 67 15 55 -4 -3 -5 -1
-10 4 -10 6 0 11 -4 11 -10 0 -5 -10 -10 -22 -10 -22 0 -22 -1 5 -19 31 -20
25 -31 -25 -50 -22 -8 -26 -8 -21 4 7 21 -11 19 -30 -3 -19 -20 -23 -37 -7
-27 6 3 7 -1 4 -9 -3 -8 1 -30 10 -47 9 -18 16 -38 16 -46 0 -7 4 -13 9 -13 5
0 20 -21 33 -46 43 -86 109 -109 151 -52 l20 27 -30 93 c-34 102 -33 132 0 69
12 -22 29 -49 38 -59 9 -10 34 -44 57 -75 63 -85 90 -94 142 -50 29 24 32 31
27 67 -2 23 -19 70 -36 106 -18 36 -30 54 -27 40 2 -14 10 -53 17 -87 9 -44
10 -66 2 -74 -7 -7 -14 0 -23 23 -7 18 -20 41 -28 51 -8 9 -11 17 -6 18 5 1
-2 4 -16 8 -16 5 -24 13 -22 24 2 9 -2 17 -8 17 -6 0 -8 5 -5 10 8 13 -1 13
-25 0 -17 -9 -19 -7 -15 21 4 29 2 31 -22 26 l-27 -5 25 20 24 20 -35 -6 -34
-6 29 30 29 30 -34 -6 c-19 -4 -41 -11 -47 -17 -9 -6 -13 -6 -13 2 0 6 19 24
42 41 40 29 38 41 -4 19 -28 -15 -47 3 -27 27 12 16 12 17 -3 11 -10 -3 -18
-2 -18 3 0 6 4 10 9 10 6 0 9 9 8 20 -2 28 -18 25 -63 -14z m-4 -206 c0 -5 -8
-10 -17 -10 -10 0 -33 -9 -50 -20 -18 -11 -33 -16 -33 -11 0 13 62 51 83 51 9
0 17 -4 17 -10z m30 -28 c0 -5 -22 -15 -50 -24 -27 -9 -50 -14 -50 -12 0 2 15
13 33 24 33 20 67 26 67 12z m-23 -48 c-16 -9 -31 -13 -34 -10 -3 3 5 10 18
15 37 15 47 12 16 -5z m9 -29 c-23 -17 -36 -19 -36 -6 0 5 10 12 23 14 12 2
24 5 27 5 3 1 -4 -5 -14 -13z"/>
<path d="M1742 870 c-4 -3 -12 -19 -18 -36 -10 -29 -9 -35 20 -70 117 -145
146 -174 176 -174 68 0 78 27 28 77 -48 48 -68 72 -68 82 0 5 -8 12 -19 16
-20 6 -23 34 -6 48 6 4 -3 5 -19 1 -27 -7 -29 -5 -22 20 7 27 7 27 -22 12 -16
-8 -32 -22 -35 -31 -4 -8 -12 -15 -19 -15 -7 0 5 18 26 39 l38 39 -27 -1 c-15
-1 -30 -4 -33 -7z"/>
<path d="M1680 792 c6 -13 14 -21 18 -18 3 4 -2 14 -12 24 -18 16 -18 16 -6
-6z"/>
<path d="M1303 756 c-15 -13 -26 -26 -23 -29 3 -3 21 8 40 24 19 16 29 29 23
29 -7 0 -25 -11 -40 -24z"/>
<path d="M1690 740 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
</g>
</svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config = {
	darkMode: ["selector"],
	content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
	prefix: "",
	theme: {
		screens: {
			sm: "640px",
			md: "768px",
			lg: "1024px",
			xl: "1280px",
			"2xl": "1536px",
		},
		container: {
			padding: {
				DEFAULT: "1rem",
				sm: "2rem",
				lg: "4rem",
			},
		},
		extend: {
			colors: {
				border: "hsl(var(--border))",
				input: "hsl(var(--input))",
				ring: "hsl(var(--ring))",
				background: "hsl(var(--background))",
				foreground: "hsl(var(--foreground))",
				primary: {
					DEFAULT: "hsl(var(--primary))",
					foreground: "hsl(var(--primary-foreground))",
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary))",
					foreground: "hsl(var(--secondary-foreground))",
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive))",
					foreground: "hsl(var(--destructive-foreground))",
				},
				muted: {
					DEFAULT: "hsl(var(--muted))",
					foreground: "hsl(var(--muted-foreground))",
				},
				accent: {
					DEFAULT: "hsl(var(--accent))",
					foreground: "hsl(var(--accent-foreground))",
				},
				popover: {
					DEFAULT: "hsl(var(--popover))",
					foreground: "hsl(var(--popover-foreground))",
				},
				card: {
					DEFAULT: "hsl(var(--card))",
					foreground: "hsl(var(--card-foreground))",
				},
				sidebar: {
					DEFAULT: "hsl(var(--sidebar-background))",
					foreground: "hsl(var(--sidebar-foreground))",
					primary: "hsl(var(--sidebar-primary))",
					"primary-foreground": "hsl(var(--sidebar-primary-foreground))",
					accent: "hsl(var(--sidebar-accent))",
					"accent-foreground": "hsl(var(--sidebar-accent-foreground))",
					border: "hsl(var(--sidebar-border))",
					ring: "hsl(var(--sidebar-ring))",
				},
				chart: {
					"1": "hsl(var(--chart-1))",
					"2": "hsl(var(--chart-2))",
					"3": "hsl(var(--chart-3))",
					"4": "hsl(var(--chart-4))",
					"5": "hsl(var(--chart-5))",
				},
			},
			borderRadius: {
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)",
			},
			keyframes: {
				"accordion-down": {
					from: {
						height: "0",
					},
					to: {
						height: "var(--radix-accordion-content-height)",
					},
				},
				"accordion-up": {
					from: {
						height: "var(--radix-accordion-content-height)",
					},
					to: {
						height: "0",
					},
				},
				orbit: {
					"0%": {
						transform: "rotate(0deg) translateY(calc(var(--radius) * 1px)) rotate(0deg)",
					},
					"100%": {
						transform: "rotate(360deg) translateY(calc(var(--radius) * 1px)) rotate(-360deg)",
					},
				},
				marquee: {
					from: {
						transform: "translateX(0)",
					},
					to: {
						transform: "translateX(calc(-100% - var(--gap)))",
					},
				},
				"marquee-vertical": {
					from: {
						transform: "translateY(0)",
					},
					to: {
						transform: "translateY(calc(-100% - var(--gap)))",
					},
				},
				speedLeft: {
					"0%": { transform: "translateX(-100%)", opacity: "0" },
					"100%": { transform: "translateX(0)", opacity: "1" },
				},
				speedRight: {
					"0%": { transform: "translateX(100%)", opacity: "0" },
					"100%": { transform: "translateX(0)", opacity: "1" },
				},
				speedUp: {
					"0%": { transform: "translateY(100%)", opacity: "0" },
					"100%": { transform: "translateY(0)", opacity: "1" },
				},
				float: {
					"0%, 100%": { transform: "translateY(0)" },
					"50%": { transform: "translateY(-20px)" },
				},
			},
			animation: {
				"accordion-down": "accordion-down 0.2s ease-out",
				"accordion-up": "accordion-up 0.2s ease-out",
				orbit: "orbit calc(var(--duration)*1s) linear infinite",
				marquee: "marquee var(--duration) infinite linear",
				"marquee-vertical": "marquee-vertical var(--duration) linear infinite",
				"speed-left": "speedLeft 1s ease-out forwards",
				"speed-right": "speedRight 1s ease-out forwards",
				"speed-up": "speedUp 1s ease-out forwards",
				"pulse-fast": "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
				float: "float 6s ease-in-out infinite",
			},
		},
	},
	plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
		"target": "es2015",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"forceConsistentCasingInFileNames": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"plugins": [
			{
				"name": "next"
			}
		],
		"paths": {
			"@/*": ["./*"],
			"@/lib/*": ["./lib/*"],
			"@/queries/*": ["./lib/queries/*"],
			"@/components/*": ["./components/*"],
			"@/types/*": ["./types/*"]
		}
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
, "hooks/sections/hero.tjsx"  ],
  "exclude": [
    "node_modules"
  ]
}

================
File: types/analysis.ts
================
import { LucideIcon } from "lucide-react";

export interface Benchmarks {
	loadTime: { industry: number; optimized: number };
	performanceScore: { industry: number; optimized: number };
	seoScore: { industry: number; optimized: number };
	bestPractices: { industry: number; optimized: number };
	mobileScore: { industry: number; optimized: number };
	bounceRate: { industry: number; optimized: number };
	averageTimeOnPage: { industry: number; optimized: number };
	organicTrafficIncrease: number;
	conversionRate: { industry: number; optimized: number };
}

export interface Stat {
	icon: any;
	industryValue: number;
	optimizedValue: number;
	label: string;
	improvement: string;
}

export interface PerformanceData {
	month: string;
	industry: number;
	optimized: number;
}

export interface ConversionData {
	category: string;
	industry: number;
	optimized: number;
}

export interface MonthlyService {
	feature: string;
	included: boolean;
}

export interface AddOn {
	title: string;
	description: string;
	price: string;
	features: string[];
}

export interface MetricData {
	value: number;
	unit: string;
	improvement: number;
	icon: LucideIcon;
	description: string;
	impact: string;
	fact: string;
}

export interface Metrics {
	[key: string]: MetricData;
}

export interface SEOProps {
	seo: string;
	benchmarks: Benchmarks;
	seoMetrics: {
		ctrImprovement: number;
		clarityImprovement: number;
		keyOptimizations: Array<{
			title: string;
			improvement?: string;
		}>;
	};
}

export interface MarketProps {
	performanceData: PerformanceData[];
	conversionData: ConversionData[];
}

================
File: types/auth/index.ts
================
import { User } from "@supabase/supabase-js";

export interface AuthResponse {
	user?: User;
	url?: string;
	error?: string;
}

export interface SignoutResponse {
	error?: string;
}

================
File: types/index.ts
================
export * from "./shopify";

================
File: types/shopify.ts
================
export interface Money {
	amount: string;
	currencyCode: string;
}

export interface Image {
	url: string;
	altText: string | null;
	width: number;
	height: number;
}

export interface ProductVariant {
	id: string;
	title: string;
	availableForSale: boolean;
	selectedOptions: {
		name: string;
		value: string;
	}[];
	price: Money;
}

export interface Product {
	id: string;
	title: string;
	handle: string;
	description: string;
	availableForSale: boolean;
	price: Money;
	image: Image;
	variantId?: string;
	images?: Image[];
}

export interface Collection {
	id: string;
	title: string;
	handle: string;
	description: string;
	image?: Image;
	products: {
		edges: {
			node: Product;
		}[];
	};
}

export interface Cart {
	id: string;
	checkoutUrl: string;
	lines: {
		edges: {
			node: {
				id: string;
				quantity: number;
				merchandise: {
					product: Product;
					title: string;
					selectedOptions: {
						name: string;
						value: string;
					}[];
				};
			};
		}[];
	};
	cost: {
		subtotalAmount: Money;
		totalAmount: Money;
		totalTaxAmount: Money;
	};
}

export interface CartLineNode {
	id: string;
	quantity: number;
	merchandise: {
		product: Product;
		title: string;
		selectedOptions: {
			name: string;
			value: string;
		}[];
	};
}
